using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using System.Web.Services;
using System.Configuration;
using System.Xml;
using System.Xml.Linq;
using System.Text;
using System.Web.Security;
using System.Security.Cryptography;
using System.Globalization;
using System.Threading;
using System.Net.NetworkInformation;
using Ninject;
using Ninject.Web;
using integraMobile.Domain;
using integraMobile.Domain.Abstract;
using integraMobile.Domain.Helper;
using integraMobile.Infrastructure;
using integraMobile.ExternalWS;
using integraMobile.WS.Resources;

using Newtonsoft.Json;
using integraMobile.Infrastructure.Logging.Tools;
using log4net;

namespace integraMobile.WS
{
    /// <summary>
    /// Summary description for WebService1
    /// </summary>
    [WebService(Namespace = "http://tempuri.org/")]
    [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]
    [System.ComponentModel.ToolboxItem(false)]
    // To allow this Web Service to be called from script, using ASP.NET AJAX, uncomment the following line. 
    // [System.Web.Script.Services.ScriptService]
    public class integraMobileWS : Ninject.Web.WebServiceBase
    {

        #region Properties

        //Log4net Wrapper class
        private static readonly CLogWrapper m_Log = new CLogWrapper(typeof(integraMobileWS));
        private class ConfirmLockInfo
        {
            public DateTime m_dtCreationUTCDate = DateTime.UtcNow;
        }

        static string _ipsString = "";
        static string _hMacKey = null;
        static byte[] _normKey = null;
        static string _xmlTagName = "ipark";
        static Dictionary<string, ConfirmLockInfo> m_oConfirmLockDictionary = new Dictionary<string, ConfirmLockInfo>();
        static readonly object m_oUserLock = new object();
        private const long BIG_PRIME_NUMBER = 2147483647;
        private const string IN_SUFIX = "_in";
        private const string OUT_SUFIX = "_out";
        private const int MAX_SECONDS_CONFIRMING = 30;
        private const int MEXICO_COUNTRY_ID = 135;

        private const int DEFAULT_WS_TIMEOUT = 5000; //ms   
        private const int DEFAULT_SYNC_REGISTRIES = 100;
      
        private enum payMethods
        {
            Without_SuscriptionType = -1,
            Prepay_Without_Paymethod_Currently = 0,
            Prepay_Credit_Card_Automatic = 1,
            Prepay_Paypal_Automatic = 2,
            Prepay_Credit_Card_Manual = 3,
            Prepay_Paypal_Manual = 4,
            PayPerTransaction_Without_Paymethod_Currently = 5,
            PayPerTransaction_Credit_Card = 6,
            PayPerTransaction_Paypal = 7,
            Prepay_New_User_Without_Paymethod_Currently = 8,
            PayPerTransaction_New_User_Without_Paymethod_Currently = 9
        }



        private enum rechargeMethods
        {
            Undefined = -1,
            Default_Payment_Method = 0,
            Barcode_QR = 1,
            Coupon = 2
        }


        private enum OperationListType
        {
            Current = 1,
            Historical = 2,
            All = 3
        }

        private enum UserSignUpType
        {
            EndsInWeb = 0,
            QuickMobile = 1,
            FullMobile = 2
        }


        string[] UserDeviceLangs = {"es-ES", "en-US", "fr-FR", "ca-ES", "es-MX", "eu-ES"};

        /*

        private string[] CanadaAndUSAProvinces= new string [] { "AL",
                                                                "AR",
                                                                "CT",
                                                                "FL",
                                                                "ID",
                                                                "IA",
                                                                "LA",
                                                                "MA",
                                                                "MS",
                                                                "NE",
                                                                "NJ",
                                                                "NC",
                                                                "OK",
                                                                "RI",
                                                                "TN",
                                                                "VT",
                                                                "WV",
                                                                "AK",
                                                                "CA",
                                                                "DC",
                                                                "GA",
                                                                "IL",
                                                                "KS",
                                                                "ME",
                                                                "MI",
                                                                "MO",
                                                                "NV",
                                                                "NM",
                                                                "ND",
                                                                "OR",
                                                                "SC",
                                                                "TX",
                                                                "VA",
                                                                "WI",
                                                                "AZ",
                                                                "CO",
                                                                "DE",
                                                                "HI",
                                                                "IN",
                                                                "KY",
                                                                "MD",
                                                                "MN",
                                                                "MT",
                                                                "NH",
                                                                "NY",
                                                                "OH",
                                                                "PA",
                                                                "SD",
                                                                "UT",
                                                                "WA",
                                                                "WY",
                                                                "AB",
                                                                "LB",
                                                                "NB",
                                                                "NS",
                                                                "NW",
                                                                "PE",
                                                                "SK",
                                                                "BC",
                                                                "MB",
                                                                "NF",
                                                                "NU",
                                                                "ON",
                                                                "QC",
                                                                "YU"};*/

        static integraMobileWS()
        {
            InitializeStatic();
        }

        [Inject]
        public ICustomersRepository customersRepository { get; set; }
        [Inject]
        public IInfraestructureRepository infraestructureRepository { get; set; }
        [Inject]
        public IGeograficAndTariffsRepository geograficAndTariffsRepository { get; set; }
        [Inject]
        public IBackOfficeRepository backOfficeRepository { get; set; }




        #endregion

        #region integraMobile.WS Web Methods

        [WebMethod]
        public bool CreateOrUpdateMembership(string strUserName, string strUserEmail, string strPassword)
        {
            bool bRes = true;
            try
            {
                Logger_AddLogMessage(string.Format("CreateOrUpdateMembership: UserName={0};Email={1};Password={2}", strUserName, strUserEmail, strPassword), LogLevels.logINFO);

                FormAuthMemberShip.MembershipService.DeleteUser(strUserName);


                MembershipCreateStatus createStatus = FormAuthMemberShip.MembershipService.CreateUser(strUserName, strPassword, strUserEmail);
                if (createStatus != MembershipCreateStatus.Success)
                {
                    FormAuthMemberShip.MembershipService.DeleteUser(strUserName);
                    Logger_AddLogMessage(string.Format("CreateOrUpdateMembership: UserName={0};Email={1};Password={2} ERROR", strUserName, strUserEmail, strPassword), LogLevels.logERROR);
                    bRes = false;
                }
                else
                {
                    Logger_AddLogMessage(string.Format("CreateOrUpdateMembership: UserName={0};Email={1};Password={2} SUCCESS", strUserName, strUserEmail, strPassword), LogLevels.logINFO);
                }
            }
            catch (Exception e)
            {
                bRes = false;
                Logger_AddLogException(e, string.Format("CreateOrUpdateMembership: UserName={0};Email={1};Password={2} EXCEPTION", strUserName, strUserEmail, strPassword), LogLevels.logERROR);

            }



            return bRes;
        }

        /*
         *  QueryLogin
         *  
        <ipark_in>
            <u>login or NULL if the user is anonymous</u >
	        <pasw>password</ pasw >
            <cityID>city id </cityID>
            <gps>
            <lat>gps latitude</lat>
            <long>gps longitud</long>
            </gps>
            <cmodel>MD235Y</ cmodel >			-- Cell Phone Model
            <SessionID>DNTH1BU9DTC0</ SessionID >		-- Cell Phone Serial Number
            <cosvers>6.0.1(10A523) < cosvers >		-- Cell Phne OS Version
            <ah>authentication hash</ah>
        </ ipark _in>
         * 
         * 
        <ipark_out>
	        <r>Result of the method</r>
            <bal>current balance of the user in cents</bal>
            <cur>currency EUR/USD</cur>
            <cityID>125</cityID>
            <cityVERS>5</cityVERS>
            <tarVERS>6</tarVERS>       
            <userMSG> Messages for the user
	            <usertick>	-- only tickets payable in the PBP app
		            <f>fine number</f>
			            <d>date in format hh24missddMMYY</d>
		            <lp>AAAA111<lp>
			            <q>quantity paid in Cents for the fine</q>
	            </ usertick>
            </userMSG>
            <userDATA>
	            <userlp>
	                <nlp>2</nlp>
                    <lp1>AAAA111</lp1>
                    <lp1>BBBB222</lp1>
                 </userlp>
                <paymeth> type of payment selected by the user </paymeth>
                <ccpan>credit call pan</ccpan >
                <userpark> for every plate of the user, we would return alive operations
                    <p>plate</p>
                    <g>parking zone</g>
                    <ad>tariff type selected: NULL, ROTATION, RESIDENTS, VIPS</ad>
	                    <d>date in format hh24missddMMYY</d>
                    <q>Amount of money paid in Cents</q>
                    <t>Time in minutes obtained paying <q> cents</t>
                </userpark>
                <userpreferences>
	                <lup> last used plate </lup>
                    <mup> most used plate </mup>
                    <luz> last used zone </luz> (in case there is no GPS)
	                <muz> most used zone </muz> (in case there is no GPS)
                </userpreferences>

                This could be used to notify a user that parked in a meter or call center his alive operation.	
            </ userDATA >	-- Data of the user

        </ipark_out>
         * 
         * 
        Result of the method:
        a.	2: Login successful.
        b.	-10: Invalid authentication hash
        c.	-11: Invalid Authentication.
        d.	-12: Maximum number of trials reached.         
        e.	-19 Invalid Input Parameter 
        f.	-20 Missing Input Parameter 

         *
         */
        [WebMethod]
        public string QueryLogin(string xmlIn)
        {
            string xmlOut = "";

            try
            {               
                SortedList parametersIn=null;
                SortedList parametersOut=null;
                string strHash="";
                string strHashString="";

                Logger_AddLogMessage(string.Format("QueryLogin: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["pasw"] == null)||
                        (parametersIn["OSID"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("QueryLogin::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString,strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("QueryLogin::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            string strUsername = parametersIn["u"].ToString();
                            if (FormAuthMemberShip.MembershipService.ValidateUser(ref strUsername,
                                                                                  parametersIn["pasw"].ToString()))
                            {

                                USER oUser = null;

                                if (customersRepository.GetUserData(ref oUser, strUsername))
                                {

                                    if (oUser != null)
                                    {
                                        if (oUser.USR_ACTIVATED == 0)
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_User_Is_Not_Activated);
                                            Logger_AddLogMessage(string.Format("QueryLogin::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }

                                        decimal? dInsId = null;

                                        parametersOut = new SortedList();
                                        parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();

                                        rt = GetQueryLoginData(ref oUser, parametersIn, out dInsId, ref parametersOut);
                                        if (rt != ResultType.Result_OK)
                                        {
                                            parametersOut["r"] = Convert.ToInt32(rt);
                                            xmlOut = GenerateXMLOuput(parametersOut);
                                            Logger_AddLogMessage(string.Format("QueryLogin::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }

                                        string strSessionID = "";
                                        int? iUTCOffset = null;
                                        string strCulture = "";


                                        if (parametersIn["lang"] != null)
                                        {
                                            try
                                            {
                                                int iLangIndex = Convert.ToInt32(parametersIn["lang"].ToString());
                                                if (iLangIndex <= UserDeviceLangs.Length)
                                                {
                                                    strCulture = UserDeviceLangs[iLangIndex - 1];
                                                }
                                            }
                                            catch
                                            { }


                                        }



                                        if ((parametersIn["date"] != null) && (parametersIn["utc_date"] != null))
                                        {

                                            DateTime dt;
                                            DateTime dtUTC;

                                            try
                                            {
                                                dt = DateTime.ParseExact(parametersIn["date"].ToString(), "HHmmssddMMyy",
                                                  CultureInfo.InvariantCulture);
                                                dtUTC = DateTime.ParseExact(parametersIn["utc_date"].ToString(), "HHmmssddMMyy",
                                                  CultureInfo.InvariantCulture);

                                                iUTCOffset = Convert.ToInt32((dtUTC - dt).TotalMinutes + 0.5);
                                            
                                            }
                                            catch
                                            {
                                                iUTCOffset = 0;
                                            }


                                        }
                                        else
                                        {

                                            if (parametersIn["utc_offset"] != null)
                                            {
                                                try
                                                {
                                                    iUTCOffset = Convert.ToInt32(parametersIn["utc_offset"].ToString());
                                                }
                                                catch { }
                                            }
                                            else
                                            {
                                                iUTCOffset = 0;
                                            }
                                        }

                                        MobileOS oMobileOS = MobileOS.Android;
                                        try
                                        {
                                            int iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());
                                            oMobileOS = (MobileOS)iOSID;
                                        }
                                        catch
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                            Logger_AddLogMessage(string.Format("QueryLogin::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }

                                        string sAppVersion = "";
                                        try
                                        {
                                            if (parametersIn["appvers"] != null)
                                                sAppVersion = parametersIn["appvers"].ToString();
                                            else
                                                sAppVersion = parametersIn["vers"].ToString();
                                        }
                                        catch
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                            Logger_AddLogMessage(string.Format("QueryLogin::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }
                                        if (!CheckVersionFormat(sAppVersion))
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                            Logger_AddLogMessage(string.Format("QueryLogin::Error: Invalid app version format: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }

                                        string sCheckVersionFrom = ConfigurationManager.AppSettings["CheckVersionFrom_" + oMobileOS.ToString()] ?? "";
                                        string sCheckVersionUpdateMandatory = ConfigurationManager.AppSettings["CheckVersionUpdateMandatory_" + oMobileOS.ToString()] ?? "";
                                        string sCheckVersionUpdateNotMandatory = ConfigurationManager.AppSettings["CheckVersionUpdateNotMandatory_" + oMobileOS.ToString()] ?? "";
                                        if (!string.IsNullOrEmpty(sCheckVersionFrom) &&
                                            (!string.IsNullOrEmpty(sCheckVersionUpdateMandatory) || !string.IsNullOrEmpty(sCheckVersionUpdateNotMandatory)))
                                        {
                                            if (VersionGreatherEqual(sAppVersion, sCheckVersionFrom))
                                            {
                                                if (VersionMinor(sAppVersion, sCheckVersionUpdateMandatory))
                                                    rt = ResultType.Result_Error_InvalidAppVersion_UpdateMandatory;
                                                else if (VersionMinor(sAppVersion, sCheckVersionUpdateNotMandatory))
                                                    rt = ResultType.Result_Error_InvalidAppVersion_UpdateNotMandatory;
                                            }
                                        }

                                        if (rt == ResultType.Result_OK || rt == ResultType.Result_Error_InvalidAppVersion_UpdateNotMandatory)
                                        {
                                            ResultType rt2 = StartSession(ref oUser, dInsId.Value, parametersIn, out strSessionID, iUTCOffset, strCulture);
                                            if (rt2 != ResultType.Result_OK)
                                            {
                                                xmlOut = GenerateXMLErrorResult(rt2);
                                                Logger_AddLogMessage(string.Format("QueryLogin::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                return xmlOut;
                                            }
                                        }

                                        parametersOut["r"] = Convert.ToInt32(rt).ToString();

                                        parametersOut["SessionID"] = strSessionID;

                                        string sLicenseTermsVersion = "";
                                        string sLicenseTermsUrl = "";
                                        string sConditionsUrl = "";
                                        parametersOut["legalterms"] = (customersRepository.NeedDisplayLicenseTerms(oUser, strCulture, out sLicenseTermsVersion, out sLicenseTermsUrl, out sConditionsUrl) ? "1" : "0");
                                        parametersOut["legaltermsver"] = sLicenseTermsVersion;
                                        parametersOut["url1"] = sLicenseTermsUrl;
                                        parametersOut["url2"] = sConditionsUrl;

                                        parametersOut["urlmarket"] = ConfigurationManager.AppSettings["UrlMarket_" + oMobileOS.ToString()] ?? "";
                                        parametersOut["urlmarketmsg"] = ConfigurationManager.AppSettings[string.Format("UrlMarketMsg_{0}_{1}_{2}",
                                                                                                                       (rt == ResultType.Result_Error_InvalidAppVersion_UpdateMandatory ? "Mandatory" : "NotMandatory"),
                                                                                                                       oMobileOS.ToString(),
                                                                                                                       strCulture)] ?? "";
                                        if (rt == ResultType.Result_Error_InvalidAppVersion_UpdateMandatory)
                                        {
                                            parametersOut["urlmarketvers"] = sCheckVersionUpdateMandatory ?? "";
                                        }
                                        else if (rt == ResultType.Result_Error_InvalidAppVersion_UpdateNotMandatory)
                                        {
                                            parametersOut["urlmarketvers"] = sCheckVersionUpdateNotMandatory ?? "";
                                        }

                                        parametersOut["OPEUSERID"] = oUser.USR_ID.ToString();
                                        parametersOut["BALCUR"] = oUser.USR_CUR_ID.ToString();

                                        USER_AVERAGE_BALANCE oUserAverageBalance = oUser.USER_AVERAGE_BALANCEs.FirstOrDefault();
                                        if (oUserAverageBalance != null)
                                            parametersOut["BALAVER"] = oUserAverageBalance.USRB_AVERAGE_BALANCE.ToString();

                                        //parametersOut["PAYMODE"] = Convert.ToInt32(ConfigurationManager.AppSettings["TollPaymentMode"] ?? "0");
                                        parametersOut["PAYSTATUS"] = (oUser.USR_BALANCE >= 0 ? 0 : 1);
                                        if (oUser.USR_BALANCE < 0)
                                            parametersOut["PAYBALDUE"] = oUser.USR_BALANCE;

                                        xmlOut = GenerateXMLOuput(parametersOut, new List<string> {"cities", "syncDATA"});

                                        if (xmlOut.Length == 0)
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                            Logger_AddLogMessage(string.Format("QueryLogin::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        }
                                        else
                                        {
                                            Logger_AddLogMessage(string.Format("QueryLogin: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                                        }

                                        oUser = null;
                                    }
                                    else
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_User);
                                        Logger_AddLogMessage(string.Format("QueryLogin::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    }
                                }
                                else
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_User);
                                    Logger_AddLogMessage(string.Format("QueryLogin::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                }

                            }
                            else
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthentication);
                                Logger_AddLogMessage(string.Format("QueryLogin::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                            }
                        }
                    }

                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("QueryLogin::Error: xmlIn={0}, xmlOut={1}", xmlIn,xmlOut), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }
            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e,string.Format("QueryLogin::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

            }



            return xmlOut;
        }




        [WebMethod]
        public string QueryLoginJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("QueryLoginJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = QueryLogin(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;
                Logger_AddLogMessage(string.Format("QueryLoginJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("QueryLoginJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }




        /*
         *  QueryCity
         *  
        <ipark_in>
            <user>455GHP</ user >
            <cityID>125</cityID>
            <cityVERSION>5</cityVERSION>
            <tarVERSION>6</ tarVERSION>* 
            <ah>authentication hash</ah>
        </ ipark _in>
         * 
         * 
        <ipark_out>
	        <r>Result of the method</r>
        <ZoneTar>
        <numzon>2</ numzon >
        <z1 id = “111”> 
        <lit> number of literal </lit>
		        <desc> zone description: “Montreal”,..</desc>
		        <sz1 id = “1111”>
        <lit> number of literal </lit>
			        <desc> “Downtown Montreal: Rotation”,..</desc>
        </sz1>
		        <sz2 id = “1112”>
        <lit> number of literal </lit>
			        <desc> “Periphery Montreal”,..</desc>
        </sz2>
        </z1>

        <z2 id = “112”> 
        <lit> number of literal </lit>
		        <desc> zone description: “Montreal”,..</desc>
        </z2>
        ……
        </ZoneTar >	-- Information with the available tariffs in the city
        <InfoTAR>
        <ad id=”1”>
	        <szs> zones or subzones where the tariff applies: “1111, 2111,…”</szs>
        <sel> tariff can be selected by the user </sel>
	        <lit> number of literal </lit>
	        <desc> tariff description “ROTATION” </desc>
        </ad>
        <ad id=”2”>
        <szs> zone or subzone where the tariff applies: “1112”</szs>
        <sel> tariff can be selected by the user </sel>
	        <lit> number of literal </lit>
	        <desc> tariff description “PERIPHERY” </desc>
        </ad>
        <ad id=”3”>
	        <szs> zone or subzone where the tariff applies: “112”</szs>
        <sel> tariff can be selected by the user </sel>
	        <lit> number of literal </lit>
	        <desc> tariff description “LONG OCCUPANCY” </desc>
        </ad>
        <ad id=”4”>
        <szs> zone or subzone where the tariff applies: “112”</szs>
        <sel> tariff can be selected by the user </sel>
	        <lit> number of literal </lit>
	        <desc> tariff description “RESIDENT” </desc>
        </ad>

        </ InfoTAR >
        <ZoneGIS> format to be defined </ ZoneGIS >	-- Information with the available zones in the city



        </ipark_out>
         * 
         * 
        Result of the method:
            a.	2: Information Retrieved Successfully.
            b.	-9: Error retrieving information. Information Temporary unavailable 
             c.	-19 Invalid Input Parameter 
            d.	-20 Missing Input Parameter 
* 
         *
         */
        [WebMethod]
        public string QueryCity(string xmlIn)
        {
            string xmlOut = "";
            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("QueryCity: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["cityID"] == null))/* ||
                        (parametersIn["cityVERSION"] == null) ||
                        (parametersIn["tarVERSION"] == null))*/
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("QueryCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString,strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("QueryCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {

                            USER oUser = null;
                            decimal? dInsId = null;
                            string strCulture = "";
                            string strAppVersion = "";

                            rt = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("QueryCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            decimal? dInstallationId = null;

                            try
                            {
                                decimal dTryInstallationId = Convert.ToDecimal(parametersIn["cityID"].ToString());
                                dInstallationId = dTryInstallationId;
                            }
                            catch
                            {
                                dInstallationId = null;
                            }

                            string sLicenseTermsVersion = "";
                            try
                            {
                                sLicenseTermsVersion = parametersIn["legaltermsver"].ToString();
                            }
                            catch
                            {
                                sLicenseTermsVersion = "";
                            }

                            INSTALLATION oInstallation = null;
                            DateTime? dtinstDateTime = null;
                            decimal? dLatitude = null;
                            decimal? dLongitude = null;

                            if (!geograficAndTariffsRepository.getInstallation(dInstallationId,
                                                                         dLatitude,
                                                                         dLongitude,
                                                                         ref oInstallation,
                                                                         ref dtinstDateTime))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_City);
                                Logger_AddLogMessage(string.Format("QueryCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            IEnumerable<stZone> zones;
                            string strXmlGroupHierarchy = "";
                            string strXmlOffstreetGroupHierarchy = "";
                            string strXmlGISInfo = "";                            
                            string strXmlOffstreetGISInfo = "";
                            
                            zones = geograficAndTariffsRepository.getInstallationGroupHierarchy(oInstallation.INS_ID, GroupType.OnStreet);
                            ulong ulAppVersion = AppUtilities.AppVersion(strAppVersion);

                            if (!GenerateXMLGroupHierarchy(zones, ulAppVersion, ref strXmlGroupHierarchy, ref strXmlGISInfo))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("QueryCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            zones = geograficAndTariffsRepository.getInstallationGroupHierarchy(oInstallation.INS_ID, GroupType.OffStreet);
                            if (!GenerateXMLGroupHierarchy(zones, ulAppVersion, ref strXmlOffstreetGroupHierarchy, ref strXmlOffstreetGISInfo))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("QueryCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }



                            IEnumerable<stTariff> tariffs;
                            string strXmlTariffs = "";

                            tariffs = geograficAndTariffsRepository.getInstallationTariffs(oInstallation.INS_ID);

                            if (!GenerateXMLTariffs(tariffs, ref strXmlTariffs))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("QueryCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            string strXmlCityOpt = "";
                            if (!GenerateCityOptXML(oInstallation, oUser, ulAppVersion, strCulture, ref strXmlCityOpt))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("QueryCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            if (!string.IsNullOrEmpty(sLicenseTermsVersion))
                            {
                                if (!customersRepository.UpdateUserLicenseTerms(oUser, sLicenseTermsVersion))
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("QueryCity::Error updating user license terms: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                            }

                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();

                            parametersOut["ZoneTar"] = strXmlGroupHierarchy;

                            parametersOut["ZoneTarOffstreet"] = strXmlOffstreetGroupHierarchy;

                            parametersOut["InfoTAR"] = strXmlTariffs;

                            parametersOut["ZoneGIS"] = strXmlGISInfo;

                            parametersOut["ZoneOffstreetGIS"] = strXmlOffstreetGISInfo;

                            parametersOut["CityOpt"] = strXmlCityOpt;

                            decimal? dFavGroupId = null;
                            int iQueryDays = Convert.ToInt32(ConfigurationManager.AppSettings["UserFavouriteGroupQueryDays"] ?? "0");
                            DateTime xBeginDateUTC = DateTime.UtcNow.AddDays(-iQueryDays);
                            DateTime xEndDateUTC = DateTime.UtcNow;
                            customersRepository.GetFavouriteGroupFromUser(ref oUser, dInstallationId, xBeginDateUTC, xEndDateUTC, out dFavGroupId);
                            parametersOut["favzone"] = (dFavGroupId.HasValue ? ((int)dFavGroupId).ToString() : "");

                            xmlOut = GenerateXMLOuput(parametersOut, new List<string> { "ZoneTar", "ZoneTarOffstreet", "InfoTAR", "ZoneGIS", "ZoneOffstreetGIS" });

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("QueryCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                //Logger_AddLogMessage(string.Format("QueryCity: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }

                            oUser = null;                                            
               
                        }
                    }

                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("QueryCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }


            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("QueryCity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

            }

            return xmlOut;
        }

        [WebMethod]
        public string QueryCityJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("QueryCityJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = QueryCity(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                Logger_AddLogMessage(string.Format("QueryCityJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("QueryCityJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }




        /*
         *  QueryRecharge
         *  
        <ipark_in>
            <typeid>0</ typeid >
            <code>1256456485</ code >	-- read code from the QR or Barcode or inserted /    amount of cents to recharge
            <ah>authentication hash</ah>

        </ ipark _in>
         * 
         * 
        <ipark_out>
	       	<r>Result of the method</r>
            <rechargeid>123135486 </ rechargeid >		-- Unique identifier provided from the backoffice associated to the operation
            <newbal> new balance in cens </ newbal >
            <coupval> coup value in cens</ coupval >

        </ipark_out>
         *         
        typeid:
            0 default payment method
	        1 BarCode or QR
	        2 Coupon Number
        <typeid>  == 0 <code>1000</ code >, it means 1000 cens
	    <typeid>  == 1 or 2  <code>1256456485</ code > it means the barcode or the code inserted by the user
         *
        Result of the method:
        a.	2: Operation successful
        b.	-13: Invalid code
        c.	-14: Expired code
        d.	-15: Already Used code

         *
         */
        [WebMethod]
        public string QueryRecharge(string xmlIn)
        {
            string xmlOut = "";
            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("QueryRecharge: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["typeid"] == null))
                       
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("QueryRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString,strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("QueryRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {

                            USER oUser = null;
                            decimal? dInsId = null;
                            string strCulture = "";
                            string strAppVersion = "";
                            rt = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("QueryRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            } 

                            rechargeMethods iTypeId = rechargeMethods.Undefined;
                            try
                            {
                                iTypeId = (rechargeMethods)Convert.ToInt32(parametersIn["typeid"].ToString());
                            }
                            catch
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("QueryRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                           

                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();


                            switch(iTypeId)
                            {
                                case rechargeMethods.Default_Payment_Method:

                                    if ((parametersIn["quantity"] == null)&&(parametersIn["q"] == null))
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                                        Logger_AddLogMessage(string.Format("QueryRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }


                                    int iQuantity = 0;
                                    try
                                    {
                                        if (parametersIn["quantity"] != null)
                                        {
                                            iQuantity = Convert.ToInt32(parametersIn["quantity"].ToString());
                                        }
                                        else if (parametersIn["q"] != null)
                                        {
                                            iQuantity = Convert.ToInt32(parametersIn["q"].ToString());
                                        }
                                    }
                                    catch
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                        Logger_AddLogMessage(string.Format("QueryRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }


                                    if ((oUser.CUSTOMER_PAYMENT_MEAN!=null) &&
                                        (oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_ENABLED == 1) && 
                                        (oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_VALID == 1))
                                    {
                                        /*decimal dVAT = infraestructureRepository.GetVATPerc();

                                        decimal dFeeVal = 0;
                                        decimal dFeePerc = 0;

                                        customersRepository.GetPaymentMeanFees(ref oUser, out dFeeVal, out dFeePerc);                                        
                                        parametersOut["vat"] = dVAT.ToString(CultureInfo.InvariantCulture);
                                        parametersOut["feeval"] = dFeeVal.ToString(CultureInfo.InvariantCulture);
                                        parametersOut["feeper"] = dFeePerc.ToString(CultureInfo.InvariantCulture);*/

                                        int iNewBalance = iQuantity + oUser.USR_BALANCE;
                                        parametersOut["newbal"] = iNewBalance;
                                        
                                        int iQFEE = 0;                                        
                                        int iQFEECC = 0;                                        
                                        int iQVAT = 0;
                                        int iQTotal = 0;                                        
                                        int iQSubTotal = 0;                                        

                                        decimal dVAT1;
                                        decimal dVAT2;
                                        int iPartialVAT1;
                                        decimal dPercFEE;
                                        int iPercFEETopped;
                                        int iPartialPercFEE;
                                        int iFixedFEE;
                                        int iPartialFixedFEE;
                                        int iPartialPercFEEVAT;
                                        int iPartialFixedFEEVAT;

                                        int? iPaymentTypeId = null;
                                        int? iPaymentSubtypeId = null;
                                        if (oUser.CUSTOMER_PAYMENT_MEAN != null)
                                        {
                                            iPaymentTypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAT_ID;
                                            iPaymentSubtypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAST_ID;

                                            if (!customersRepository.GetFinantialParamsPaymentType(oUser, "", iPaymentTypeId.Value, iPaymentSubtypeId.Value, ChargeOperationsType.BalanceRecharge,
                                                                                        out dVAT1, out dVAT2, out dPercFEE, out iPercFEETopped, out iFixedFEE))
                                            {
                                                rt = ResultType.Result_Error_Generic;
                                                Logger_AddLogMessage(string.Format("QueryRecharge::Error: Error getting finantial parameters. Result = {0}", rt.ToString()), LogLevels.logERROR);
                                            }

                                            iQTotal = customersRepository.CalculateFEE(iQuantity, dVAT1, dVAT2, dPercFEE, iPercFEETopped, iFixedFEE,
                                                                                       out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE,
                                                                                       out iPartialPercFEEVAT, out iPartialFixedFEEVAT);
                                            iQFEECC = Convert.ToInt32(Math.Round(iQuantity * dPercFEE, MidpointRounding.AwayFromZero));
                                            if (iPercFEETopped > 0 && iQFEECC > iPercFEETopped) iQFEECC = iPercFEETopped;
                                            iQFEECC += iFixedFEE;
                                        }

                                        if (!customersRepository.GetFinantialParams(oUser, "", iPaymentTypeId, iPaymentSubtypeId, ChargeOperationsType.BalanceRecharge,
                                                                                    out dVAT1, out dVAT2, out dPercFEE, out iPercFEETopped, out iFixedFEE))
                                        {
                                            rt = ResultType.Result_Error_Generic;
                                            Logger_AddLogMessage(string.Format("QueryRecharge::Error: Error getting finantial parameters. Result = {0}", rt.ToString()), LogLevels.logERROR);
                                        }

                                        iQTotal = customersRepository.CalculateFEE(iQuantity, dVAT1, dVAT2, dPercFEE, iPercFEETopped, iFixedFEE,
                                                                                   out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE,
                                                                                   out iPartialPercFEEVAT, out iPartialFixedFEEVAT);
                                        iQFEE = Convert.ToInt32(Math.Round(iQuantity * dPercFEE, MidpointRounding.AwayFromZero));
                                        if (iPercFEETopped > 0 && iQFEE > iPercFEETopped) iQFEE = iPercFEETopped;
                                        iQFEE += iFixedFEE;
                                        iQFEE -= iQFEECC;

                                        iQVAT = iPartialVAT1 + iPartialPercFEEVAT + iPartialFixedFEEVAT;
                                        iQSubTotal = iQuantity + iQFEE;
                                        
                                        parametersOut["layout"] = "0";
                                        OPERATOR oOperator = customersRepository.GetDefaultOperator();
                                        if (oOperator != null) parametersOut["layout"] = oOperator.OPR_FEE_LAYOUT;

                                        parametersOut["IsServFeeToBeAdded"] = (iQFEE != 0 ? "TRUE" : "FALSE");
                                        parametersOut["ServFee"] = iQFEE;
                                        parametersOut["ServFeeLbl"] = infraestructureRepository.GetLiteral(oOperator.OPR_SERVICE_FEE_LIT_ID ?? 0, strCulture);
                                        parametersOut["IsCCFeeToBeAdded"] = (iQFEECC != 0 ? "TRUE" : "FALSE");
                                        parametersOut["CCFee"] = iQFEECC;
                                        parametersOut["CCFeeLbl"] = infraestructureRepository.GetLiteral(oOperator.OPR_SERVICE_FEECC_LIT_ID ?? 0, strCulture);
                                        parametersOut["IsTAXToBeAdded"] = (iQVAT != 0 ? "TRUE" : "FALSE");
                                        parametersOut["TAX"] = iQVAT;
                                        parametersOut["TAXLbl"] = infraestructureRepository.GetLiteral(oOperator.OPR_SERVICE_VAT_LIT_ID ?? 0, strCulture);
                                        parametersOut["Subtotal"] = iQSubTotal;
                                        parametersOut["SubtotalLbl"] = infraestructureRepository.GetLiteral(oOperator.OPR_SERVICE_SUBTOTAL_LIT_ID ?? 0, strCulture);
                                        parametersOut["TOTAL"] = iQTotal;
                                        parametersOut["TOLTALLbl"] = infraestructureRepository.GetLiteral(oOperator.OPR_SERVICE_TOTAL_LIT_ID ?? 0, strCulture);
                                        
                                    }
                                    else                                
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Payment_Mean);
                                        Logger_AddLogMessage(string.Format("QueryRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }


                                    break;

                                case rechargeMethods.Barcode_QR:
                                case rechargeMethods.Coupon:

                                    if ((parametersIn["code"] == null)||
                                        (parametersIn["code"].ToString().Length==0))
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                                        Logger_AddLogMessage(string.Format("QueryRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                                    }


                                    var session = oUser.MOBILE_SESSIONs.Where(r => r.MOSE_SESSIONID == parametersIn["SessionID"].ToString() 
                                                                && r.MOSE_USR_ID == oUser.USR_ID).First();

                                    RECHARGE_COUPON oCoupon=null;

                                    if ((!customersRepository.GetRechargeCouponCode(out oCoupon, parametersIn["code"].ToString()))||
                                        (oCoupon==null))
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Recharge_Code);
                                        Logger_AddLogMessage(string.Format("QueryRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }

                                    switch ((RechargeCouponsStatus)oCoupon.RCOUP_COUPS_ID)
                                    {
                                        case RechargeCouponsStatus.PendingActivation:
                                        case RechargeCouponsStatus.Cancelled:
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Recharge_Code);
                                            Logger_AddLogMessage(string.Format("QueryRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        case RechargeCouponsStatus.Used:
                                        case RechargeCouponsStatus.Locked:
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_AlreadyUsed_Recharge_Code);
                                            Logger_AddLogMessage(string.Format("QueryRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;                                     
                                        case RechargeCouponsStatus.Actived:

                                            DateTime dtCurrentTime = DateTime.Now;
                                            DateTime dtUTCCurrentTime = dtCurrentTime.ToUniversalTime();

                                            if (dtUTCCurrentTime < oCoupon.RCOUP_START_DATE)
                                            {
                                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Recharge_Code);
                                                Logger_AddLogMessage(string.Format("QueryRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                return xmlOut;
                                            }
                                            else if (dtUTCCurrentTime > oCoupon.RCOUP_EXP_DATE)
                                            {
                                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Expired_Recharge_Code);
                                                Logger_AddLogMessage(string.Format("QueryRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                return xmlOut;
                                            }
                                            else
                                            {
                                                string strRechargeID = "";
                                                int iNewBalance = 0;
                                                if (!customersRepository.GetRechargeCouponRechargeID(ref oUser,
                                                    session.MOSE_ID,
                                                    oCoupon.RCOUP_ID,
                                                    out strRechargeID))
                                                {
                                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                                    Logger_AddLogMessage(string.Format("QueryRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                    return xmlOut;
                                                }

                                                parametersOut["rechargeid"] = strRechargeID;

                                                if (oUser.CURRENCy.CUR_ISO_CODE != oCoupon.CURRENCy.CUR_ISO_CODE)
                                                {
                                                    double dConvertedValue = CCurrencyConvertor.ConvertCurrency(Convert.ToDouble(oCoupon.RCOUP_VALUE),
                                                                              oCoupon.CURRENCy.CUR_ISO_CODE,
                                                                              oUser.CURRENCy.CUR_ISO_CODE);
                                                    if (dConvertedValue < 0)
                                                    {
                                                        Logger_AddLogMessage(string.Format("QueryRecharge::Error Converting {0} {1} to {2} ", Convert.ToDouble(oCoupon.RCOUP_VALUE), oCoupon.CURRENCy.CUR_ISO_CODE, oUser.CURRENCy.CUR_ISO_CODE), LogLevels.logERROR);
                                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                                        Logger_AddLogMessage(string.Format("QueryRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                        return xmlOut;
                                                    }

                                                    double dChangeFee = Convert.ToDouble(infraestructureRepository.GetChangeFeePerc()) * dConvertedValue / 100;
                                                    int iCoupval = Convert.ToInt32(dConvertedValue - dChangeFee + 0.5);
                                                    iNewBalance = oUser.USR_BALANCE + iCoupval;

                                                    parametersOut["coupval"] = iCoupval;

                                                }
                                                else
                                                {
                                                    iNewBalance = oUser.USR_BALANCE + Convert.ToInt32(oCoupon.RCOUP_VALUE);
                                                    parametersOut["coupval"] = oCoupon.RCOUP_VALUE;
                                                }

                                                parametersOut["newbal"] = iNewBalance;

                                            }

                                            break;

                                        default:
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                            Logger_AddLogMessage(string.Format("QueryRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;

                                    }


                                    break;

                                default:
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                        Logger_AddLogMessage(string.Format("QueryRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }


                            }
                          
                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("QueryRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("QueryRecharge: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }

                            oUser = null;                           
                        }
                    }

                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("QueryRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }
                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("QueryRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                

            }

            return xmlOut;
        }

        [WebMethod]
        public string QueryRechargeJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("QueryRechargeJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = QueryRecharge(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("QueryRechargeJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("QueryRechargeJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);
                

            }

            return jsonOut;
        }

        /*
         *  ConfirmRecharge
         *  
        <ipark_in>
            <rechargeid>123135486 </ rechargeid >  -- provided in the QueryRecharge method
            <ah>authentication hash</ah>
        </ ipark _in>
         * 
         * 
        <ipark_out>
	      	<r>Result of the method</r>
            <newbal> new balance in cens </ newbal >
            <coupval> coup value en eurocens</ coupval 
        </ipark_out>
         * 
         * 
        Result of the method:
        a.	2: Operation successful
        b.	-13: Invalid code
        c.	-14: Expired code
        d.	-15: Already Used code
       
         *
         */
        [WebMethod]
        public string ConfirmRecharge(string xmlIn)
        {
            string xmlOut = "";
            string strLockDictionaryString = "";
            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("ConfirmRecharge: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) )
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString,strHash);
 
                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {

                            strLockDictionaryString = parametersIn["u"].ToString();
                            if (ExistConfirmLockInformation(strLockDictionaryString))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_ConfirmOperationAlreadyExecuting);
                                Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }
                            else
                            {

                                USER oUser = null;
                                string strAppVersion = "";
                                rt = GetUserData(ref oUser, parametersIn, out strAppVersion);

                                if (rt != ResultType.Result_OK)
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(rt);
                                    Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }

                                decimal? dLatitude = null;
                                decimal? dLongitude = null;
                                GetLatLon(parametersIn, out dLatitude, out dLongitude);

                                parametersOut = new SortedList();
                                parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();

                                var session = oUser.MOBILE_SESSIONs.Where(r => r.MOSE_SESSIONID == parametersIn["SessionID"].ToString()
                                                                  && r.MOSE_USR_ID == oUser.USR_ID).First();

                                int? iRechargeType = null; 
                                if (parametersIn["t"] != null)
                                {
                                    try
                                    {
                                        iRechargeType = Convert.ToInt32(parametersIn["t"]);
                                    }
                                    catch (Exception ex)
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                        Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }
                                }

                                if (!iRechargeType.HasValue)
                                {
                                    if ((parametersIn["rechargeid"] != null) && (parametersIn["rechargeid"].ToString().Length > 0))
                                        iRechargeType = (int)PaymentMeanRechargeType.Coupon; //QR
                                    else if ((parametersIn["PagateliaSessionID"] != null) && (parametersIn["PagateliaSessionID"].ToString().Length > 0))
                                        iRechargeType = (int)PaymentMeanRechargeType.Pagatelia; //Pagatelia
                                    else if ((parametersIn["q"] != null) || (parametersIn["quantity"] != null))
                                        iRechargeType = (int)PaymentMeanRechargeType.Payment;
                                    else
                                    {
                                        DeleteConfirmLockInformation(strLockDictionaryString);
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                                        Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }
                                }
                                else
                                {
                                    if ((iRechargeType.Value == (int)PaymentMeanRechargeType.Payment && parametersIn["q"] == null && parametersIn["quantity"] == null) ||
                                        ((iRechargeType.Value == (int)PaymentMeanRechargeType.Coupon || iRechargeType.Value == (int)PaymentMeanRechargeType.BarCode) && (parametersIn["rechargeid"] == null || parametersIn["rechargeid"].ToString().Length == 0)) ||
                                        (iRechargeType.Value == (int)PaymentMeanRechargeType.Pagatelia && (parametersIn["PagateliaSessionID"] == null || parametersIn["PagateliaSessionID"].ToString().Length == 0)) ||
                                        (iRechargeType.Value == (int)PaymentMeanRechargeType.Spotycoins && parametersIn["q"] == null && parametersIn["quantity"] == null) ||
                                        (iRechargeType.Value == (int)PaymentMeanRechargeType.Paypal && ((string.IsNullOrEmpty((parametersIn["Paypal_id"] ?? "").ToString())) || (string.IsNullOrEmpty((parametersIn["Paypal_authorization_id"] ?? "").ToString())))) ||
                                        (iRechargeType.Value == (int)PaymentMeanRechargeType.Cash && parametersIn["q"] == null && parametersIn["quantity"] == null) ||
                                        (iRechargeType.Value == (int)PaymentMeanRechargeType.Oxxo && ((parametersIn["q"] == null && parametersIn["quantity"] == null) || parametersIn["oxxo_token"] == null || parametersIn["oxxo_ticket"] == null || parametersIn["oxxo_folio"] == null || parametersIn["oxxo_admindate"] == null || parametersIn["oxxo_store"] == null)) ||
                                        (iRechargeType.Value < (int)PaymentMeanRechargeType.Payment || iRechargeType.Value > (int)PaymentMeanRechargeType.Oxxo))
                                    {
                                        DeleteConfirmLockInformation(strLockDictionaryString);
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                                        Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }
                                }

                                if (iRechargeType.Value == (int)PaymentMeanRechargeType.Coupon || iRechargeType.Value == (int)PaymentMeanRechargeType.BarCode) // coupon (QR or barcode)
                                {

                                    RECHARGE_COUPON oCoupon = null;


                                    if ((!customersRepository.GetRechargeCouponFromRechargeID(ref oUser,
                                                                                            session.MOSE_ID,
                                                                                            parametersIn["rechargeid"].ToString(),
                                                                                            out oCoupon)) || (oCoupon == null))
                                    {
                                        DeleteConfirmLockInformation(strLockDictionaryString);
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                        Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }

                                    switch ((RechargeCouponsStatus)oCoupon.RCOUP_COUPS_ID)
                                    {
                                        case RechargeCouponsStatus.PendingActivation:
                                        case RechargeCouponsStatus.Cancelled:
                                            DeleteConfirmLockInformation(strLockDictionaryString);
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Recharge_Code);
                                            Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        case RechargeCouponsStatus.Used:
                                        case RechargeCouponsStatus.Locked:
                                            DeleteConfirmLockInformation(strLockDictionaryString);
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_AlreadyUsed_Recharge_Code);
                                            Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        case RechargeCouponsStatus.Actived:
                                            {

                                                int iCoupVal = Convert.ToInt32(oCoupon.RCOUP_VALUE);


                                                if (oUser.CURRENCy.CUR_ISO_CODE != oCoupon.CURRENCy.CUR_ISO_CODE)
                                                {
                                                    double dConvertedValue = CCurrencyConvertor.ConvertCurrency(Convert.ToDouble(oCoupon.RCOUP_VALUE),
                                                                            oCoupon.CURRENCy.CUR_ISO_CODE,
                                                                            oUser.CURRENCy.CUR_ISO_CODE);
                                                    if (dConvertedValue < 0)
                                                    {
                                                        DeleteConfirmLockInformation(strLockDictionaryString);
                                                        Logger_AddLogMessage(string.Format("ConfirmRecharge::Error Converting {0} {1} to {2} ", Convert.ToDouble(oCoupon.RCOUP_VALUE), oCoupon.CURRENCy.CUR_ISO_CODE, oUser.CURRENCy.CUR_ISO_CODE), LogLevels.logERROR);
                                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                                        Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                        return xmlOut;
                                                    }

                                                    double dChangeFee = Convert.ToDouble(infraestructureRepository.GetChangeFeePerc()) * dConvertedValue / 100;


                                                    iCoupVal = Convert.ToInt32(dConvertedValue - dChangeFee + 0.5);

                                                }


                                                if (!customersRepository.RechargeUserBalanceWithCoupon(ref oUser,
                                                                                        session.MOSE_OS.Value,
                                                                                        iCoupVal,
                                                                                        oUser.CURRENCy.CUR_ID,
                                                                                        parametersIn["rechargeid"].ToString(),
                                                                                        ref oCoupon,
                                                                                        dLatitude, dLongitude, strAppVersion))
                                                {
                                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                                    Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                    return xmlOut;
                                                }


                                                parametersOut["newbal"] = oUser.USR_BALANCE;

                                                break;
                                            }

                                        default:
                                            DeleteConfirmLockInformation(strLockDictionaryString);
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                            Logger_AddLogMessage(string.Format("QueryRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;

                                    }

                                }
                                else if (iRechargeType.Value == (int)PaymentMeanRechargeType.Pagatelia) // Pagatelia
                                {
                                    int iQuantity = 0;
                                    try
                                    {

                                        if (parametersIn["q"] != null)
                                        {
                                            iQuantity = Convert.ToInt32(parametersIn["q"].ToString());
                                        }
                                        else if (parametersIn["quantity"] != null)
                                        {
                                            iQuantity = Convert.ToInt32(parametersIn["quantity"].ToString());
                                        }
                                    }
                                    catch
                                    {
                                        DeleteConfirmLockInformation(strLockDictionaryString);
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                        Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }

                                    // External ws 3rdPAGConfirmRecharge
                                    decimal? dPagateliaNewBalance;
                                    ThirdPartyPagatelia oThirdPartyPagatelia = new ThirdPartyPagatelia();

                                    rt = oThirdPartyPagatelia.ConfirmRecharge(oUser.USR_PAGATELIA_LAST_USER, parametersIn["PagateliaSessionID"].ToString(),  Convert.ToDecimal(iQuantity) / 100, dLatitude, dLongitude, Convert.ToInt32(session.MOSE_ID).ToString(), out dPagateliaNewBalance);
                                    if (rt != ResultType.Result_OK)
                                    {
                                        xmlOut = GenerateXMLErrorResult(rt);
                                        Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }

                                    int? iPagateliaNewBalance = null;
                                    if (dPagateliaNewBalance.HasValue) iPagateliaNewBalance = Convert.ToInt32(Math.Round(dPagateliaNewBalance.Value * 100, MidpointRounding.AwayFromZero));

                                    if (!customersRepository.RechargeUserBalanceWithPagatelia(ref oUser,
                                                                            session.MOSE_OS.Value,
                                                                            iQuantity,
                                                                            oUser.CURRENCy.CUR_ID,
                                                                            parametersIn["PagateliaSessionID"].ToString(),
                                                                            iPagateliaNewBalance,
                                                                            dLatitude, dLongitude, strAppVersion))
                                    {
                                        DeleteConfirmLockInformation(strLockDictionaryString);
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                        Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }

                                    parametersOut["newbal"] = oUser.USR_BALANCE;

                                    if (iPagateliaNewBalance.HasValue) parametersOut["new_pagatelia_balance"] = iPagateliaNewBalance;

                                }
                                else if (iRechargeType.Value == (int)PaymentMeanRechargeType.Spotycoins) // Spotycoins
                                {                                    
                                    int iQuantity = 0;
                                    try
                                    {

                                        if (parametersIn["q"] != null)
                                        {
                                            iQuantity = Convert.ToInt32(parametersIn["q"].ToString());
                                        }
                                        else if (parametersIn["quantity"] != null)
                                        {
                                            iQuantity = Convert.ToInt32(parametersIn["quantity"].ToString());
                                        }
                                    }
                                    catch
                                    {
                                        DeleteConfirmLockInformation(strLockDictionaryString);
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                        Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }

                                    if (!customersRepository.RechargeUserBalanceWithSpotycoins(ref oUser,
                                                                            session.MOSE_OS.Value,
                                                                            iQuantity,
                                                                            oUser.CURRENCy.CUR_ID,
                                                                            dLatitude, dLongitude, strAppVersion))
                                    {
                                        DeleteConfirmLockInformation(strLockDictionaryString);
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                        Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }

                                    parametersOut["newbal"] = oUser.USR_BALANCE;

                                }
                                else if (iRechargeType.Value == (int)PaymentMeanRechargeType.Paypal) 
                                {
                                    int iQuantity = 0;
                                    try
                                    {

                                        if (parametersIn["q"] != null)
                                        {
                                            iQuantity = Convert.ToInt32(parametersIn["q"].ToString());
                                        }
                                        else if (parametersIn["quantity"] != null)
                                        {
                                            iQuantity = Convert.ToInt32(parametersIn["quantity"].ToString());
                                        }
                                    }
                                    catch
                                    {
                                        DeleteConfirmLockInformation(strLockDictionaryString);
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                        Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }

                                    decimal? dRechargeId = null;

                                    rt = PerformPaypalRecharge(ref oUser, session.MOSE_OS.Value, iQuantity, dLatitude, dLongitude, strAppVersion,
                                                             PaymentMeanRechargeCreationType.pmrctRegularRecharge, 
                                                             parametersIn["Paypal_id"].ToString(),
                                                             parametersIn["Paypal_authorization_id"].ToString(),
                                                             parametersIn["Paypal_create_time"].ToString(),
                                                             parametersIn["Paypal_intent"].ToString(),
                                                             parametersIn["Paypal_state"].ToString(),                                                                                                                          
                                                             out dRechargeId);
                                    if (rt != ResultType.Result_OK)
                                    {
                                        DeleteConfirmLockInformation(strLockDictionaryString);
                                        xmlOut = GenerateXMLErrorResult(rt);
                                        Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }
                                    try
                                    {
                                        if (dRechargeId != null)
                                        {
                                            CUSTOMER_PAYMENT_MEANS_RECHARGE oRecharge = null;
                                            if (customersRepository.GetRechargeData(ref oUser, dRechargeId.Value, out oRecharge))
                                            {
                                                if ((PaymentSuscryptionType)oRecharge.CUSPMR_SUSCRIPTION_TYPE == PaymentSuscryptionType.pstPrepay)
                                                {
                                                    string culture = oUser.USR_CULTURE_LANG;
                                                    CultureInfo ci = new CultureInfo(culture);
                                                    Thread.CurrentThread.CurrentUICulture = ci;
                                                    Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(ci.Name);

                                                    iQuantity = oRecharge.CUSPMR_AMOUNT;
                                                    decimal dPercVAT1 = oRecharge.CUSPMR_PERC_VAT1 ?? 0;
                                                    decimal dPercVAT2 = oRecharge.CUSPMR_PERC_VAT2 ?? 0;
                                                    decimal dPercFEE = oRecharge.CUSPMR_PERC_FEE ?? 0;
                                                    int iPercFEETopped = (int)(oRecharge.CUSPMR_PERC_FEE_TOPPED ?? 0);
                                                    int iFixedFEE = (int)(oRecharge.CUSPMR_FIXED_FEE ?? 0);

                                                    int iPartialVAT1;
                                                    int iPartialPercFEE;
                                                    int iPartialFixedFEE;
                                                    int iPartialPercFEEVAT;
                                                    int iPartialFixedFEEVAT;

                                                    int iTotalQuantity = customersRepository.CalculateFEE(iQuantity, dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE, out iPartialPercFEEVAT, out iPartialFixedFEEVAT);

                                                    int iQFEE = Convert.ToInt32(Math.Round(iQuantity * dPercFEE, MidpointRounding.AwayFromZero));
                                                    if (iPercFEETopped > 0 && iQFEE > iPercFEETopped) iQFEE = iPercFEETopped;
                                                    iQFEE += iFixedFEE;
                                                    int iQVAT = iPartialVAT1 + iPartialPercFEEVAT + iPartialFixedFEEVAT;
                                                    int iQSubTotal = iQuantity + iQFEE;

                                                    int iLayout = 0;
                                                    if (iQFEE != 0 || iQVAT != 0)
                                                    {
                                                        OPERATOR oOperator = customersRepository.GetDefaultOperator();
                                                        if (oOperator != null) iLayout = oOperator.OPR_FEE_LAYOUT;
                                                    }


                                                    string sLayoutSubtotal = "";
                                                    string sLayoutTotal = "";

                                                    string sCurIsoCode = infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oRecharge.CUSPMR_CUR_ID));

                                                    if (iLayout == 2)
                                                    {
                                                        sLayoutSubtotal = string.Format(ResourceExtension.GetLiteral("Email_LayoutSubtotal"),
                                                                                        string.Format("{0:0.00} {1}", Convert.ToDouble(iQSubTotal) / 100, sCurIsoCode),
                                                                                        (oRecharge.CUSPMR_PERC_VAT1 != 0 ? string.Format("{0:0.00}% ", oRecharge.CUSPMR_PERC_VAT1 * 100) : "") +
                                                                                        (oRecharge.CUSPMR_PERC_VAT2 != 0 && oRecharge.CUSPMR_PERC_VAT1 != oRecharge.CUSPMR_PERC_VAT2 ? string.Format("{0:0.00}%", oRecharge.CUSPMR_PERC_VAT2 * 100) : ""),
                                                                                        string.Format("{0:0.00} {1}", Convert.ToDouble(iQVAT) / 100, sCurIsoCode));
                                                    }
                                                    else if (iLayout == 1)
                                                    {
                                                        sLayoutTotal = string.Format(ResourceExtension.GetLiteral("Email_LayoutTotal"),
                                                                                     string.Format("{0:0.00} {1}", Convert.ToDouble(iQuantity) / 100, sCurIsoCode),
                                                                                     string.Format("{0:0.00} {1}", Convert.ToDouble(iQFEE) / 100, sCurIsoCode),
                                                                                     (oRecharge.CUSPMR_PERC_VAT1 != 0 ? string.Format("{0:0.00}% ", oRecharge.CUSPMR_PERC_VAT1 * 100) : "") +
                                                                                     (oRecharge.CUSPMR_PERC_VAT2 != 0 && oRecharge.CUSPMR_PERC_VAT1 != oRecharge.CUSPMR_PERC_VAT2 ? string.Format("{0:0.00}%", oRecharge.CUSPMR_PERC_VAT2 * 100) : ""),
                                                                                     string.Format("{0:0.00} {1}", Convert.ToDouble(iQVAT) / 100, sCurIsoCode));
                                                    }

                                                    string strRechargeEmailSubject = ResourceExtension.GetLiteral("ConfirmNoAutomaticRecharge_EmailHeader");
                                                    /*
                                                        ID: {0}<br>
                                                     *  Fecha de recarga: {1:HH:mm:ss dd/MM/yyyy}<br>
                                                     *  Cantidad Recargada: {2} 
                                                     */
                                                    string strRechargeEmailBody = string.Format(ResourceExtension.GetLiteral("ConfirmRecharge_EmailBody"),
                                                        oRecharge.CUSPMR_ID,
                                                        oRecharge.CUSPMR_DATE,
                                                        string.Format("{0:0.00} {1}", Convert.ToDouble(oRecharge.CUSPMR_TOTAL_AMOUNT_CHARGED) / 100,
                                                                                      infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oRecharge.CUSPMR_CUR_ID))),
                                                        string.Format("{0:0.00} {1}", Convert.ToDouble(oUser.USR_BALANCE) / 100,
                                                                            infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID))),
                                                        ConfigurationManager.AppSettings["EmailSignatureURL"],
                                                        ConfigurationManager.AppSettings["EmailSignatureGraphic"],
                                                        sLayoutSubtotal, sLayoutTotal,
                                                        GetEmailFooter(ref oUser));


                                                    SendEmail(ref oUser, strRechargeEmailSubject, strRechargeEmailBody);

                                                }
                                            }
                                        }
                                    }
                                    catch { }

                                    parametersOut["newbal"] = oUser.USR_BALANCE;

                                }
                                else if (iRechargeType.Value == (int)PaymentMeanRechargeType.Cash) // Cash
                                {
                                    int iQuantity = 0;                                    
                                    try
                                    {

                                        if (parametersIn["q"] != null)
                                        {
                                            iQuantity = Convert.ToInt32(parametersIn["q"].ToString());
                                        }
                                        else if (parametersIn["quantity"] != null)
                                        {
                                            iQuantity = Convert.ToInt32(parametersIn["quantity"].ToString());
                                        }
                                    }
                                    catch
                                    {
                                        DeleteConfirmLockInformation(strLockDictionaryString);
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                        Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }

                                    decimal? dInstallationId = null;
                                    INSTALLATION oInstallation = null;
                                    try
                                    {
                                        decimal dTryInstallationId = Convert.ToDecimal(parametersIn["cityID"].ToString());
                                        dInstallationId = dTryInstallationId;
                                    }
                                    catch
                                    {
                                        dInstallationId = null;
                                    }
                                    if (dInstallationId.HasValue)
                                    {
                                        DateTime? dtinstDateTime = null;
                                        decimal? dInsLatitude = null;
                                        decimal? dInsLongitude = null;

                                        if (!geograficAndTariffsRepository.getInstallation(dInstallationId,
                                                                                           dInsLatitude,
                                                                                           dInsLongitude,
                                                                                           ref oInstallation,
                                                                                           ref dtinstDateTime))
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_City);
                                            Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }
                                    }
                                    else
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_City);
                                        Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }

                                    decimal? dFinanDistOperatorId = null;
                                    FINAN_DIST_OPERATOR oFinanDistOperator = null;
                                    try
                                    {
                                        decimal dTryOperatorId = Convert.ToDecimal(parametersIn["operatorID"].ToString());
                                        dFinanDistOperatorId = dTryOperatorId;
                                    }
                                    catch
                                    {
                                        dFinanDistOperatorId = null;
                                    }
                                    if (dFinanDistOperatorId.HasValue)
                                    {
                                        if (!geograficAndTariffsRepository.GetFinanDistOperator(dFinanDistOperatorId.Value,
                                                                                                ref oFinanDistOperator))
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                            Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }
                                    }
                                    else
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                        Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }

                                    string sBackOfficeUsr = null;
                                    try
                                    {
                                        sBackOfficeUsr = parametersIn["backofficeUsr"].ToString();
                                    }
                                    catch (Exception ex) { }


                                    string sBackOfficeUsrEmail = "";
                                    try
                                    {
                                        sBackOfficeUsrEmail = parametersIn["backofficeUsrEmail"].ToString();
                                    }
                                    catch (Exception ex) { }


                                    decimal? dRechargeId = null;

                                    rt = PerformCashRecharge(ref oUser, session.MOSE_OS.Value, iQuantity, dLatitude, dLongitude, strAppVersion, 
                                                             PaymentMeanRechargeCreationType.pmrctRegularRecharge, dInstallationId, dFinanDistOperatorId, sBackOfficeUsr, out dRechargeId);
                                    if (rt != ResultType.Result_OK)
                                    {
                                        DeleteConfirmLockInformation(strLockDictionaryString);
                                        xmlOut = GenerateXMLErrorResult(rt);
                                        Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }
                                    try
                                    {
                                        if (dRechargeId != null)
                                        {                                            
                                            CUSTOMER_PAYMENT_MEANS_RECHARGE oRecharge = null;
                                            if (customersRepository.GetRechargeData(ref oUser, dRechargeId.Value, out oRecharge))
                                            {
                                                if ((PaymentSuscryptionType)oRecharge.CUSPMR_SUSCRIPTION_TYPE == PaymentSuscryptionType.pstPrepay)
                                                {
                                                    string culture = oUser.USR_CULTURE_LANG;
                                                    CultureInfo ci = new CultureInfo(culture);
                                                    Thread.CurrentThread.CurrentUICulture = ci;
                                                    Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(ci.Name);

                                                    iQuantity = oRecharge.CUSPMR_AMOUNT;
                                                    decimal dPercVAT1 = oRecharge.CUSPMR_PERC_VAT1 ?? 0;
                                                    decimal dPercVAT2 = oRecharge.CUSPMR_PERC_VAT2 ?? 0;
                                                    decimal dPercFEE = oRecharge.CUSPMR_PERC_FEE ?? 0;
                                                    int iPercFEETopped = (int)(oRecharge.CUSPMR_PERC_FEE_TOPPED ?? 0);
                                                    int iFixedFEE = (int)(oRecharge.CUSPMR_FIXED_FEE ?? 0);

                                                    int iPartialVAT1;
                                                    int iPartialPercFEE;
                                                    int iPartialFixedFEE;
                                                    int iPartialPercFEEVAT;
                                                    int iPartialFixedFEEVAT;

                                                    int iTotalQuantity = customersRepository.CalculateFEE(iQuantity, dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE, out iPartialPercFEEVAT, out iPartialFixedFEEVAT);

                                                    int iQFEE = Convert.ToInt32(Math.Round(iQuantity * dPercFEE, MidpointRounding.AwayFromZero));
                                                    if (iPercFEETopped > 0 && iQFEE > iPercFEETopped) iQFEE = iPercFEETopped;
                                                    iQFEE += iFixedFEE;
                                                    int iQVAT = iPartialVAT1 + iPartialPercFEEVAT + iPartialFixedFEEVAT;
                                                    int iQSubTotal = iQuantity + iQFEE;

                                                    int iLayout = 0;
                                                    if (iQFEE != 0 || iQVAT != 0)
                                                    {
                                                        OPERATOR oOperator = customersRepository.GetDefaultOperator();
                                                        if (oOperator != null) iLayout = oOperator.OPR_FEE_LAYOUT;
                                                    }


                                                    string sLayoutSubtotal = "";
                                                    string sLayoutTotal = "";

                                                    string sCurIsoCode = infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oRecharge.CUSPMR_CUR_ID));

                                                    if (iLayout == 2)
                                                    {
                                                        sLayoutSubtotal = string.Format(ResourceExtension.GetLiteral("Email_LayoutSubtotal"),
                                                                                        string.Format("{0:0.00} {1}", Convert.ToDouble(iQSubTotal) / 100, sCurIsoCode),
                                                                                        (oRecharge.CUSPMR_PERC_VAT1 != 0 ? string.Format("{0:0.00}% ", oRecharge.CUSPMR_PERC_VAT1 * 100) : "") +
                                                                                        (oRecharge.CUSPMR_PERC_VAT2 != 0 && oRecharge.CUSPMR_PERC_VAT1 != oRecharge.CUSPMR_PERC_VAT2 ? string.Format("{0:0.00}%", oRecharge.CUSPMR_PERC_VAT2 * 100) : ""),
                                                                                        string.Format("{0:0.00} {1}", Convert.ToDouble(iQVAT) / 100, sCurIsoCode));
                                                    }
                                                    else if (iLayout == 1)
                                                    {
                                                        sLayoutTotal = string.Format(ResourceExtension.GetLiteral("Email_LayoutTotal"),
                                                                                     string.Format("{0:0.00} {1}", Convert.ToDouble(iQuantity) / 100, sCurIsoCode),
                                                                                     string.Format("{0:0.00} {1}", Convert.ToDouble(iQFEE) / 100, sCurIsoCode),
                                                                                     (oRecharge.CUSPMR_PERC_VAT1 != 0 ? string.Format("{0:0.00}% ", oRecharge.CUSPMR_PERC_VAT1 * 100) : "") +
                                                                                     (oRecharge.CUSPMR_PERC_VAT2 != 0 && oRecharge.CUSPMR_PERC_VAT1 != oRecharge.CUSPMR_PERC_VAT2 ? string.Format("{0:0.00}%", oRecharge.CUSPMR_PERC_VAT2 * 100) : ""),
                                                                                     string.Format("{0:0.00} {1}", Convert.ToDouble(iQVAT) / 100, sCurIsoCode));
                                                    }

                                                    string strRechargeEmailSubject = ResourceExtension.GetLiteral("ConfirmNoAutomaticRecharge_EmailHeader");
                                                    /*
                                                        ID: {0}<br>
                                                     *  Fecha de recarga: {1:HH:mm:ss dd/MM/yyyy}<br>
                                                     *  Cantidad Recargada: {2} 
                                                     */
                                                    string strRechargeEmailBody = string.Format(ResourceExtension.GetLiteral("ConfirmRecharge_EmailBody"),
                                                        oRecharge.CUSPMR_ID,
                                                        oRecharge.CUSPMR_DATE,
                                                        string.Format("{0:0.00} {1}", Convert.ToDouble(oRecharge.CUSPMR_TOTAL_AMOUNT_CHARGED) / 100,
                                                                                      infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oRecharge.CUSPMR_CUR_ID))),
                                                        string.Format("{0:0.00} {1}", Convert.ToDouble(oUser.USR_BALANCE) / 100,
                                                                            infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID))),
                                                        ConfigurationManager.AppSettings["EmailSignatureURL"],
                                                        ConfigurationManager.AppSettings["EmailSignatureGraphic"],
                                                        sLayoutSubtotal, sLayoutTotal,
                                                        GetEmailFooter(ref oUser));


                                                    SendEmail(ref oUser, strRechargeEmailSubject, strRechargeEmailBody);

                                                    Logger_AddLogMessage(string.Format("ConfirmRecharge::Error:sBackOfficeUsrEmail={0}", sBackOfficeUsrEmail), LogLevels.logINFO);

                                                    if (!string.IsNullOrEmpty(sBackOfficeUsrEmail))
                                                    {
                                                        infraestructureRepository.SendEmailTo(sBackOfficeUsrEmail, string.Format("{0} -> ({1})",strRechargeEmailSubject, oUser.USR_EMAIL), strRechargeEmailBody);
                                                    }

                                                    

                                                }
                                            }
                                        }
                                    }
                                    catch { }

                                    parametersOut["newbal"] = oUser.USR_BALANCE;

                                }
                                else if (iRechargeType.Value == (int)PaymentMeanRechargeType.Oxxo) // OXXO
                                {
                                    int iQuantity = 0;
                                    try
                                    {

                                        if (parametersIn["q"] != null)
                                        {
                                            iQuantity = Convert.ToInt32(parametersIn["q"].ToString());
                                        }
                                        else if (parametersIn["quantity"] != null)
                                        {
                                            iQuantity = Convert.ToInt32(parametersIn["quantity"].ToString());
                                        }
                                    }
                                    catch
                                    {
                                        DeleteConfirmLockInformation(strLockDictionaryString);
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                        Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }

                                    string sOxxoToken = parametersIn["oxxo_token"].ToString();
                                    int? iOxxoCashMachine = null;
                                    if (parametersIn["oxxo_cashmachine"] != null) 
                                    {
                                        iOxxoCashMachine = Convert.ToInt32(parametersIn["oxxo_cashmachine"].ToString());
                                    }
                                    string sOxxoEntryMode = null;
                                    if (parametersIn["oxxo_entrymode"] != null) 
                                        sOxxoEntryMode = parametersIn["oxxo_entrymode"].ToString();

                                    decimal dOxxoTicket = 0;
                                    try
                                    {
                                        dOxxoTicket = Convert.ToDecimal(parametersIn["oxxo_ticket"].ToString());
                                    }
                                    catch
                                    {
                                        DeleteConfirmLockInformation(strLockDictionaryString);
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                        Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }

                                    decimal dOxxoFolio = 0;
                                    try
                                    {
                                        dOxxoFolio = Convert.ToDecimal(parametersIn["oxxo_folio"].ToString());
                                    }
                                    catch
                                    {
                                        DeleteConfirmLockInformation(strLockDictionaryString);
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                        Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }

                                    DateTime dtOxxoAdminDate;
                                    try
                                    {
                                        dtOxxoAdminDate = DateTime.ParseExact(parametersIn["oxxo_admindate"].ToString(), "yyyyMMdd", CultureInfo.InvariantCulture);
                                    }
                                    catch
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                        Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;

                                    }

                                    string sOxxoStore = parametersIn["oxxo_store"].ToString();
                                    string sOxxoPartial = "T";
                                    if (parametersIn["oxxo_partial"] != null)
                                        sOxxoPartial = parametersIn["oxxo_partial"].ToString();

                                    decimal? dRechargeId = null;

                                    rt = PerformOxxoRecharge(ref oUser, session.MOSE_OS.Value, iQuantity, dLatitude, dLongitude, strAppVersion,
                                                             PaymentMeanRechargeCreationType.pmrctRegularRecharge, sOxxoToken, iOxxoCashMachine, sOxxoEntryMode, dOxxoTicket, dOxxoFolio, dtOxxoAdminDate, sOxxoStore, sOxxoPartial, out dRechargeId);
                                    if (rt != ResultType.Result_OK)
                                    {
                                        DeleteConfirmLockInformation(strLockDictionaryString);
                                        xmlOut = GenerateXMLErrorResult(rt);
                                        Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }
                                    try
                                    {
                                        if (dRechargeId != null)
                                        {
                                            CUSTOMER_PAYMENT_MEANS_RECHARGE oRecharge = null;
                                            if (customersRepository.GetRechargeData(ref oUser, dRechargeId.Value, out oRecharge))
                                            {
                                                if ((PaymentSuscryptionType)oRecharge.CUSPMR_SUSCRIPTION_TYPE == PaymentSuscryptionType.pstPrepay)
                                                {
                                                    string culture = oUser.USR_CULTURE_LANG;
                                                    CultureInfo ci = new CultureInfo(culture);
                                                    Thread.CurrentThread.CurrentUICulture = ci;
                                                    Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(ci.Name);

                                                    iQuantity = oRecharge.CUSPMR_AMOUNT;
                                                    decimal dPercVAT1 = oRecharge.CUSPMR_PERC_VAT1 ?? 0;
                                                    decimal dPercVAT2 = oRecharge.CUSPMR_PERC_VAT2 ?? 0;
                                                    decimal dPercFEE = oRecharge.CUSPMR_PERC_FEE ?? 0;
                                                    int iPercFEETopped = (int)(oRecharge.CUSPMR_PERC_FEE_TOPPED ?? 0);
                                                    int iFixedFEE = (int)(oRecharge.CUSPMR_FIXED_FEE ?? 0);

                                                    int iPartialVAT1;
                                                    int iPartialPercFEE;
                                                    int iPartialFixedFEE;
                                                    int iPartialPercFEEVAT;
                                                    int iPartialFixedFEEVAT;

                                                    int iTotalQuantity = customersRepository.CalculateFEE(iQuantity, dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE, out iPartialPercFEEVAT, out iPartialFixedFEEVAT);

                                                    int iQFEE = Convert.ToInt32(Math.Round(iQuantity * dPercFEE, MidpointRounding.AwayFromZero));
                                                    if (iPercFEETopped > 0 && iQFEE > iPercFEETopped) iQFEE = iPercFEETopped;
                                                    iQFEE += iFixedFEE;
                                                    int iQVAT = iPartialVAT1 + iPartialPercFEEVAT + iPartialFixedFEEVAT;
                                                    int iQSubTotal = iQuantity + iQFEE;

                                                    int iLayout = 0;
                                                    if (iQFEE != 0 || iQVAT != 0)
                                                    {
                                                        OPERATOR oOperator = customersRepository.GetDefaultOperator();
                                                        if (oOperator != null) iLayout = oOperator.OPR_FEE_LAYOUT;
                                                    }


                                                    string sLayoutSubtotal = "";
                                                    string sLayoutTotal = "";

                                                    string sCurIsoCode = infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oRecharge.CUSPMR_CUR_ID));

                                                    if (iLayout == 2)
                                                    {
                                                        sLayoutSubtotal = string.Format(ResourceExtension.GetLiteral("Email_LayoutSubtotal"),
                                                                                        string.Format("{0:0.00} {1}", Convert.ToDouble(iQSubTotal) / 100, sCurIsoCode),
                                                                                        (oRecharge.CUSPMR_PERC_VAT1 != 0 ? string.Format("{0:0.00}% ", oRecharge.CUSPMR_PERC_VAT1 * 100) : "") +
                                                                                        (oRecharge.CUSPMR_PERC_VAT2 != 0 && oRecharge.CUSPMR_PERC_VAT1 != oRecharge.CUSPMR_PERC_VAT2 ? string.Format("{0:0.00}%", oRecharge.CUSPMR_PERC_VAT2 * 100) : ""),
                                                                                        string.Format("{0:0.00} {1}", Convert.ToDouble(iQVAT) / 100, sCurIsoCode));
                                                    }
                                                    else if (iLayout == 1)
                                                    {
                                                        sLayoutTotal = string.Format(ResourceExtension.GetLiteral("Email_LayoutTotal"),
                                                                                     string.Format("{0:0.00} {1}", Convert.ToDouble(iQuantity) / 100, sCurIsoCode),
                                                                                     string.Format("{0:0.00} {1}", Convert.ToDouble(iQFEE) / 100, sCurIsoCode),
                                                                                     (oRecharge.CUSPMR_PERC_VAT1 != 0 ? string.Format("{0:0.00}% ", oRecharge.CUSPMR_PERC_VAT1 * 100) : "") +
                                                                                     (oRecharge.CUSPMR_PERC_VAT2 != 0 && oRecharge.CUSPMR_PERC_VAT1 != oRecharge.CUSPMR_PERC_VAT2 ? string.Format("{0:0.00}%", oRecharge.CUSPMR_PERC_VAT2 * 100) : ""),
                                                                                     string.Format("{0:0.00} {1}", Convert.ToDouble(iQVAT) / 100, sCurIsoCode));
                                                    }

                                                    string strRechargeEmailSubject = ResourceExtension.GetLiteral("ConfirmNoAutomaticRecharge_EmailHeader");
                                                    /*
                                                        ID: {0}<br>
                                                     *  Fecha de recarga: {1:HH:mm:ss dd/MM/yyyy}<br>
                                                     *  Cantidad Recargada: {2} 
                                                     */
                                                    string strRechargeEmailBody = string.Format(ResourceExtension.GetLiteral("ConfirmRecharge_EmailBody"),
                                                        oRecharge.CUSPMR_ID,
                                                        oRecharge.CUSPMR_DATE,
                                                        string.Format("{0:0.00} {1}", Convert.ToDouble(oRecharge.CUSPMR_TOTAL_AMOUNT_CHARGED) / 100,
                                                                                      infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oRecharge.CUSPMR_CUR_ID))),
                                                        string.Format("{0:0.00} {1}", Convert.ToDouble(oUser.USR_BALANCE) / 100,
                                                                            infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID))),
                                                        ConfigurationManager.AppSettings["EmailSignatureURL"],
                                                        ConfigurationManager.AppSettings["EmailSignatureGraphic"],
                                                        sLayoutSubtotal, sLayoutTotal,
                                                        GetEmailFooter(ref oUser));


                                                    SendEmail(ref oUser, strRechargeEmailSubject, strRechargeEmailBody);

                                                }
                                            }
                                        }
                                    }
                                    catch { }

                                    parametersOut["newbal"] = oUser.USR_BALANCE;
                                    if (dRechargeId.HasValue) parametersOut["rechargeId"] = dRechargeId.Value;

                                }
                                else if (iRechargeType.Value == (int)PaymentMeanRechargeType.Payment)
                                {

                                    int iQuantity = 0;
                                    try
                                    {

                                        if (parametersIn["q"] != null)
                                        {
                                            iQuantity = Convert.ToInt32(parametersIn["q"].ToString());
                                        }
                                        else if (parametersIn["quantity"] != null)
                                        {
                                            iQuantity = Convert.ToInt32(parametersIn["quantity"].ToString());
                                        }
                                    }
                                    catch
                                    {
                                        DeleteConfirmLockInformation(strLockDictionaryString);
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                        Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }

                                    decimal? dRechargeId = null;

                                    rt = PerformPrepayRecharge(ref oUser, session.MOSE_OS.Value, false, iQuantity, false, dLatitude, dLongitude, strAppVersion, 
                                                                PaymentMeanRechargeCreationType.pmrctRegularRecharge,out dRechargeId);

                                    if (rt != ResultType.Result_OK)
                                    {
                                        DeleteConfirmLockInformation(strLockDictionaryString);
                                        xmlOut = GenerateXMLErrorResult(rt);
                                        Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }

                                    try
                                    {
                                        if (dRechargeId != null)
                                        {
                                            customersRepository.ConfirmRecharge(ref oUser, dRechargeId.Value);

                                            CUSTOMER_PAYMENT_MEANS_RECHARGE oRecharge = null;
                                            if (customersRepository.GetRechargeData(ref oUser, dRechargeId.Value, out oRecharge))
                                            {
                                                if ((PaymentSuscryptionType)oRecharge.CUSPMR_SUSCRIPTION_TYPE == PaymentSuscryptionType.pstPrepay)
                                                {
                                                    string culture = oUser.USR_CULTURE_LANG;
                                                    CultureInfo ci = new CultureInfo(culture);
                                                    Thread.CurrentThread.CurrentUICulture = ci;
                                                    Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(ci.Name);

                                                    iQuantity = oRecharge.CUSPMR_AMOUNT;
                                                    decimal dPercVAT1 = oRecharge.CUSPMR_PERC_VAT1 ?? 0;
                                                    decimal dPercVAT2 = oRecharge.CUSPMR_PERC_VAT2 ?? 0;
                                                    decimal dPercFEE = oRecharge.CUSPMR_PERC_FEE ?? 0;
                                                    int iPercFEETopped = (int)(oRecharge.CUSPMR_PERC_FEE_TOPPED ?? 0);
                                                    int iFixedFEE = (int)(oRecharge.CUSPMR_FIXED_FEE ?? 0);

                                                    int iPartialVAT1;
                                                    int iPartialPercFEE;
                                                    int iPartialFixedFEE;
                                                    int iPartialPercFEEVAT;
                                                    int iPartialFixedFEEVAT;

                                                    int iTotalQuantity = customersRepository.CalculateFEE(iQuantity, dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE, out iPartialPercFEEVAT, out iPartialFixedFEEVAT);

                                                    int iQFEE = Convert.ToInt32(Math.Round(iQuantity * dPercFEE, MidpointRounding.AwayFromZero));
                                                    if (iPercFEETopped > 0 && iQFEE > iPercFEETopped) iQFEE = iPercFEETopped;
                                                    iQFEE += iFixedFEE;
                                                    int iQVAT = iPartialVAT1 + iPartialPercFEEVAT + iPartialFixedFEEVAT;
                                                    int iQSubTotal = iQuantity + iQFEE;

                                                    int iLayout = 0;
                                                    if (iQFEE != 0 || iQVAT != 0)
                                                    {
                                                        OPERATOR oOperator = customersRepository.GetDefaultOperator();
                                                        if (oOperator != null) iLayout = oOperator.OPR_FEE_LAYOUT;
                                                    }


                                                    string sLayoutSubtotal = "";
                                                    string sLayoutTotal = "";

                                                    string sCurIsoCode = infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oRecharge.CUSPMR_CUR_ID));

                                                    if (iLayout == 2)
                                                    {
                                                        sLayoutSubtotal = string.Format(ResourceExtension.GetLiteral("Email_LayoutSubtotal"),
                                                                                        string.Format("{0:0.00} {1}", Convert.ToDouble(iQSubTotal) / 100, sCurIsoCode),
                                                                                        (oRecharge.CUSPMR_PERC_VAT1 != 0 ? string.Format("{0:0.00}% ", oRecharge.CUSPMR_PERC_VAT1 * 100) : "") +
                                                                                        (oRecharge.CUSPMR_PERC_VAT2 != 0 && oRecharge.CUSPMR_PERC_VAT1 != oRecharge.CUSPMR_PERC_VAT2 ? string.Format("{0:0.00}%", oRecharge.CUSPMR_PERC_VAT2 * 100) : ""),
                                                                                        string.Format("{0:0.00} {1}", Convert.ToDouble(iQVAT) / 100, sCurIsoCode));
                                                    }
                                                    else if (iLayout == 1)
                                                    {
                                                        sLayoutTotal = string.Format(ResourceExtension.GetLiteral("Email_LayoutTotal"),
                                                                                     string.Format("{0:0.00} {1}", Convert.ToDouble(iQuantity) / 100, sCurIsoCode),
                                                                                     string.Format("{0:0.00} {1}", Convert.ToDouble(iQFEE) / 100, sCurIsoCode),
                                                                                     (oRecharge.CUSPMR_PERC_VAT1 != 0 ? string.Format("{0:0.00}% ", oRecharge.CUSPMR_PERC_VAT1 * 100) : "") +
                                                                                     (oRecharge.CUSPMR_PERC_VAT2 != 0 && oRecharge.CUSPMR_PERC_VAT1 != oRecharge.CUSPMR_PERC_VAT2 ? string.Format("{0:0.00}%", oRecharge.CUSPMR_PERC_VAT2 * 100) : ""),
                                                                                     string.Format("{0:0.00} {1}", Convert.ToDouble(iQVAT) / 100, sCurIsoCode));
                                                    }

                                                    string strRechargeEmailSubject = ResourceExtension.GetLiteral("ConfirmNoAutomaticRecharge_EmailHeader");
                                                    /*
                                                        ID: {0}<br>
                                                     *  Fecha de recarga: {1:HH:mm:ss dd/MM/yyyy}<br>
                                                     *  Cantidad Recargada: {2} 
                                                     */
                                                    string strRechargeEmailBody = string.Format(ResourceExtension.GetLiteral("ConfirmRecharge_EmailBody"),
                                                        oRecharge.CUSPMR_ID,
                                                        oRecharge.CUSPMR_DATE,
                                                        string.Format("{0:0.00} {1}", Convert.ToDouble(oRecharge.CUSPMR_TOTAL_AMOUNT_CHARGED) / 100,
                                                                                      infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oRecharge.CUSPMR_CUR_ID))),
                                                        string.Format("{0:0.00} {1}", Convert.ToDouble(oUser.USR_BALANCE) / 100,
                                                                            infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID))),
                                                        ConfigurationManager.AppSettings["EmailSignatureURL"],
                                                        ConfigurationManager.AppSettings["EmailSignatureGraphic"],
                                                        sLayoutSubtotal, sLayoutTotal,
                                                        GetEmailFooter(ref oUser));


                                                    SendEmail(ref oUser, strRechargeEmailSubject, strRechargeEmailBody);

                                                }
                                            }
                                        }
                                    }
                                    catch { }


                                    parametersOut["newbal"] = oUser.USR_BALANCE;


                                    //We try to modify the automatic recharge data

                                    try
                                    {
                                        if (parametersIn["autrech"] != null)
                                        {
                                            int iMobileSetting = Convert.ToInt32(parametersIn["autrech"].ToString());

                                            if (oUser.CUSTOMER_PAYMENT_MEAN != null)
                                            {
                                                int iAutoAmountBelow = -1;
                                                int iAutoAmountToRecharge = -1;
                                                parametersOut["autrech"] = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AUTOMATIC_RECHARGE;

                                                try
                                                {
                                                    iAutoAmountToRecharge = Convert.ToInt32(parametersIn["autamo"].ToString());
                                                }
                                                catch
                                                {

                                                }

                                                try
                                                {
                                                    iAutoAmountBelow = Convert.ToInt32(parametersIn["autbelow"].ToString());
                                                }
                                                catch
                                                {

                                                }

                                                if ((oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_ENABLED == 1) && (oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_VALID == 1))
                                                {
                                                    if ((PaymentMeanType)oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAT_ID == PaymentMeanType.pmtDebitCreditCard)
                                                    {
                                                        if ((oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AUTOMATIC_RECHARGE == 1) &&
                                                            (oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AUTOMATIC_RECHARGE == iMobileSetting))
                                                        {
                                                            //we need to check if the quantities are correct

                                                            if ((iAutoAmountBelow != -1) && (iAutoAmountToRecharge != -1) &&
                                                                ((oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AMOUNT_TO_RECHARGE != iAutoAmountToRecharge) ||
                                                                    (oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_RECHARGE_WHEN_AMOUNT_IS_LESS != iAutoAmountBelow)))
                                                            {
                                                                //Change quantities
                                                                customersRepository.UpdateUserPaymentMean(ref oUser, iMobileSetting, iAutoAmountToRecharge, iAutoAmountBelow, "");
                                                                parametersOut["autrech"] = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AUTOMATIC_RECHARGE;
                                                            }
                                                        }
                                                        else if ((oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AUTOMATIC_RECHARGE == 0) &&
                                                            (oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AUTOMATIC_RECHARGE == iMobileSetting))
                                                        {
                                                            //Nothing to do
                                                            parametersOut["autrech"] = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AUTOMATIC_RECHARGE;
                                                        }
                                                        else if ((oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AUTOMATIC_RECHARGE == 1) &&
                                                            (oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AUTOMATIC_RECHARGE != iMobileSetting))
                                                        {
                                                            //Need to reset automatic recharge
                                                            customersRepository.UpdateUserPaymentMean(ref oUser, iMobileSetting, null, null, "");
                                                            parametersOut["autrech"] = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AUTOMATIC_RECHARGE;

                                                        }
                                                        else if ((oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AUTOMATIC_RECHARGE == 0) &&
                                                            (oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AUTOMATIC_RECHARGE != iMobileSetting))
                                                        {
                                                            //Need to set automatic recharge with the quantities
                                                            if ((iAutoAmountBelow != -1) && (iAutoAmountToRecharge != -1))
                                                            {
                                                                //Change quantities
                                                                customersRepository.UpdateUserPaymentMean(ref oUser, iMobileSetting, iAutoAmountToRecharge, iAutoAmountBelow, "");
                                                                parametersOut["autrech"] = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AUTOMATIC_RECHARGE;

                                                            }

                                                        }

                                                    }
                                                    else if ((PaymentMeanType)oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAT_ID == PaymentMeanType.pmtPaypal)
                                                    { //Is Paypal so change is not pos. 
                                                        //only we allow the change of quantities when automatic mode is on

                                                        if ((oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AUTOMATIC_RECHARGE == 1) &&
                                                            (oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AUTOMATIC_RECHARGE == iMobileSetting))
                                                        {
                                                            //we need to check if the quantities are correct

                                                            if ((iAutoAmountBelow != -1) && (iAutoAmountToRecharge != -1) &&
                                                                ((oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AMOUNT_TO_RECHARGE != iAutoAmountToRecharge) ||
                                                                    (oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_RECHARGE_WHEN_AMOUNT_IS_LESS != iAutoAmountBelow)))
                                                            {
                                                                //Change quantities
                                                                customersRepository.UpdateUserPaymentMean(ref oUser, iMobileSetting, iAutoAmountToRecharge, iAutoAmountBelow,
                                                                    oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_TOKEN_PAYPAL_ID);
                                                                parametersOut["autrech"] = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AUTOMATIC_RECHARGE;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        parametersOut["autrech"] = -1;
                                                    }
                                                }
                                                else
                                                { //Payment mean not enabled or not valid
                                                    parametersOut["autrech"] = -1;
                                                }
                                            }
                                            else
                                            { //There is not payment assigned
                                                parametersOut["autrech"] = -1;
                                            }
                                        }
                                    }
                                    catch (Exception e)
                                    {
                                        Logger_AddLogException(e, string.Format("ConfirmRecharge::Error managing autorecharge fields"), LogLevels.logERROR);
                                    }



                                }
                                else
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }

                                xmlOut = GenerateXMLOuput(parametersOut);

                                if (xmlOut.Length == 0)
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                }
                                else
                                {
                                    Logger_AddLogMessage(string.Format("ConfirmRecharge: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                                }

                                oUser = null;
                            }
                        }
                    }

                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }
                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }


            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                

            }

            DeleteConfirmLockInformation(strLockDictionaryString);
            return xmlOut;
        }

        [WebMethod]
        public string ConfirmRechargeJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("ConfirmRechargeJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = ConfirmRecharge(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("ConfirmRechargeJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("ConfirmRechargeJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);


            }

            return jsonOut;
        }



        [WebMethod]
        public string TransferBalance(string xmlIn)
        {
            string xmlOut = "";
            string strLockDictionaryString = "";
            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("TransferBalance: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["pass"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["emailrecipient"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("TransferBalance::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("TransferBalance::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {

                            strLockDictionaryString = parametersIn["u"].ToString();
                            if (ExistConfirmLockInformation(strLockDictionaryString))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_ConfirmOperationAlreadyExecuting);
                                Logger_AddLogMessage(string.Format("TransferBalance::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }
                            else
                            {
                                int iQuantity;
                                try
                                {
                                    iQuantity = Int32.Parse(parametersIn["amountrecipient"].ToString(), CultureInfo.InvariantCulture);
                                }
                                catch
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("TransferBalance::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;

                                }

                                USER oSrcUser = null;
                                string strAppVersion = "";
                                rt = GetUserData(ref oSrcUser, parametersIn, out strAppVersion);

                                if (rt != ResultType.Result_OK)
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(rt);
                                    Logger_AddLogMessage(string.Format("TransferBalance::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                                
                                rt = ResultType.Result_Error_InvalidAuthentication;
                                string currentPassword = "";                                
                                if (FormAuthMemberShip.MembershipService.GetPassword(oSrcUser.USR_USERNAME, ref currentPassword))
                                {
                                    if (currentPassword == parametersIn["pass"].ToString())
                                        rt = ResultType.Result_OK;
                                }
                                if (rt != ResultType.Result_OK)
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(rt);
                                    Logger_AddLogMessage(string.Format("TransferBalance::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }

                                if (oSrcUser.USR_EMAIL.ToLower() == parametersIn["emailrecipient"].ToString().ToLower())
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidUserReceiverEmail);
                                    Logger_AddLogMessage(string.Format("TransferBalance::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }

                                USER oDstUser = null;
                                if (!customersRepository.GetUserDataByEmail(ref oDstUser, parametersIn["emailrecipient"].ToString()))
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidUserReceiverEmail);
                                    Logger_AddLogMessage(string.Format("TransferBalance::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }

                                parametersOut = new SortedList();
                                parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();

                                int iCurrencyDstQuantity = 0;
                                decimal dTransferID = -1;
                                int? iBalanceAfterRecharge = null;
                                DateTime? dtUTCInsertionDate = null;

                                var session = oSrcUser.MOBILE_SESSIONs.Where(r => r.MOSE_SESSIONID == parametersIn["SessionID"].ToString()
                                                                                  && r.MOSE_USR_ID == oSrcUser.USR_ID).First();

                                double dChangeToApply = 1.0;

                                if (oSrcUser.CURRENCy.CUR_ISO_CODE != oDstUser.CURRENCy.CUR_ISO_CODE)
                                {
                                    dChangeToApply = GetChangeToApplyFromUserCurToUserCur(oSrcUser, oDstUser);
                                    if (dChangeToApply < 0)
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                        Logger_AddLogMessage(string.Format("TransferBalance::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }
                                }

                                rt = PerformTransferBalance(dChangeToApply, iQuantity, ref oSrcUser, ref oDstUser, session.MOSE_OS.Value, session.MOSE_ID, strAppVersion,                             
                                                            ref parametersOut,
                                                            out iCurrencyDstQuantity, out dTransferID, out dtUTCInsertionDate, out iBalanceAfterRecharge);

                                if (rt != ResultType.Result_OK)
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(rt);
                                    Logger_AddLogMessage(string.Format("TransferBalance::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                                
                                parametersOut["newbal"] = oSrcUser.USR_BALANCE;


                                xmlOut = GenerateXMLOuput(parametersOut);

                                if (xmlOut.Length == 0)
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("TransferBalance::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                }
                                else
                                {
                                    Logger_AddLogMessage(string.Format("TransferBalance: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                                }

                                oSrcUser = null;
                                oDstUser = null;
                            }
                        }
                    }

                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("TransferBalance::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }
                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }


            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("TransferBalance::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            DeleteConfirmLockInformation(strLockDictionaryString);
            return xmlOut;
        }


        [WebMethod]
        public string TransferBalanceJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("TransferBalanceJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = TransferBalance(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("TransferBalanceJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("TransferBalanceJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);


            }

            return jsonOut;
        }


        //[WebMethod]
        public int ManualRecharge(string strUser, int iQuantity)
        {
            ResultType rt = ResultType.Result_OK;
            try
            {
                Logger_AddLogMessage(string.Format("ManualRecharge::Request: user={0}, quantity={1}", strUser, iQuantity), LogLevels.logINFO);

                USER oUser = null;
                if (customersRepository.GetUserData(ref oUser, strUser))
                {

                    decimal? dRechargeId = null;
                    rt = PerformPrepayRecharge(ref oUser, (int)MobileOS.Web, false, iQuantity, true, null, null, "", 
                                                PaymentMeanRechargeCreationType.pmrctRegularRecharge,out dRechargeId);

                    if (rt != ResultType.Result_OK)
                    {
                        Logger_AddLogMessage(string.Format("ManualRecharge::Error: user={0}, quantity={1}, rt={2}", strUser, iQuantity, rt), LogLevels.logERROR);
                        return (int)rt;
                    }

                    Logger_AddLogMessage(string.Format("ManualRecharge::OK: user={0}, quantity={1}", strUser, iQuantity), LogLevels.logINFO);

                    try
                    {
                        if (dRechargeId != null)
                        {
                            CUSTOMER_PAYMENT_MEANS_RECHARGE oRecharge = null;
                            if (customersRepository.GetRechargeData(ref oUser, dRechargeId.Value, out oRecharge))
                            {
                                if ((PaymentSuscryptionType)oRecharge.CUSPMR_SUSCRIPTION_TYPE == PaymentSuscryptionType.pstPrepay)
                                {
                                    string culture = oUser.USR_CULTURE_LANG;
                                    CultureInfo ci = new CultureInfo(culture);
                                    Thread.CurrentThread.CurrentUICulture = ci;
                                    Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(ci.Name);

                                    iQuantity = oRecharge.CUSPMR_AMOUNT;
                                    decimal dPercVAT1 = oRecharge.CUSPMR_PERC_VAT1 ?? 0;
                                    decimal dPercVAT2 = oRecharge.CUSPMR_PERC_VAT2 ?? 0;
                                    decimal dPercFEE = oRecharge.CUSPMR_PERC_FEE ?? 0;
                                    int iPercFEETopped = (int)(oRecharge.CUSPMR_PERC_FEE_TOPPED ?? 0);
                                    int iFixedFEE = (int)(oRecharge.CUSPMR_FIXED_FEE ?? 0);

                                    int iPartialVAT1;
                                    int iPartialPercFEE;
                                    int iPartialFixedFEE;
                                    int iPartialPercFEEVAT;
                                    int iPartialFixedFEEVAT;

                                    int iTotalQuantity = customersRepository.CalculateFEE(iQuantity, dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE, out iPartialPercFEEVAT, out iPartialFixedFEEVAT);

                                    int iQFEE = Convert.ToInt32(Math.Round(iQuantity * dPercFEE, MidpointRounding.AwayFromZero));
                                    if (iPercFEETopped > 0 && iQFEE > iPercFEETopped) iQFEE = iPercFEETopped;
                                    iQFEE += iFixedFEE;
                                    int iQVAT = iPartialVAT1 + iPartialPercFEEVAT + iPartialFixedFEEVAT;
                                    int iQSubTotal = iQuantity + iQFEE;

                                    int iLayout = 0;
                                    if (iQFEE != 0 || iQVAT != 0)
                                    {
                                        OPERATOR oOperator = customersRepository.GetDefaultOperator();
                                        if (oOperator != null) iLayout = oOperator.OPR_FEE_LAYOUT;
                                    }


                                    string sLayoutSubtotal = "";
                                    string sLayoutTotal = "";

                                    string sCurIsoCode = infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oRecharge.CUSPMR_CUR_ID));

                                    if (iLayout == 2)
                                    {
                                        sLayoutSubtotal = string.Format(ResourceExtension.GetLiteral("Email_LayoutSubtotal"),
                                                                        string.Format("{0:0.00} {1}", Convert.ToDouble(iQSubTotal) / 100, sCurIsoCode),
                                                                        (oRecharge.CUSPMR_PERC_VAT1 != 0 ? string.Format("{0:0.00}% ", oRecharge.CUSPMR_PERC_VAT1 * 100) : "") +
                                                                        (oRecharge.CUSPMR_PERC_VAT2 != 0 && oRecharge.CUSPMR_PERC_VAT1 != oRecharge.CUSPMR_PERC_VAT2 ? string.Format("{0:0.00}%", oRecharge.CUSPMR_PERC_VAT2 * 100) : ""),
                                                                        string.Format("{0:0.00} {1}", Convert.ToDouble(iQVAT) / 100, sCurIsoCode));
                                    }
                                    else if (iLayout == 1)
                                    {
                                        sLayoutTotal = string.Format(ResourceExtension.GetLiteral("Email_LayoutTotal"),
                                                                        string.Format("{0:0.00} {1}", Convert.ToDouble(iQuantity) / 100, sCurIsoCode),
                                                                        string.Format("{0:0.00} {1}", Convert.ToDouble(iQFEE) / 100, sCurIsoCode),
                                                                        (oRecharge.CUSPMR_PERC_VAT1 != 0 ? string.Format("{0:0.00}% ", oRecharge.CUSPMR_PERC_VAT1 * 100) : "") +
                                                                        (oRecharge.CUSPMR_PERC_VAT2 != 0 && oRecharge.CUSPMR_PERC_VAT1 != oRecharge.CUSPMR_PERC_VAT2 ? string.Format("{0:0.00}%", oRecharge.CUSPMR_PERC_VAT2 * 100) : ""),
                                                                        string.Format("{0:0.00} {1}", Convert.ToDouble(iQVAT) / 100, sCurIsoCode));
                                    }

                                    string strRechargeEmailSubject = ResourceExtension.GetLiteral("ConfirmNoAutomaticRecharge_EmailHeader");
                                    /*
                                        ID: {0}<br>
                                        *  Fecha de recarga: {1:HH:mm:ss dd/MM/yyyy}<br>
                                        *  Cantidad Recargada: {2} 
                                        */
                                    string strRechargeEmailBody = string.Format(ResourceExtension.GetLiteral("ConfirmRecharge_EmailBody"),
                                        oRecharge.CUSPMR_ID,
                                        oRecharge.CUSPMR_DATE,
                                        string.Format("{0:0.00} {1}", Convert.ToDouble(oRecharge.CUSPMR_TOTAL_AMOUNT_CHARGED) / 100,
                                                                        infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oRecharge.CUSPMR_CUR_ID))),
                                        string.Format("{0:0.00} {1}", Convert.ToDouble(oUser.USR_BALANCE) / 100,
                                                            infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID))),
                                        ConfigurationManager.AppSettings["EmailSignatureURL"],
                                        ConfigurationManager.AppSettings["EmailSignatureGraphic"],
                                        sLayoutSubtotal, sLayoutTotal,
                                        GetEmailFooter(ref oUser));


                                    SendEmail(ref oUser, strRechargeEmailSubject, strRechargeEmailBody);
                                    Logger_AddLogMessage(string.Format("ManualRecharge::Mail Sent: user={0}, quantity={1}", strUser, iQuantity), LogLevels.logINFO);


                                }
                            }
                        }
                    }
                    catch { }
                }
                oUser = null;
                            

            }
            catch (Exception e)
            {
                rt = ResultType.Result_Error_Generic;
                Logger_AddLogException(e, string.Format("ManualRecharge::Error: user={0}, quantity={1}", strUser, iQuantity), LogLevels.logERROR);
            }

            return (int)rt;
        
        }



        /*
         *  QueryParkingTariffs
         *  
        <ipark_in>
            <u>user login or generated user id for anonymous operations</u>
            <p>plate</p>
            <d>date in format hh24missddMMYY</d>
            <g>parking sector</g>
            <ah>authentication hash</ah>
        </ ipark _in>
         * 
         * 
        <ipark_out>
	      <r>Result of the method</r>
                <ltar> list of tariffs
                    <ad id=”1>
                        <sel> tariff can be selected by the user </sel>
	                    <lit> number of literal </lit>
	                    <desc> tariff description (all day), morning </desc>
                    </ad>
                    <ad id=”2”>
                        <sel> tariff can be selected by the user </sel>
	                    <lit> number of literal </lit>
	                    <desc> tariff description (all day), morning </desc>
                    </ad>
                </ ltar >
        </ipark_out>
         * 
         * 
        Result of the method:
        a.	1: List of tariffs returned.
        b.	-1: Invalid authentication hash
        c.	-19: Tariffs not available
        d.	-9: Generic Error (for example database or execution error.)       
         *
         */
        [WebMethod]
        public string QueryParkingTariffs(string xmlIn)
        {
            string xmlOut = "";
            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("QueryParkingTariffs: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["p"] == null) ||
                        (parametersIn["d"] == null) ||
                        (parametersIn["g"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("QueryParkingTariffs::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString,strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("QueryParkingTariffs::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {


                            USER oUser = null;
                            string strAppVersion = "";
                            rt = GetUserData(ref oUser, parametersIn, out strAppVersion);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("QueryParkingTariffs::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            ulong ulAppVersion = AppUtilities.AppVersion(strAppVersion);
                            decimal? dLatitude = null;
                            decimal? dLongitude = null;

                            NumberFormatInfo numberFormatProvider = new NumberFormatInfo();
                            numberFormatProvider.NumberDecimalSeparator = ".";

                            string sValue = "";

                            try
                            {
                                sValue = parametersIn["gps_lat"].ToString();
                                if (sValue.IndexOf(",") > 0) numberFormatProvider.NumberDecimalSeparator = ",";                                
                                decimal dTryLatitude = Convert.ToDecimal(parametersIn["gps_lat"].ToString(), numberFormatProvider);
                                dLatitude = dTryLatitude;
                            }
                            catch
                            {
                                dLatitude = null;
                            }

                            try
                            {
                                sValue = parametersIn["gps_long"].ToString();
                                if (sValue.IndexOf(",") > 0) numberFormatProvider.NumberDecimalSeparator = ",";
                                decimal dTryLongitude = Convert.ToDecimal(parametersIn["gps_long"].ToString(), numberFormatProvider);
                                dLongitude = dTryLongitude;
                            }
                            catch
                            {
                                dLongitude = null;
                            }

                            string strPlate = NormalizePlate(parametersIn["p"].ToString());

                            if (strPlate.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("QueryParkingTariffs::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;

                            }


                            string strPlateSharing = infraestructureRepository.GetParameterValue("PlateSharing");
                            bool bPlateSharing = true;

                            if (!string.IsNullOrEmpty(strPlateSharing))
                            {
                                bPlateSharing = (strPlateSharing != "0");
                            }

                            if (!customersRepository.IsPlateOfUser(ref oUser, strPlate))
                            {
                                if (bPlateSharing || !customersRepository.IsPlateAssignedToAnotherUser(ref oUser, strPlate))
                                {
                                    if (!customersRepository.AddPlateToUser(ref oUser, strPlate))
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                        Logger_AddLogMessage(string.Format("QueryParkingTariffs::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }
                                }
                                else
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Plate_Is_Assigned_To_Another_User);
                                    Logger_AddLogMessage(string.Format("QueryParkingTariffs::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;

                                }
                            }


                            decimal? dGroupId = null;
                            GROUP oGroup = null;
                            DateTime? dtgroupDateTime = null;

                            try
                            {
                                decimal dTryGroupId = Convert.ToDecimal(parametersIn["g"].ToString());
                                dGroupId = dTryGroupId;
                            }
                            catch
                            {
                                dGroupId = null;
                            }


                            if (!geograficAndTariffsRepository.getGroup(dGroupId,
                                                                        ref oGroup,
                                                                        ref dtgroupDateTime))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("QueryParkingTariffs::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            IEnumerable<stTariff> tariffs;
                            string strXmlTariffs = "";

                            tariffs = geograficAndTariffsRepository.getPlateTariffsInGroup(strPlate,oGroup.GRP_ID, dLatitude, dLongitude);

                            if (tariffs.Count()==0)
                            {

                                tariffs = geograficAndTariffsRepository.getGroupTariffs(oGroup.GRP_ID, dLatitude, dLongitude);
                            
                                if (tariffs.Count() == 0)
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Tariffs_Not_Available);
                                    Logger_AddLogMessage(string.Format("QueryParkingTariffs::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;

                                }
                            }

                            if (!GenerateXMLTariffs(tariffs, ref strXmlTariffs))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("QueryParkingTariffs::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }  

                           

                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();
                            parametersOut["ltar"] = strXmlTariffs;



                            /*if (parametersIn["g"].ToString() == "3")
                            {
                                parametersOut["ltar"] = "<ad>" +
                                                        "<id>1</id>" +
                                                        "<szs><sz>3</sz></szs>" +
                                                        "<sel>0</sel>" +
                                                        "<lit>5</lit>" +
                                                        "<desc>High Rotation tariff</desc>" +
                                                        "</ad>";


                            }
                            else if (parametersIn["g"].ToString() == "4")
                            {
                                parametersOut["ltar"] = "<ad>" +
                                                        "<id>2</id>" +
                                                        "<szs><sz>4</sz></szs>" +
                                                        "<sel>0</sel>" +
                                                        "<lit>6</lit>" +
                                                        "<desc>Long Duration tariff</desc>" +
                                                        "</ad>";



                            }
                            else if (parametersIn["g"].ToString() == "2")
                            {
                                parametersOut["ltar"] = "<ad>" +
                                                        "<id>2</id>" +
                                                        "<szs><sz>2</sz></szs>" +
                                                        "<sel>1</sel>" +
                                                        "<lit>6</lit>" +
                                                        "<desc>Long Duration tariff</desc>" +
                                                        "</ad>" +
                                                        "<ad>" +
                                                        "<id>3</id>" +
                                                        "<szs><sz>2</sz></szs>" +
                                                        "<sel>1</sel>" +
                                                        "<lit>7</lit>" +
                                                        "<desc>Resident tariff</desc>" +
                                                        "</ad>";



                            }*/





                            xmlOut = GenerateXMLOuput(parametersOut, new List<string> {"ltar"});

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("QueryParkingTariffs::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("QueryParkingTariffs: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }

                            oUser = null;

                        }
                    }

                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("QueryParkingTariffs::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }
                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("QueryParkingTariffs::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                

            }

            return xmlOut;
        }

        [WebMethod]
        public string QueryParkingTariffsJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("QueryParkingTariffsJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = QueryParkingTariffs(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("QueryParkingTariffsJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("QueryParkingTariffsJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);
                

            }

            return jsonOut;
        }

        /*
         *  QueryParkingOperationWithTimeSteps
         *  
        <ipark_in>
            <u>user login or generated user id for anonymous operations</u>
            <p>plate</p>
            <d>date in format hh24missddMMYY</d>
            <g>parking sector</g>
            <ad>tariff type selected: NULL, ROTATION, RESIDENTS, VIPS</ad>
         * -- Cell Phne OS Version
            <ah>authentication hash</ah>
        </ ipark _in>
         * 
         * 
        <ipark_out>
            <r>Result of the method</r>
            <ad>tariff type to apply: in Bilbao for example: 4 (ROTATION), 5 (RESIDENTS), 6 VIPS</ad>
            <q1>minimum amount to pay in Cents</q1>
            <q2>maximum amount to pay in Cents</q2>
            <t1>minimum amount of time to park in minutes</q1>
            <t2> minimum amount of time to park in minutes </q2>
            <di>Initial date (in format hh24missddMMYY) of the parking: the same as the input date if the operation is a first parking, or the date of the end of parking operations chain if the operation is an extension</di>

            <steps> list of tariff steps starting in the minimum and finishing in maximum
	            The difference in time between steps will be a parameter. I.e. 5 minutes.
	            <step id=”1”>
		            <t>=minimum time (t1)</t>
		            <q>=minimum quantity(q1)</q>
		            <d>=<di>+<t>(resulting tariff date)</d>
	            </step>
	            <step id=”2”>
		            <t>t1+5 minutes</t>
		            <q>cost of time given in cents </q>
                    <d>=<di>+<t>(resulting tariff date)</d>
	            </step>

		            ….


	            <step id=”n”>
		            <t>=maximum time (t2)</t>
		            <q>=maximum quantity(q2)</q>
		            <d>=<di>+<t>(resulting tariff date)</d>
	            </step>
            </steps>
            <o>Operation Type: 1: First parking: 2: extension</o>
            <aq>Amount of Cents accumulated in the current parking chain (first parking plus all the extensions) linked to the current operation</aq>
            <at> Amount of minutes accumulated in the current parking chain (first parking plus all the extensions) linked to the current operation </at>
        </ipark_out>
         * 
         * 
        Result of the method:
        a.	1: Parking of extension is possible and the restrictions come after this tag.
        b.	-1: Invalid authentication hash
        c.	-2: The plate has used the maximum amount of time/money in the sector, so the extension is not possible. In Bilbao this depends on the colour of the zone and the tariff type.
        d.	-3: The plate has not waited enough to return to the current sector.
        e.	-9: Generic Error (for example database or execution error.)
       
         *
         */
        [WebMethod]
        public string QueryParkingOperationWithTimeSteps(string xmlIn)
        {
            string xmlOut = "";
            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("QueryParkingOperationWithTimeSteps: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["p"] == null) ||
                        (parametersIn["d"] == null) ||
                        (parametersIn["g"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("QueryParkingOperationWithTimeSteps::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString,strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("QueryParkingOperationWithTimeSteps::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {

                            DateTime dt;
                            try
                            {
                                dt = DateTime.ParseExact(parametersIn["d"].ToString(), "HHmmssddMMyy",
                                  CultureInfo.InvariantCulture);
                            }
                            catch
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("QueryParkingOperationWithTimeSteps::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;

                            }


                            decimal? dGroupId = null;

                            try
                            {
                                decimal dTryGroupId = Convert.ToDecimal(parametersIn["g"].ToString());
                                dGroupId = dTryGroupId;
                            }
                            catch
                            {
                                dGroupId = null;
                            }

                            GROUP oGroup = null;
                            DateTime? dtinstDateTime = null;


                            if (!geograficAndTariffsRepository.getGroup(dGroupId,
                                                                        ref oGroup,
                                                                        ref dtinstDateTime))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("QueryParkingOperationWithTimeSteps::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            TARIFF oTariff = null;
                            TARIFFS_IN_GROUP oTariffInGroup = null;
                            if (parametersIn["ad"] != null)
                            {
                                int iTariff=Convert.ToInt32(parametersIn["ad"]);
                                try
                                {
                                    oTariffInGroup = oGroup.TARIFFS_IN_GROUPs.Where(r => r.TARGR_TAR_ID == iTariff).First();
                                    oTariff = oTariffInGroup.TARIFF;
                                }
                                catch
                                {
                                    
                                    foreach (GROUPS_TYPES_ASSIGNATION oAssigns in oGroup.GROUPS_TYPES_ASSIGNATIONs)
                                    {
                                        try
                                        {
                                            oTariffInGroup = oAssigns.GROUPS_TYPE.TARIFFS_IN_GROUPs.Where(r => r.TARGR_TAR_ID == iTariff).First();
                                            oTariff = oTariffInGroup.TARIFF;
                                            break;
                                        }
                                        catch { }
                                    }

                                    if (oTariff == null)
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                        Logger_AddLogMessage(string.Format("QueryParkingOperationWithTimeSteps::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }
                                        
                                }

                            }

                            STREET_SECTION oStreetSection = null;
                            if (parametersIn["strse"] != null)
                            {
                                int iStreetSection = Convert.ToInt32(parametersIn["strse"]);
                                try
                                {
                                    oStreetSection = oGroup.STREET_SECTIONs.Where(r => r.STRSE_DELETED == 0 && r.STRSE_ID == iStreetSection).First();
                                }
                                catch
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("QueryParkingOperationWithTimeSteps::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;

                                }

                            }

                            string strPlate = NormalizePlate(parametersIn["p"].ToString());

                            if (strPlate.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("QueryParkingOperationWithTimeSteps::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;

                            }

                            USER oUser = null;
                            decimal? dInsId = null;
                            string strCulture = "";
                            string strAppVersion = "";
                            
                            rt = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion);



                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("QueryParkingOperationWithTimeSteps::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }


                            ulong ulAppVersion = AppUtilities.AppVersion(strAppVersion);                          


                            string strPlateSharing = infraestructureRepository.GetParameterValue("PlateSharing");
                            bool bPlateSharing = true;

                            if (!string.IsNullOrEmpty(strPlateSharing))
                            {
                                bPlateSharing = (strPlateSharing != "0");
                            }

                            if (!customersRepository.IsPlateOfUser(ref oUser, strPlate))
                            {
                                if (bPlateSharing || !customersRepository.IsPlateAssignedToAnotherUser(ref oUser, strPlate))
                                {
                                    if (!customersRepository.AddPlateToUser(ref oUser, strPlate))
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                        Logger_AddLogMessage(string.Format("QueryParkingOperationWithTimeSteps::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }
                                }
                                else
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Plate_Is_Assigned_To_Another_User);
                                    Logger_AddLogMessage(string.Format("QueryParkingOperationWithTimeSteps::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;

                                }
                            }


                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();
                            parametersOut["cityShortDesc"] = oGroup.INSTALLATION.INS_SHORTDESC;
                            parametersOut["time_bal"] = oUser.USR_TIME_BALANCE.ToString();
                            parametersOut["refund_balance_type"] = oUser.USR_REFUND_BALANCE_TYPE.ToString();
                            parametersOut["utc_offset"] = geograficAndTariffsRepository.GetInstallationUTCOffSetInMinutes(oGroup.INSTALLATION.INS_ID);

                            double dChangeToApply = 1.0;
                            double dChangeFee = 0;
                            string strAuthId = "";
                            List<SortedList> oAdditionals = new List<SortedList>();

                            if (oGroup.INSTALLATION.CURRENCy.CUR_ISO_CODE != oUser.CURRENCy.CUR_ISO_CODE)
                            {
                                dChangeToApply = GetChangeToApplyFromInstallationCurToUserCur(oGroup.INSTALLATION, oUser);
                                if (dChangeToApply < 0)
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("QueryParkingOperationWithTimeSteps::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }

                                NumberFormatInfo numberFormatProvider = new NumberFormatInfo();
                                numberFormatProvider.NumberDecimalSeparator = ".";
                                parametersOut["chng"] = dChangeToApply.ToString(numberFormatProvider);

                            }
                                                        
                            ThirdPartyOperation oThirdPartyOperation = new ThirdPartyOperation();

                            int? iMaxAmountAllowedToPay = MaxAmountAllowedToPay(ref oUser);

                            switch ((ParkWSSignatureType)oGroup.INSTALLATION.INS_PARK_WS_SIGNATURE_TYPE)
                            {
                                case ParkWSSignatureType.pst_test:
                                {
                                    string strAd = "";
                                    if (parametersIn["g"].ToString() == "3")
                                    {
                                        strAd = "1";
                                    }
                                    else if (parametersIn["g"].ToString() == "4")
                                    {
                                        strAd = "2";
                                    }
                                    else if ((parametersIn["g"].ToString() == "2") && (parametersIn["ad"] == null))
                                    {
                                        strAd = "2";
                                    }

                                    else if ((parametersIn["g"].ToString() == "2") && (parametersIn["ad"].ToString() == "2"))
                                    {
                                        strAd = "2";
                                    }
                                    else if ((parametersIn["g"].ToString() == "2") && (parametersIn["ad"].ToString() == "3"))
                                    {
                                        strAd = "3";
                                    }
                                    else if (parametersIn["g"].ToString() == "7")
                                    {
                                        strAd = "4";
                                    }
                                    else if (parametersIn["g"].ToString() == "8")
                                    {
                                        strAd = "5";
                                    }
                                    else if ((parametersIn["g"].ToString() == "6") && (parametersIn["ad"] == null))
                                    {
                                        strAd = "5";
                                    }

                                    else if ((parametersIn["g"].ToString() == "6") && (parametersIn["ad"].ToString() == "5"))
                                    {
                                        strAd = "5";
                                    }
                                    else if ((parametersIn["g"].ToString() == "6") && (parametersIn["ad"].ToString() == "6"))
                                    {
                                        strAd = "6";
                                    }

                                    else if (parametersIn["g"].ToString() == "11")
                                    {
                                        strAd = "7";
                                    }
                                    else if (parametersIn["g"].ToString() == "12")
                                    {
                                        strAd = "8";
                                    }
                                    else if ((parametersIn["g"].ToString() == "10") && (parametersIn["ad"] == null))
                                    {
                                        strAd = "8";
                                    }

                                    else if ((parametersIn["g"].ToString() == "10") && (parametersIn["ad"].ToString() == "8"))
                                    {
                                        strAd = "8";
                                    }
                                    else if ((parametersIn["g"].ToString() == "10") && (parametersIn["ad"].ToString() == "9"))
                                    {
                                        strAd = "9";
                                    }
                                    else if (((parametersIn["g"].ToString() == "14") ||
                                            (parametersIn["g"].ToString() == "15") ||
                                            (parametersIn["g"].ToString() == "16") ||
                                            (parametersIn["g"].ToString() == "17") ||
                                            (parametersIn["g"].ToString() == "18") ||
                                            (parametersIn["g"].ToString() == "19") ||
                                            (parametersIn["g"].ToString() == "20")) &&
                                            ((parametersIn["ad"].ToString() == "10") ||
                                            (parametersIn["ad"].ToString() == "11")))
                                    {
                                        strAd = parametersIn["ad"].ToString();
                                    }
                                    else if (((parametersIn["g"].ToString() == "14") ||
                                            (parametersIn["g"].ToString() == "15") ||
                                            (parametersIn["g"].ToString() == "16") ||
                                            (parametersIn["g"].ToString() == "17") ||
                                            (parametersIn["g"].ToString() == "18") ||
                                            (parametersIn["g"].ToString() == "19") ||
                                            (parametersIn["g"].ToString() == "20")) &&
                                            (parametersIn["ad"].ToString() == null))
                                    {
                                        strAd = "10";
                                    }
                                    else
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                        Logger_AddLogMessage(string.Format("QueryParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }

                                    int i=0;

                                    ChargeOperationsType oOperationType = ChargeOperationsType.ParkingOperation;

                                    int iQ = 0;
                                    int iQFEE = 0;
                                    int iQFEEChange = 0;
                                    decimal dQVAT = 0;
                                    int iQTotal = 0;
                                    int iQTotalChange = 0;
                                    int iQSubTotal = 0;
                                    int iQSubTotalChange = 0;

                                    decimal dVAT1;
                                    decimal dVAT2;
                                    int iPartialVAT1;
                                    decimal dPercFEE;
                                    int iPercFEETopped;
                                    int iPartialPercFEE;
                                    int iFixedFEE;
                                    int iPartialFixedFEE;
                                    int iPartialPercFEEVAT;
                                    int iPartialFixedFEEVAT;

                                    int? iPaymentTypeId = null;
                                    int? iPaymentSubtypeId = null;
                                    if (oUser.CUSTOMER_PAYMENT_MEAN != null)
                                    {
                                        iPaymentTypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAT_ID;
                                        iPaymentSubtypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAST_ID;
                                    }
                                    if (!customersRepository.GetFinantialParams(oUser, oGroup.INSTALLATION.INS_ID, (PaymentSuscryptionType)oUser.USR_SUSCRIPTION_TYPE, iPaymentTypeId, iPaymentSubtypeId, oOperationType,
                                                                                out dVAT1, out dVAT2, out dPercFEE, out iPercFEETopped, out iFixedFEE))
                                    {
                                        //rtRes = ResultType.Result_Error_Generic;
                                        Logger_AddLogMessage("TestQueryParking::Error getting finantial parameters", LogLevels.logERROR);
                                    }

                                    if ((strAd == "1") || (strAd == "4") || (strAd == "7") || (strAd == "10"))
                                    {
                                        parametersOut["ad"] = strAd;
                                        parametersOut["q1"] = "100";
                                        parametersOut["q2"] = "1000";
                                        parametersOut["t1"] = "30";
                                        parametersOut["t2"] = "120";
                                        parametersOut["di"] = dtinstDateTime.Value.ToString("HHmmssddMMyy");
                                        parametersOut["o"] = "1";
                                        parametersOut["aq"] = "0";
                                        parametersOut["at"] = "0";
                                        parametersOut["cur"] = oGroup.INSTALLATION.CURRENCy.CUR_ISO_CODE;

                                        if (oGroup.INSTALLATION.CURRENCy.CUR_ISO_CODE != oUser.CURRENCy.CUR_ISO_CODE)
                                        {
                                            int iQChange = ChangeQuantityFromInstallationCurToUserCur(Convert.ToInt32(parametersOut["q1"]),
                                                            dChangeToApply, oGroup.INSTALLATION, oUser, out dChangeFee);

                                            parametersOut["qch1"] = iQChange.ToString();
                                            iQChange = ChangeQuantityFromInstallationCurToUserCur(Convert.ToInt32(parametersOut["q2"]),
                                                            dChangeToApply, oGroup.INSTALLATION, oUser, out dChangeFee);

                                            parametersOut["qch2"] = iQChange.ToString();

                                        }



                                        TimeSpan ts1 = new TimeSpan(0, 25, 0);
                                        DateTime dtCurr = dtinstDateTime.Value + ts1;

                                        for (i = 30; i <= 120; i += 5)
                                        {
                                            iQ = 100 + (i - 30) * 10;
                                            TimeSpan ts = new TimeSpan(0, 5, 0);
                                            dtCurr = dtCurr + ts;

                                            iQTotal = customersRepository.CalculateFEE(iQ, dVAT1, dVAT2, dPercFEE, iPercFEETopped, iFixedFEE,
                                                                                       out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE,
                                                                                       out iPartialPercFEEVAT, out iPartialFixedFEEVAT);
                                            iQFEE = Convert.ToInt32(Math.Round(iQ * dPercFEE, MidpointRounding.AwayFromZero));
                                            if (iPercFEETopped > 0 && iQFEE > iPercFEETopped) iQFEE = iPercFEETopped;
                                            iQFEE += iFixedFEE;
                                            dQVAT = iPartialVAT1 + iPartialPercFEEVAT + iPartialFixedFEEVAT;
                                            iQSubTotal = iQ + iQFEE;

                                            if (oGroup.INSTALLATION.CURRENCy.CUR_ISO_CODE != oUser.CURRENCy.CUR_ISO_CODE)
                                            {
                                                int iQChange = ChangeQuantityFromInstallationCurToUserCur(iQ,
                                                                dChangeToApply, oGroup.INSTALLATION, oUser, out dChangeFee);

                                                iQFEEChange = ChangeQuantityFromInstallationCurToUserCur(iQFEE, dChangeToApply, oGroup.INSTALLATION, oUser, out dChangeFee);
                                                iQSubTotalChange = ChangeQuantityFromInstallationCurToUserCur(iQSubTotal, dChangeToApply, oGroup.INSTALLATION, oUser, out dChangeFee);
                                                iQTotalChange = ChangeQuantityFromInstallationCurToUserCur(iQTotal, dChangeToApply, oGroup.INSTALLATION, oUser, out dChangeFee);

                                                parametersOut["steps"] = parametersOut["steps"] +                                                                    
                                                                    string.Format("<step json:Array='true'><t>{0}</t><q>{1}</q><qch>{2}</qch><d>{3:HHmmssddMMyy}</d><q_fee>{4}</q_fee><q_vat>{5}</q_vat><q_subtotal>{6}</q_subtotal><q_total>{7}</q_total><qch_fee>{8}</qch_fee>qch_subtotal>{9}</qch_subtotal><qch_total>{10}</qch_total></step>",
                                                                        i.ToString(),
                                                                        iQ.ToString(),
                                                                        iQChange,
                                                                        dtCurr,
                                                                        iQFEE, dQVAT, iQSubTotal, iQTotal,
                                                                        iQFEEChange, iQSubTotalChange, iQTotalChange);
                                            }
                                            else
                                            {
                                                parametersOut["steps"] = parametersOut["steps"] +
                                                                    string.Format("<step json:Array='true'><t>{0}</t><q>{1}</q><d>{2:HHmmssddMMyy}</d><q_fee>{3}</q_fee><q_vat>{4}</q_vat><q_subtotal>{5}</q_subtotal><q_total>{6}</q_total></step>",
                                                                        i.ToString(),
                                                                        iQ.ToString(),
                                                                        dtCurr,
                                                                        iQFEE, dQVAT, iQSubTotal, iQTotal);
                                            }

                                        }

                                    }
                                    if ((strAd == "2") || (strAd == "5") || (strAd == "8") || (strAd == "11"))
                                    {
                                        parametersOut["ad"] = strAd;
                                        parametersOut["q1"] = "30";
                                        parametersOut["q2"] = "480";
                                        parametersOut["t1"] = "30";
                                        parametersOut["t2"] = "480";
                                        parametersOut["di"] = dtinstDateTime.Value.ToString("HHmmssddMMyy");
                                        parametersOut["o"] = "1";
                                        parametersOut["aq"] = "0";
                                        parametersOut["at"] = "0";
                                        parametersOut["steps"] = "";
                                        parametersOut["cur"] = oGroup.INSTALLATION.CURRENCy.CUR_ISO_CODE;

                                        if (oGroup.INSTALLATION.CURRENCy.CUR_ISO_CODE != oUser.CURRENCy.CUR_ISO_CODE)
                                        {
                                            int iQChange = ChangeQuantityFromInstallationCurToUserCur(Convert.ToInt32(parametersOut["q1"]),
                                                            dChangeToApply, oGroup.INSTALLATION, oUser, out dChangeFee);

                                            parametersOut["qch1"] = iQChange.ToString();
                                            iQChange = ChangeQuantityFromInstallationCurToUserCur(Convert.ToInt32(parametersOut["q2"]),
                                                            dChangeToApply, oGroup.INSTALLATION, oUser, out dChangeFee);

                                            parametersOut["qch2"] = iQChange.ToString();

                                        }
                                
                                        TimeSpan ts1 = new TimeSpan(0, 25, 0);
                                        DateTime dtCurr = dtinstDateTime.Value + ts1;

                                        for (i = 30; i <= 480; i += 5)
                                        {
                                            iQ = i;
                                            TimeSpan ts = new TimeSpan(0, 5, 0);
                                            dtCurr = dtCurr + ts;

                                            iQTotal = customersRepository.CalculateFEE(iQ, dVAT1, dVAT2, dPercFEE, iPercFEETopped, iFixedFEE,
                                                                                       out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE,
                                                                                       out iPartialPercFEEVAT, out iPartialFixedFEEVAT);
                                            iQFEE = Convert.ToInt32(Math.Round(iQ * dPercFEE, MidpointRounding.AwayFromZero));
                                            if (iPercFEETopped > 0 && iQFEE > iPercFEETopped) iQFEE = iPercFEETopped;
                                            iQFEE += iFixedFEE;
                                            dQVAT = iPartialVAT1 + iPartialPercFEEVAT + iPartialFixedFEEVAT;
                                            iQSubTotal = iQ + iQFEE;

                                            if (oGroup.INSTALLATION.CURRENCy.CUR_ISO_CODE != oUser.CURRENCy.CUR_ISO_CODE)
                                            {
                                                int iQChange = ChangeQuantityFromInstallationCurToUserCur(iQ,
                                                                dChangeToApply, oGroup.INSTALLATION, oUser, out dChangeFee);

                                                iQFEEChange = ChangeQuantityFromInstallationCurToUserCur(iQFEE, dChangeToApply, oGroup.INSTALLATION, oUser, out dChangeFee);
                                                iQSubTotalChange = ChangeQuantityFromInstallationCurToUserCur(iQSubTotal, dChangeToApply, oGroup.INSTALLATION, oUser, out dChangeFee);
                                                iQTotalChange = ChangeQuantityFromInstallationCurToUserCur(iQTotal, dChangeToApply, oGroup.INSTALLATION, oUser, out dChangeFee);

                                                parametersOut["steps"] = parametersOut["steps"] +
                                                                    string.Format("<step json:Array='true'><t>{0}</t><q>{1}</q><qch>{2}</qch><d>{3:HHmmssddMMyy}</d><q_fee>{4}</q_fee><q_vat>{5}</q_vat><q_subtotal>{6}</q_subtotal><q_total>{7}</q_total><qch_fee>{8}</qch_fee>qch_subtotal>{9}</qch_subtotal><qch_total>{10}</qch_total></step>",
                                                                        i.ToString(),
                                                                        iQ.ToString(),
                                                                        iQChange,
                                                                        dtCurr,
                                                                        iQFEE, dQVAT, iQSubTotal, iQTotal,
                                                                        iQFEEChange, iQSubTotalChange, iQTotalChange);

                                            }
                                            else
                                            {
                                                parametersOut["steps"] = parametersOut["steps"] +
                                                                    string.Format("<step json:Array='true'><t>{0}</t><q>{1}</q><d>{2:HHmmssddMMyy}</d><q_fee>{3}</q_fee><q_vat>{4}</q_vat><q_subtotal>{5}</q_subtotal><q_total>{6}</q_total></step>",
                                                                        i.ToString(),
                                                                        iQ.ToString(),
                                                                        dtCurr,
                                                                        iQFEE, dQVAT, iQSubTotal, iQTotal);


                                            }
                                        }

                                    }
                                    if ((strAd == "3") || (strAd == "6") || (strAd == "9"))
                                    {
                                        parametersOut["ad"] = strAd;
                                        parametersOut["q1"] = "50";
                                        parametersOut["q2"] = "50";
                                        parametersOut["t1"] = "1440";
                                        parametersOut["t2"] = "1440";
                                        parametersOut["di"] = dtinstDateTime.Value.ToString("HHmmssddMMyy");
                                        parametersOut["o"] = "1";
                                        parametersOut["aq"] = "0";
                                        parametersOut["at"] = "0";
                                        parametersOut["cur"] = oGroup.INSTALLATION.CURRENCy.CUR_ISO_CODE;

                                        if (oGroup.INSTALLATION.CURRENCy.CUR_ISO_CODE != oUser.CURRENCy.CUR_ISO_CODE)
                                        {
                                            int iQChange = ChangeQuantityFromInstallationCurToUserCur(Convert.ToInt32(parametersOut["q1"]),
                                                            dChangeToApply, oGroup.INSTALLATION, oUser, out dChangeFee);

                                            parametersOut["qch1"] = iQChange.ToString();
                                            iQChange = ChangeQuantityFromInstallationCurToUserCur(Convert.ToInt32(parametersOut["q2"]),
                                                            dChangeToApply, oGroup.INSTALLATION, oUser, out dChangeFee);

                                            parametersOut["qch2"] = iQChange.ToString();

                                        }


                                        TimeSpan ts = new TimeSpan(0,1440,0);

                                        iQ = 50;

                                        iQTotal = customersRepository.CalculateFEE(iQ, dVAT1, dVAT2, dPercFEE, iPercFEETopped, iFixedFEE,
                                                                                   out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE,
                                                                                   out iPartialPercFEEVAT, out iPartialFixedFEEVAT);
                                        iQFEE = Convert.ToInt32(Math.Round(iQ * dPercFEE, MidpointRounding.AwayFromZero));
                                        if (iPercFEETopped > 0 && iQFEE > iPercFEETopped) iQFEE = iPercFEETopped;
                                        iQFEE += iFixedFEE;
                                        dQVAT = iPartialVAT1 + iPartialPercFEEVAT + iPartialFixedFEEVAT;
                                        iQSubTotal = iQ + iQFEE;

                                        if (oGroup.INSTALLATION.CURRENCy.CUR_ISO_CODE != oUser.CURRENCy.CUR_ISO_CODE)
                                        {
                                            int iQChange = ChangeQuantityFromInstallationCurToUserCur(iQ,
                                                            dChangeToApply, oGroup.INSTALLATION, oUser, out dChangeFee);

                                            iQFEEChange = ChangeQuantityFromInstallationCurToUserCur(iQFEE, dChangeToApply, oGroup.INSTALLATION, oUser, out dChangeFee);
                                            iQSubTotalChange = ChangeQuantityFromInstallationCurToUserCur(iQSubTotal, dChangeToApply, oGroup.INSTALLATION, oUser, out dChangeFee);
                                            iQTotalChange = ChangeQuantityFromInstallationCurToUserCur(iQTotal, dChangeToApply, oGroup.INSTALLATION, oUser, out dChangeFee);

                                            parametersOut["steps"] = parametersOut["steps"] +
                                                                string.Format("<step json:Array='true'><t>{0}</t><q>{1}</q><qch>{2}</qch><d>{3:HHmmssddMMyy}</d><q_fee>{4}</q_fee><q_vat>{5}</q_vat><q_subtotal>{6}</q_subtotal><q_total>{7}</q_total><qch_fee>{8}</qch_fee>qch_subtotal>{9}</qch_subtotal><qch_total>{10}</qch_total></step>",
                                                                    "1440",
                                                                    iQ.ToString(),
                                                                    iQChange,
                                                                    (dtinstDateTime.Value + ts),
                                                                    iQFEE, dQVAT, iQSubTotal, iQTotal,
                                                                    iQFEEChange, iQSubTotalChange, iQTotalChange);


                                        }
                                        else
                                        {
                                            parametersOut["steps"] = parametersOut["steps"] +
                                                                string.Format("<step json:Array='true'><t>{0}</t><q>{1}</q><d>{2:HHmmssddMMyy}</d><q_fee>{3}</q_fee><q_vat>{4}</q_vat><q_subtotal>{5}</q_subtotal><q_total>{6}</q_total></step>",
                                                                    "1440",
                                                                    iQ.ToString(),
                                                                    (dtinstDateTime.Value + ts),
                                                                    iQFEE, dQVAT, iQSubTotal, iQTotal);

                                        }


                                    }
                                    
                                }
                                break;

                                case ParkWSSignatureType.pst_eysa:
                                {
                                    rt = oThirdPartyOperation.EysaQueryParking(0, oUser, strPlate, dtinstDateTime.Value, oGroup, oTariff, true, iMaxAmountAllowedToPay, dChangeToApply, ulAppVersion, ref parametersOut, ref strAuthId);

                                    if (rt != ResultType.Result_OK)
                                    {
                                        xmlOut = GenerateXMLOuput(parametersOut);

                                        if (xmlOut.Length == 0)
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                            Logger_AddLogMessage(string.Format("QueryParkingOperationWithTimeSteps::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        }
                                        else
                                        {
                                            Logger_AddLogMessage(string.Format("QueryParkingOperationWithTimeSteps: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                                        }

                                        return xmlOut;
                                    }

                                }
                                break;



                                case ParkWSSignatureType.pst_internal:
                                    parametersOut["r"] = Convert.ToInt32(ResultType.Result_Error_Generic).ToString();
                                    break;

                                case ParkWSSignatureType.pst_standard_time_steps:
                                {
                                    rt = oThirdPartyOperation.StandardQueryParkingTimeSteps(0, oUser, strPlate, dtinstDateTime.Value, oGroup, oTariff, true, iMaxAmountAllowedToPay, dChangeToApply, ref parametersOut, ref oAdditionals);


                                    if (rt != ResultType.Result_OK)
                                    {
                                        xmlOut = GenerateXMLErrorResult(rt);
                                        Logger_AddLogMessage(string.Format("QueryParkingOperationWithTimeSteps::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }

                                }
                                break;
                                case ParkWSSignatureType.pst_standard_amount_steps:
                                {
                                    rt = oThirdPartyOperation.StandardQueryParkingAmountSteps(0, oUser, strPlate, dtinstDateTime.Value, oGroup, oTariff, true, iMaxAmountAllowedToPay, dChangeToApply, ref parametersOut, ref oAdditionals);


                                    if (rt != ResultType.Result_OK)
                                    {
                                        xmlOut = GenerateXMLErrorResult(rt);
                                        Logger_AddLogMessage(string.Format("QueryParkingOperationWithTimeSteps::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }

                                }
                                break;
                                default:
                                    parametersOut["r"] = Convert.ToInt32(ResultType.Result_Error_Generic).ToString();
                                    break;
                            }



                            if (Convert.ToInt32(parametersOut["r"]) == Convert.ToInt32(ResultType.Result_OK))
                            {


                                DateTime? dtUTCDateTime = geograficAndTariffsRepository.ConvertInstallationDateTimeToUTC(oGroup.INSTALLATION.INS_ID, dtinstDateTime.Value);

                                decimal? dAuthId = null;
                                if (!string.IsNullOrEmpty(strAuthId))
                                {
                                    try
                                    {
                                        decimal dTryAuthId = Convert.ToDecimal(strAuthId);
                                        dAuthId = dTryAuthId;
                                    }
                                    catch
                                    {
                                        dAuthId = null;
                                    }
                                }

                                ChargeOperationsType oOperationType = (Convert.ToInt32(parametersOut["o"]) == 1 ? ChargeOperationsType.ParkingOperation : ChargeOperationsType.ExtensionOperation);

                                decimal dVAT1;
                                decimal dVAT2;
                                decimal dPercFEE;
                                int iPercFEETopped;
                                int iFixedFEE;
                                int? iPaymentTypeId = null;
                                int? iPaymentSubtypeId = null;
                                if (oUser.CUSTOMER_PAYMENT_MEAN != null)
                                {
                                    iPaymentTypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAT_ID;
                                    iPaymentSubtypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAST_ID;
                                }
                                if (!customersRepository.GetFinantialParams(oUser, oGroup.INSTALLATION.INS_ID, (PaymentSuscryptionType)oUser.USR_SUSCRIPTION_TYPE, iPaymentTypeId, iPaymentSubtypeId, oOperationType,
                                                                                  out dVAT1, out dVAT2, out dPercFEE, out iPercFEETopped, out iFixedFEE))
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("QueryParkingOperationWithTimeSteps::Error getting installation FEE parameters: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }

                               
                                parametersOut["IsServiceCost"] = ((dPercFEE > 0 || iFixedFEE > 0) ? 1 : 0);
                                parametersOut["ServiceParkingLbl"] = infraestructureRepository.GetLiteral(oGroup.INSTALLATION.INS_SERVICE_PARK_LIT_ID ?? 0, strCulture);
                                parametersOut["ServiceFeeLbl"] = infraestructureRepository.GetLiteral(oGroup.INSTALLATION.INS_SERVICE_FEE_LIT_ID ?? 0, strCulture);
                                parametersOut["ServiceVATLbl"] = infraestructureRepository.GetLiteral(oGroup.INSTALLATION.INS_SERVICE_VAT_LIT_ID ?? 0, strCulture);
                                parametersOut["q_subtotalLbl"] = infraestructureRepository.GetLiteral(oGroup.INSTALLATION.INS_SERVICE_SUBTOTAL_LIT_ID ?? 0, strCulture);
                                parametersOut["ServiceTotalLbl"] = infraestructureRepository.GetLiteral(oGroup.INSTALLATION.INS_SERVICE_TOTAL_LIT_ID ?? 0, strCulture);

                                // *** New tags for layout 3 ***
                                /*if (oGroup.INSTALLATION.INS_SHORTDESC == "BCN")
                                {
                                    parametersOut["layout"] = 3;
                                    parametersOut["bonusamount"] = 10;
                                    parametersOut["bonusid"] = 1;
                                }
                                else if (oGroup.INSTALLATION.INS_SHORTDESC == "SLP")
                                {
                                    parametersOut["layout"] = 3;
                                    parametersOut["bonusid"] = 1;
                                }*/
                                // *** End new tags for layout 3 ***


                                List<SortedList> oListOutParameters = new List<SortedList>();

                                oListOutParameters.Add(parametersOut);

                                foreach (SortedList oPars in oAdditionals)
                                {
                                    oListOutParameters.Add(oPars);
                                }

                            
                                foreach (SortedList oPars in oListOutParameters)
                                {

                                    ChargeOperationsType operationType = ChargeOperationsType.ParkingOperation;

                                    if (oPars["at"] != null)
                                    {
                                        if (Convert.ToInt32(oPars["at"]) > 0)
                                        {
                                            operationType = ChargeOperationsType.ExtensionOperation;
                                        }
                                    }


                                    decimal dPercBonus = 0;
                                    string sBonusId = null;
                                    string sBonusMarca = null;
                                    int? iBonusType = null;
                                    if (/*parametersOut.ContainsKey("bonusper") &&*/ oPars["bonusper"] != null)
                                    {
                                        dPercBonus = Convert.ToDecimal(oPars["bonusper"]) / Convert.ToDecimal(100);
                                        sBonusId = oPars["bonusid"].ToString();
                                        sBonusMarca = oPars["bonusmarca"].ToString();
                                        iBonusType = Convert.ToInt32(oPars["bonustype"]);
                                    }

                                    oPars["layout"] = (dPercBonus == 0 ? oGroup.INSTALLATION.INS_FEE_LAYOUT : 3);

                                    
                                    int iTariff = Convert.ToInt32(oPars["ad"]);
                                    try
                                    {
                                        oTariffInGroup = oGroup.TARIFFS_IN_GROUPs.Where(r => r.TARGR_TAR_ID == iTariff).First();
                                        oTariff = oTariffInGroup.TARIFF;
                                    }
                                    catch
                                    {

                                        foreach (GROUPS_TYPES_ASSIGNATION oAssigns in oGroup.GROUPS_TYPES_ASSIGNATIONs)
                                        {
                                            try
                                            {
                                                oTariffInGroup = oAssigns.GROUPS_TYPE.TARIFFS_IN_GROUPs.Where(r => r.TARGR_TAR_ID == iTariff).First();
                                                oTariff = oTariffInGroup.TARIFF;
                                                break;
                                            }
                                            catch { }
                                        }

                                    }



                                    oPars["btn1step"] = (oTariffInGroup.TARGR_STEP1_MIN.HasValue ? oTariffInGroup.TARGR_STEP1_MIN.Value.ToString() : "");
                                    if (oTariffInGroup.TARGR_STEP1_LIT_ID.HasValue)
                                        oPars["btn1steplit"] = infraestructureRepository.GetLiteral(oTariffInGroup.TARGR_STEP1_LIT_ID.Value, strCulture);
                                    else
                                        oPars["btn1steplit"] = "";
                                    oPars["btn2step"] = (oTariffInGroup.TARGR_STEP2_MIN.HasValue ? oTariffInGroup.TARGR_STEP2_MIN.Value.ToString() : "");
                                    if (oTariffInGroup.TARGR_STEP2_LIT_ID.HasValue)
                                        oPars["btn2steplit"] = infraestructureRepository.GetLiteral(oTariffInGroup.TARGR_STEP2_LIT_ID.Value, strCulture);
                                    else
                                        oPars["btn2steplit"] = "";
                                    oPars["btn3step"] = (oTariffInGroup.TARGR_STEP3_MIN.HasValue ? oTariffInGroup.TARGR_STEP3_MIN.Value.ToString() : "");
                                    if (oTariffInGroup.TARGR_STEP3_LIT_ID.HasValue)
                                        oPars["btn3steplit"] = infraestructureRepository.GetLiteral(oTariffInGroup.TARGR_STEP3_LIT_ID.Value, strCulture);
                                    else
                                        oPars["btn3steplit"] = "";

                                    if (!customersRepository.AddSessionOperationParkInfo(ref oUser, parametersIn["SessionID"].ToString(), operationType,
                                                    dtinstDateTime.Value, dtUTCDateTime.Value, strPlate, oGroup.GRP_ID,
                                                    Convert.ToDecimal(oPars["ad"].ToString()), dChangeToApply,
                                                    dAuthId,
                                                    dVAT1, dVAT2, dPercFEE, iPercFEETopped, iFixedFEE,
                                                    dPercBonus, sBonusId, sBonusMarca, iBonusType))
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                        Logger_AddLogMessage(string.Format("QueryParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }
                                  
                                }

                                foreach (SortedList oPars in oAdditionals)
                                {
                                    parametersOut["additionals"] += "<parkingdata json:Array='true'>";
                                    foreach (DictionaryEntry item in oPars)
                                    {
                                        try
                                        {
                                            if ((string)item.Key == "steps")
                                            {
                                                parametersOut["additionals"] += string.Format("<{0} xmlns:json='http://james.newtonking.com/projects/json'>{1}</{0}>", item.Key, item.Value);
                                            }
                                            else
                                            {
                                                parametersOut["additionals"] += string.Format("<{0}>{1}</{0}>", item.Key, item.Value);
                                            }

                                        }
                                        catch (Exception e)
                                        {
                                            Logger_AddLogException(e, string.Format("GenerateXMLOuput::Exception item={0}; value={1}", item.Key.ToString(), item.Value.ToString()), LogLevels.logERROR);
                                        }
                                    }
                                    parametersOut["additionals"] += "</parkingdata>";

                                }

                            }

                            xmlOut = GenerateXMLOuput(parametersOut, new List<string> {"steps","additionals"});

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("QueryParkingOperationWithTimeSteps::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                //Logger_AddLogMessage(string.Format("QueryParkingOperationWithTimeSteps: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }

                            oUser = null;


                        }
                    }

                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("QueryParkingOperationWithTimeSteps::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("QueryParkingOperationWithTimeSteps::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                

            }

            return xmlOut;
        }

        [WebMethod]
        public string QueryParkingOperationWithTimeStepsJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("QueryParkingOperationWithTimeStepsJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = QueryParkingOperationWithTimeSteps(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                Logger_AddLogMessage(string.Format("QueryParkingOperationWithTimeStepsJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("QueryParkingOperationWithTimeStepsJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);
                

            }

            return jsonOut;
        }

        /*
         *  ConfirmParkingOperation 
         *  
        <ipark_in>
            <u>user login or generated user id for anonymous operations</u>
            <p>plate</p>
            <g>parking sector</g>
            <ad>tariff type selected: NULL, ROTATION, RESIDENTS, VIPS</ad>
            <d>date in format hh24missddMMYY</d>
            <q>Amount of money paid in Cents</q>
            <t>Time in minutes obtained paying <q> cents</t>
            <tid>Paypal transaction Id for payments with anonymous operations</tid>
            <ah>authentication hash</ah>

        </ ipark _in>
         * 
         * 
         * 
        Result of the method:
         a.	Result: is an integer containing a Boolean value. 0 if an error has occurred
         * saving the operation or 1 if the operation has been stored correctly.      
         *
         */
        [WebMethod]
        public string ConfirmParkingOperation(string xmlIn)
        {
            string xmlOut = "";
            string strLockDictionaryString = "";

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("ConfirmParkingOperation: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["p"] == null) ||
                        (parametersIn["d"] == null) ||
                        (parametersIn["g"] == null) ||
                        (parametersIn["t"] == null) ||
                        (parametersIn["ad"] == null) ||
                        (parametersIn["bd"] == null)||
                        (parametersIn["ed"] == null)||
                        (parametersIn["q"] == null)
                        )
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString,strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            strLockDictionaryString = parametersIn["u"].ToString();
                            if (ExistConfirmLockInformation(strLockDictionaryString))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_ConfirmOperationAlreadyExecuting);
                                Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;

                            }
                            else
                            {

                                DateTime dt = DateTime.Now;
                                try
                                {
                                    dt = DateTime.ParseExact(parametersIn["d"].ToString(), "HHmmssddMMyy",
                                      CultureInfo.InvariantCulture);
                                }
                                catch
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;

                                }


                                DateTime dtIni = DateTime.Now;
                                try
                                {
                                    dtIni = DateTime.ParseExact(parametersIn["bd"].ToString(), "HHmmssddMMyy",
                                      CultureInfo.InvariantCulture);
                                }
                                catch
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;

                                }


                                DateTime dtEnd = DateTime.Now;
                                try
                                {
                                    dtEnd = DateTime.ParseExact(parametersIn["ed"].ToString(), "HHmmssddMMyy",
                                      CultureInfo.InvariantCulture);
                                }
                                catch
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;

                                }


                                int iTime;
                                try
                                {
                                    iTime = Int32.Parse(parametersIn["t"].ToString(), CultureInfo.InvariantCulture);
                                }
                                catch
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;

                                }

                                int iQuantity;
                                try
                                {
                                    iQuantity = Int32.Parse(parametersIn["q"].ToString(), CultureInfo.InvariantCulture);
                                }
                                catch
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;

                                }


                                decimal? dGroupId = null;

                                try
                                {
                                    decimal dTryGroupId = Convert.ToDecimal(parametersIn["g"].ToString());
                                    dGroupId = dTryGroupId;
                                }
                                catch
                                {
                                    dGroupId = null;
                                }


                               
                                GROUP oGroup = null;
                                DateTime? dtinstDateTime = null;


                                if (!geograficAndTariffsRepository.getGroup(dGroupId,
                                                                            ref oGroup,
                                                                            ref dtinstDateTime))
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }

                                TARIFF oTariff = null;
                                if (parametersIn["ad"] != null)
                                {
                                    int iTariff = Convert.ToInt32(parametersIn["ad"]);
                                    try
                                    {
                                        oTariff = oGroup.TARIFFS_IN_GROUPs.Where(r => r.TARGR_TAR_ID == iTariff).First().TARIFF;
                                    }
                                    catch
                                    {

                                        foreach (GROUPS_TYPES_ASSIGNATION oAssigns in oGroup.GROUPS_TYPES_ASSIGNATIONs)
                                        {
                                            try
                                            {
                                                oTariff = oAssigns.GROUPS_TYPE.TARIFFS_IN_GROUPs.Where(r => r.TARGR_TAR_ID == iTariff).First().TARIFF;
                                                break;
                                            }
                                            catch { }
                                        }

                                        if (oTariff == null)
                                        {
                                            DeleteConfirmLockInformation(strLockDictionaryString);
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                            Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }

                                    }

                                }
                                else
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }


                                STREET_SECTION oStreetSection = null;
                                if (parametersIn["strse"] != null)
                                {
                                    int iStreetSection = Convert.ToInt32(parametersIn["strse"]);
                                    try
                                    {
                                        oStreetSection = oGroup.STREET_SECTIONs.Where(r => r.STRSE_DELETED == 0 && r.STRSE_ID == iStreetSection).First();
                                    }
                                    catch
                                    {                                                                              
                                        DeleteConfirmLockInformation(strLockDictionaryString);
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                        Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;

                                    }

                                }
                               


                                string strPlate = NormalizePlate(parametersIn["p"].ToString());

                                if (strPlate.Length == 0)
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;

                                }


                                string strPlaceString = parametersIn["sp"] != null ? parametersIn["sp"].ToString().Trim() : "";

                                USER oUser = null;
                                string strAppVersion = "";
                                rt = GetUserData(ref oUser, parametersIn, out strAppVersion);

                                if (rt != ResultType.Result_OK)
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(rt);
                                    Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }


                                int iRealQuantity=iQuantity;
                                try
                                {
                                    if (parametersIn.ContainsKey("real_q"))
                                    {
                                        iRealQuantity = Int32.Parse(parametersIn["real_q"].ToString(), CultureInfo.InvariantCulture);
                                    }                                    
                                }
                                catch
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;

                                }


                                int iTimeBalUsed=0;
                                try
                                {
                                    if (parametersIn.ContainsKey("time_bal_used"))
                                    {
                                        iTimeBalUsed = Int32.Parse(parametersIn["time_bal_used"].ToString(), CultureInfo.InvariantCulture);
                                    }
                                   
                                }
                                catch
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;

                                }

                                int iPostpay = 0;
                                try
                                {
                                    if (parametersIn.ContainsKey("postpay"))
                                    {
                                        iPostpay = Int32.Parse(parametersIn["postpay"].ToString(), CultureInfo.InvariantCulture);
                                    }

                                }
                                catch
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;

                                }

                               
                                string strPlateSharing = infraestructureRepository.GetParameterValue("PlateSharing");
                                bool bPlateSharing = true;

                                if (!string.IsNullOrEmpty(strPlateSharing))
                                {
                                    bPlateSharing = (strPlateSharing != "0");
                                }

                                if (!customersRepository.IsPlateOfUser(ref oUser, strPlate))
                                {
                                    if (bPlateSharing || !customersRepository.IsPlateAssignedToAnotherUser(ref oUser, strPlate))
                                    {
                                        if (!customersRepository.AddPlateToUser(ref oUser, strPlate))
                                        {
                                            DeleteConfirmLockInformation(strLockDictionaryString);
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                            Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }
                                    }
                                    else
                                    {

                                        DeleteConfirmLockInformation(strLockDictionaryString);
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Plate_Is_Assigned_To_Another_User);
                                        Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;

                                    }
                                }



                                decimal dTariff = oTariff.TAR_ID;
                                double dChangeToApply = 1.0;
                                decimal? dAuthId = null;
                                DateTime dtSavedInstallationTime = DateTime.UtcNow;
                                ChargeOperationsType operationType = ChargeOperationsType.ParkingOperation;
                                decimal dPercVAT1;
                                decimal dPercVAT2;
                                decimal dPercFEE;
                                int iPercFEETopped;
                                int iFixedFEE;
                                int iPartialVAT1;
                                int iPartialPercFEE;
                                int iPartialFixedFEE;
                                int iPartialPercFEEVAT;
                                int iPartialFixedFEEVAT;
                                int iTotalQuantity;
                                decimal dPercBonus;
                                int iPartialBonusFEE;
                                int iPartialBonusFEEVAT;
                                string sBonusId;
                                string sBonusMarca;
                                int? iBonusType;

                                if (!customersRepository.CheckSessionOperationParkInfo(ref oUser, parametersIn["SessionID"].ToString(), strPlate, oGroup.GRP_ID, dTariff, out dtSavedInstallationTime, out operationType, out dChangeToApply, out dAuthId, 
                                                                                       out dPercVAT1, out dPercVAT2, out dPercFEE, out iPercFEETopped, out iFixedFEE,
                                                                                       out dPercBonus, out sBonusId, out sBonusMarca, out iBonusType))
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_OperationExpired);
                                    Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }

                                decimal? dLatitude = null;
                                decimal? dLongitude = null;
                                GetLatLon(parametersIn, out dLatitude, out dLongitude);

                                parametersOut = new SortedList();
                                parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();

                                int iCurrencyChargedQuantity = 0;
                                decimal dOperationID = -1;
                                string str3dPartyOpNum = "";
                                decimal? dRechargeId;
                                bool bRestoreBalanceInCaseOfRefund = true;
                                int? iBalanceAfterRecharge = null;
                                DateTime? dtUTCInsertionDate = null;


                                var session = oUser.MOBILE_SESSIONs.Where(r => r.MOSE_SESSIONID == parametersIn["SessionID"].ToString()
                                                                  && r.MOSE_USR_ID == oUser.USR_ID).First();

                                iTotalQuantity = customersRepository.CalculateFEE(iQuantity, dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE, dPercBonus, 
                                                                                  out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE, out iPartialBonusFEE,
                                                                                  out iPartialPercFEEVAT, out iPartialFixedFEEVAT, out iPartialBonusFEEVAT);

                                int iQT = (iPartialPercFEE - iPartialPercFEEVAT) + (iPartialFixedFEE - iPartialFixedFEEVAT);
                                int iQC = iPartialBonusFEE - iPartialBonusFEEVAT;
                                int iIVA = iPartialPercFEEVAT + iPartialFixedFEEVAT - iPartialBonusFEEVAT;

                                // Check if parametersIn are correct
                                /*int iQFEEIn = 0;
                                try
                                {
                                    iQFEEIn = Int32.Parse(parametersIn["q_fee"].ToString(), CultureInfo.InvariantCulture);
                                }
                                catch { }

                                int iQVATIn = 0;
                                try
                                {
                                    iQVATIn = Int32.Parse(parametersIn["q_vat"].ToString(), CultureInfo.InvariantCulture);
                                }
                                catch { }

                                int iQTotalIn = 0;
                                try
                                {
                                    iQTotalIn = Int32.Parse(parametersIn["q_total"].ToString(), CultureInfo.InvariantCulture);
                                }
                                catch { }

                                int iQFEE = Convert.ToInt32(iQuantity * dPercFEE);
                                if (iPercFEETopped > 0 && iQFEE > iPercFEETopped) iQFEE = iPercFEETopped;
                                iQFEE += iFixedFEE;
                                int iQVAT = iPartialVAT1 + iPartialPercFEE + iPartialFixedFEE;

                                if (iQFEE != iQFEEIn || iQVAT != iQVATIn || iTotalQuantity != iQTotalIn)
                                {
                                    // Incorrect in parameters
                                    // ...
                                }*/

                                rt = ChargeParkingOperation(operationType, strPlate, dChangeToApply, iQuantity, iTime, iRealQuantity, iTimeBalUsed, dtSavedInstallationTime, dtIni, dtEnd, dTariff,oStreetSection,
                                                            oGroup, ref oUser, session.MOSE_OS.Value, session.MOSE_ID, dLatitude, dLongitude, strAppVersion, dAuthId, 
                                                            dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE, dPercBonus,
                                                            iPartialVAT1, iPartialPercFEE, iPartialFixedFEE, iPartialBonusFEE, iTotalQuantity,
                                                            sBonusId, sBonusMarca, iBonusType,strPlaceString,iPostpay,
                                                            ref parametersOut,
                                                            out iCurrencyChargedQuantity, out dOperationID, out dtUTCInsertionDate, out dRechargeId, out iBalanceAfterRecharge,
                                                            out bRestoreBalanceInCaseOfRefund);

                                if (rt != ResultType.Result_OK)
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(rt);
                                    Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }

                                ThirdPartyOperation oThirdPartyOperation = null;
                                long lEllapsedTime = -1;

                                parametersOut["operationid"] = dOperationID;

                                if ((oGroup.INSTALLATION.INS_OPT_OPERATIONCONFIRM_MODE ?? 0) == 0)
                                {
                                    oThirdPartyOperation = new ThirdPartyOperation();

                                    switch ((ConfirmParkWSSignatureType)oGroup.INSTALLATION.INS_PARK_CONFIRM_WS_SIGNATURE_TYPE)
                                    {
                                        case ConfirmParkWSSignatureType.cpst_nocall:
                                            rt = ResultType.Result_OK;
                                            break;
                                        case ConfirmParkWSSignatureType.cpst_test:
                                            break;

                                        case ConfirmParkWSSignatureType.cpst_eysa:
                                            {
                                                rt = oThirdPartyOperation.EysaConfirmParking(1, strPlate, dtUTCInsertionDate.Value, oUser, oGroup.INSTALLATION, oGroup.GRP_ID,dTariff , iQuantity, iTime, dtIni, dtEnd,
                                                                                             iQT, iQC, iIVA, sBonusMarca, iBonusType,dLatitude, dLongitude,
                                                                                             ref parametersOut, out str3dPartyOpNum, out lEllapsedTime);
                                            }
                                            break;

                                        case ConfirmParkWSSignatureType.cpst_internal:
                                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_Error_Generic).ToString();
                                            break;

                                        case ConfirmParkWSSignatureType.cpst_standard:
                                            {
                                                rt = oThirdPartyOperation.StandardConfirmParking(1, strPlate, dtSavedInstallationTime, oUser, oGroup.INSTALLATION, oGroup.GRP_ID, dTariff, iRealQuantity, iQuantity,  iTime, dtIni, dtEnd,
                                                                                                        dOperationID, strPlaceString, iPostpay, ref parametersOut, out str3dPartyOpNum, out lEllapsedTime);
                                            }
                                            break;

                                        case ConfirmParkWSSignatureType.cpst_gtechna:
                                            {
                                                rt = oThirdPartyOperation.GtechnaConfirmParking(1, session.MOSE_ID, strPlate, dtSavedInstallationTime, oGroup.INSTALLATION, oGroup.GRP_ID, dTariff, iQuantity, iTime, dtIni, dtEnd,
                                                                                                       dOperationID, ref parametersOut, out str3dPartyOpNum, out lEllapsedTime);
                                            }
                                            break;

                                        case ConfirmParkWSSignatureType.cpst_madridplatform:
                                            {
                                                rt = oThirdPartyOperation.MadridPlatformConfirmParking(1, strPlate, dtSavedInstallationTime, dtUTCInsertionDate.Value, oUser, oGroup.INSTALLATION, oGroup.GRP_ID, dTariff, iQuantity, iTime, dtIni, dtEnd, dOperationID, dAuthId ?? 0,
                                                                                                    ref parametersOut, out str3dPartyOpNum, out lEllapsedTime);
                                            }
                                            break;

                                        default:
                                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_Error_Generic).ToString();
                                            break;
                                    }
                                }

                                if (rt != ResultType.Result_OK)
                                {

                                    try
                                    {
                                        if (parametersOut.IndexOfKey("autorecharged") >= 0)
                                            parametersOut.Remove("autorecharged");
                                        if (parametersOut.IndexOfKey("newbal") >= 0)
                                            parametersOut.Remove("newbal");
                                        if (parametersOut.IndexOfKey("new_time_bal") >= 0)
                                            parametersOut.Remove("newtime_bal");
                                    }
                                    catch { }

                                    ResultType rtRefund = RefundChargeParkPayment(ref oUser, dOperationID, dRechargeId, bRestoreBalanceInCaseOfRefund);
                                    if (rtRefund == ResultType.Result_OK)
                                    {
                                        Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Payment Refund of {0}", iCurrencyChargedQuantity), LogLevels.logERROR);
                                    }
                                    else
                                    {
                                        Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error in Payment Refund: {0}", rtRefund.ToString()), LogLevels.logERROR);
                                    }


                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(rt);
                                    Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                                else
                                {
                                    parametersOut["utc_offset"] = geograficAndTariffsRepository.GetInstallationUTCOffSetInMinutes(oGroup.INSTALLATION.INS_ID);

                                    if (str3dPartyOpNum.Length > 0)
                                    {
                                        customersRepository.UpdateThirdPartyIDInParkingOperation(ref oUser, 1, dOperationID, str3dPartyOpNum);
                                    }


                                    if (dRechargeId != null)
                                    {
                                        customersRepository.ConfirmRecharge(ref oUser, dRechargeId.Value);

                                        try
                                        {
                                            CUSTOMER_PAYMENT_MEANS_RECHARGE oRecharge = null;
                                            if (customersRepository.GetRechargeData(ref oUser, dRechargeId.Value, out oRecharge))
                                            {
                                                //if ((PaymentSuscryptionType)oRecharge.CUSPMR_SUSCRIPTION_TYPE == PaymentSuscryptionType.pstPrepay)
                                                if ((PaymentSuscryptionType)oUser.USR_SUSCRIPTION_TYPE.Value == PaymentSuscryptionType.pstPrepay)
                                                {
                                                    string culture = oUser.USR_CULTURE_LANG;
                                                    CultureInfo ci = new CultureInfo(culture);
                                                    Thread.CurrentThread.CurrentUICulture = ci;
                                                    Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(ci.Name);

                                                    iQuantity = oRecharge.CUSPMR_AMOUNT;
                                                    dPercVAT1 = oRecharge.CUSPMR_PERC_VAT1 ?? 0;
                                                    dPercVAT2 = oRecharge.CUSPMR_PERC_VAT2 ?? 0;
                                                    dPercFEE = oRecharge.CUSPMR_PERC_FEE ?? 0;
                                                    iPercFEETopped = (int)(oRecharge.CUSPMR_PERC_FEE_TOPPED ?? 0);
                                                    iFixedFEE = (int)(oRecharge.CUSPMR_FIXED_FEE ?? 0);

                                                    iTotalQuantity = customersRepository.CalculateFEE(iQuantity, dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE, out iPartialPercFEEVAT, out iPartialFixedFEEVAT);

                                                    int iQFEE = Convert.ToInt32(Math.Round(iQuantity * dPercFEE, MidpointRounding.AwayFromZero));
                                                    if (iPercFEETopped > 0 && iQFEE > iPercFEETopped) iQFEE = iPercFEETopped;
                                                    iQFEE += iFixedFEE;
                                                    int iQVAT = iPartialVAT1 + iPartialPercFEEVAT + iPartialFixedFEEVAT;
                                                    int iQSubTotal = iQuantity + iQFEE;

                                                    int iLayout = 0;
                                                    if (iQFEE != 0 || iQVAT != 0)
                                                    {                                                        
                                                        OPERATOR oOperator = customersRepository.GetDefaultOperator();
                                                        if (oOperator != null) iLayout = oOperator.OPR_FEE_LAYOUT;
                                                    }


                                                    string sLayoutSubtotal = "";
                                                    string sLayoutTotal = "";
                                                    
                                                    string sCurIsoCode = infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oRecharge.CUSPMR_CUR_ID));

                                                    if (iLayout == 2)
                                                    {
                                                        sLayoutSubtotal = string.Format(ResourceExtension.GetLiteral("Email_LayoutSubtotal"),
                                                                                        string.Format("{0:0.00} {1}", Convert.ToDouble(iQSubTotal) / 100, sCurIsoCode),
                                                                                        (oRecharge.CUSPMR_PERC_VAT1 != 0 ? string.Format("{0:0.00}% ", oRecharge.CUSPMR_PERC_VAT1 * 100) : "") +
                                                                                        (oRecharge.CUSPMR_PERC_VAT2 != 0 && oRecharge.CUSPMR_PERC_VAT1 != oRecharge.CUSPMR_PERC_VAT2 ? string.Format("{0:0.00}%", oRecharge.CUSPMR_PERC_VAT2 * 100) : ""),
                                                                                        string.Format("{0:0.00} {1}", Convert.ToDouble(iQVAT) / 100, sCurIsoCode));
                                                    }
                                                    else if (iLayout == 1)
                                                    {
                                                        sLayoutTotal = string.Format(ResourceExtension.GetLiteral("Email_LayoutTotal"),
                                                                                     string.Format("{0:0.00} {1}", Convert.ToDouble(iQuantity) / 100, sCurIsoCode),
                                                                                     string.Format("{0:0.00} {1}", Convert.ToDouble(iQFEE) / 100, sCurIsoCode),
                                                                                     (oRecharge.CUSPMR_PERC_VAT1 != 0 ? string.Format("{0:0.00}% ", oRecharge.CUSPMR_PERC_VAT1 * 100) : "") +
                                                                                     (oRecharge.CUSPMR_PERC_VAT2 != 0 && oRecharge.CUSPMR_PERC_VAT1 != oRecharge.CUSPMR_PERC_VAT2 ? string.Format("{0:0.00}%", oRecharge.CUSPMR_PERC_VAT2 * 100) : ""),
                                                                                     string.Format("{0:0.00} {1}", Convert.ToDouble(iQVAT) / 100, sCurIsoCode));
                                                    }

                                                    string strRechargeEmailSubject = ResourceExtension.GetLiteral("ConfirmAutomaticRecharge_EmailHeader");
                                                    /*
                                                        ID: {0}<br>
                                                     *  Fecha de recarga: {1:HH:mm:ss dd/MM/yyyy}<br>
                                                     *  Cantidad Recargada: {2} 
                                                     */
                                                    string strRechargeEmailBody = string.Format(ResourceExtension.GetLiteral("ConfirmRecharge_EmailBody"),
                                                        oRecharge.CUSPMR_ID,
                                                        oRecharge.CUSPMR_DATE,
                                                        string.Format("{0:0.00} {1}", Convert.ToDouble(oRecharge.CUSPMR_TOTAL_AMOUNT_CHARGED) / 100,
                                                                                      infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oRecharge.CUSPMR_CUR_ID))),
                                                        string.Format("{0:0.00} {1}", Convert.ToDouble(iBalanceAfterRecharge) / 100,
                                                                            infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID))),
                                                        ConfigurationManager.AppSettings["EmailSignatureURL"],
                                                        ConfigurationManager.AppSettings["EmailSignatureGraphic"],
                                                        sLayoutSubtotal, sLayoutTotal,
                                                        GetEmailFooter(ref oUser));

                                                    SendEmail(ref oUser, strRechargeEmailSubject, strRechargeEmailBody);

                                                }
                                            }
                                        }
                                        catch { }

                                    }

                                    if (oUser.USR_SUSCRIPTION_TYPE == (int)PaymentSuscryptionType.pstPrepay)
                                    {
                                        int iDiscountValue = 0;
                                        string strDiscountCurrencyISOCode = "";

                                        try
                                        {
                                            iDiscountValue = Convert.ToInt32(ConfigurationManager.AppSettings["SuscriptionType1_DiscountValue"]);
                                            strDiscountCurrencyISOCode = ConfigurationManager.AppSettings["SuscriptionType1_DiscountCurrency"];
                                        }
                                        catch
                                        { }


                                        if (iDiscountValue > 0)
                                        {
                                            double dDiscountChangeApplied = 0;
                                            double dDiscountChangeFee = 0;
                                            int iCurrencyDiscountQuantity = ChangeQuantityFromCurToUserCur(iDiscountValue, strDiscountCurrencyISOCode, oUser,
                                                                                                            out dDiscountChangeApplied, out dDiscountChangeFee);

                                            if (iCurrencyDiscountQuantity > 0)
                                            {
                                                DateTime? dtUTCTime = geograficAndTariffsRepository.ConvertInstallationDateTimeToUTC(oGroup.GRP_INS_ID, dtSavedInstallationTime.AddSeconds(1));

                                                customersRepository.AddDiscountToParkingOperation(ref oUser, session.MOSE_OS.Value, PaymentSuscryptionType.pstPrepay,
                                                        dtSavedInstallationTime.AddSeconds(1), dtUTCTime.Value, iDiscountValue,
                                                        infraestructureRepository.GetCurrencyFromIsoCode(strDiscountCurrencyISOCode),
                                                        oUser.CURRENCy.CUR_ID, dDiscountChangeApplied, dDiscountChangeFee, iCurrencyDiscountQuantity, dOperationID,
                                                        dLatitude, dLongitude, strAppVersion);

                                                parametersOut["newbal"] = oUser.USR_BALANCE;

                                            }
                                        }

                                    }


                                }


                                if (Convert.ToInt32(parametersOut["r"]) == Convert.ToInt32(ResultType.Result_OK))
                                {
                                    customersRepository.DeleteSessionOperationInfo(ref oUser, parametersIn["SessionID"].ToString(), strPlate);

                                    try
                                    {
                                        OPERATION oParkOp = null;
                                        if (customersRepository.GetOperationData(ref oUser, dOperationID, out oParkOp))
                                        {
                                            string culture = oUser.USR_CULTURE_LANG;
                                            CultureInfo ci = new CultureInfo(culture);
                                            Thread.CurrentThread.CurrentUICulture = ci;
                                            Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(ci.Name);

                                            iQuantity = oParkOp.OPE_AMOUNT;
                                            dPercVAT1 = oParkOp.OPE_PERC_VAT1 ?? 0;
                                            dPercVAT2 = oParkOp.OPE_PERC_VAT2 ?? 0;
                                            dPercFEE = oParkOp.OPE_PERC_FEE ?? 0;
                                            dPercBonus = oParkOp.OPE_PERC_BONUS ?? 0;
                                            iPercFEETopped = (int)(oParkOp.OPE_PERC_FEE_TOPPED ?? 0);
                                            iFixedFEE = (int)(oParkOp.OPE_FIXED_FEE ?? 0);

                                            //iTotalQuantity = customersRepository.CalculateFEE(iQuantity, dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE, out iPartialPercFEEVAT, out iPartialFixedFEEVAT);
                                            iTotalQuantity = customersRepository.CalculateFEE(iQuantity, dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE, dPercBonus,
                                                                                              out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE, out iPartialBonusFEE,
                                                                                              out iPartialPercFEEVAT, out iPartialFixedFEEVAT, out iPartialBonusFEEVAT);


                                            int iQFEE = Convert.ToInt32(Math.Round(iQuantity * dPercFEE, MidpointRounding.AwayFromZero));
                                            if (iPercFEETopped > 0 && iQFEE > iPercFEETopped) iQFEE = iPercFEETopped;
                                            iQFEE += iFixedFEE;
                                            int iQBonus = iPartialBonusFEE - iPartialBonusFEEVAT;
                                            int iQVAT = iPartialVAT1 + iPartialPercFEEVAT + iPartialFixedFEEVAT - iPartialBonusFEEVAT;
                                            int iQSubTotal = iQuantity + iQFEE;

                                            int iLayout = 0;
                                            if (dPercBonus == 0)
                                            {
                                                if (iQFEE != 0 || iQVAT != 0)
                                                {
                                                    iLayout = oParkOp.INSTALLATION.INS_FEE_LAYOUT;
                                                }
                                            }
                                            else
                                                iLayout = 3;


                                            string sLayoutSubtotal = "";
                                            string sLayoutTotal = "";

                                            string strSpaceSection="";

                                            if (!string.IsNullOrEmpty(strPlaceString))
                                            {
                                                strSpaceSection = string.Format(ResourceExtension.GetLiteral("ConfirmParking_EmailBody_SpaceSection"),
                                                                                strPlaceString);
                                            }

                                            string sCurIsoCode = infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oParkOp.OPE_AMOUNT_CUR_ID));

                                            if (iLayout == 2)
                                            {
                                                sLayoutSubtotal = string.Format(ResourceExtension.GetLiteral("Email_LayoutSubtotal"),
                                                                                string.Format("{0:0.00} {1}", Convert.ToDouble(iQSubTotal) / 100, sCurIsoCode),
                                                                                (oParkOp.OPE_PERC_VAT1 != 0 ? string.Format("{0:0.00}% ", oParkOp.OPE_PERC_VAT1 * 100) : "") +
                                                                                (oParkOp.OPE_PERC_VAT2 != 0 && oParkOp.OPE_PERC_VAT1 != oParkOp.OPE_PERC_VAT2 ? string.Format("{0:0.00}%", oParkOp.OPE_PERC_VAT2 * 100) : ""),
                                                                                string.Format("{0:0.00} {1}", Convert.ToDouble(iQVAT) / 100, sCurIsoCode));
                                            }
                                            else if (iLayout == 1)
                                            {
                                                sLayoutTotal = string.Format(ResourceExtension.GetLiteral("Email_LayoutTotal"),
                                                                             string.Format("{0:0.00} {1}", Convert.ToDouble(iQuantity) / 100, sCurIsoCode),
                                                                             string.Format("{0:0.00} {1}", Convert.ToDouble(iQFEE) / 100, sCurIsoCode),
                                                                             (oParkOp.OPE_PERC_VAT1 != 0 ? string.Format("{0:0.00}% ", oParkOp.OPE_PERC_VAT1 * 100) : "") +
                                                                             (oParkOp.OPE_PERC_VAT2 != 0 && oParkOp.OPE_PERC_VAT1 != oParkOp.OPE_PERC_VAT2 ? string.Format("{0:0.00}%", oParkOp.OPE_PERC_VAT2 * 100) : ""),
                                                                             string.Format("{0:0.00} {1}", Convert.ToDouble(iQVAT) / 100, sCurIsoCode));
                                            }


                                            string strParkingEmailSubject = ResourceExtension.GetLiteral("ConfirmParking_EmailHeader");
                                            /*
                                                * ID: {0}<br>
                                                * Matr&iacute;cula: {1}<br>
                                                * Ciudad: {2}<br>
                                                * Zona: {3}<br>
                                                * Tarifa: {4}<br>
                                                * Fecha de emisi&ocuate;: {5:HH:mm:ss dd/MM/yyyy}<br>
                                                * Aparcamiento Comienza:  {6:HH:mm:ss dd/MM/yyyy}<br><b>
                                                * Aparcamiento Finaliza:  {7:HH:mm:ss dd/MM/yyyy}</b><br>
                                                * Cantidad Pagada: {8} 
                                                */
                                            INSTALLATION oInstallation = oParkOp.INSTALLATION;
                                            string strParkingEmailBody = string.Format(ResourceExtension.GetLiteral("ConfirmParking_EmailBody"),
                                                oParkOp.OPE_ID,
                                                oParkOp.USER_PLATE.USRP_PLATE,
                                                oParkOp.INSTALLATION.INS_DESCRIPTION,
                                                oParkOp.GROUP.GRP_DESCRIPTION,
                                                oParkOp.TARIFF.TAR_DESCRIPTION,
                                                oParkOp.OPE_DATE,
                                                oParkOp.OPE_INIDATE,
                                                oParkOp.OPE_ENDDATE,
                                                (oParkOp.OPE_AMOUNT_CUR_ID == oParkOp.OPE_BALANCE_CUR_ID ?
                                                string.Format("{0:0.00} {1}", Convert.ToDouble(oParkOp.OPE_TOTAL_AMOUNT) / 100, oParkOp.CURRENCy.CUR_ISO_CODE) :
                                                string.Format("{0:0.00} {1} / {2:0.00} {3}", Convert.ToDouble(oParkOp.OPE_TOTAL_AMOUNT) / 100, oParkOp.CURRENCy.CUR_ISO_CODE,
                                                                                                Convert.ToDouble(oParkOp.OPE_FINAL_AMOUNT) / 100, oParkOp.CURRENCy1.CUR_ISO_CODE)),
                                                (oParkOp.OPE_SUSCRIPTION_TYPE == (int)PaymentSuscryptionType.pstPrepay || oUser.USR_BALANCE > 0) ?
                                                        string.Format(ResourceExtension.GetLiteral("Confirm_EmailBody_Balance"), string.Format("{0:0.00} {1}",
                                                                    Convert.ToDouble(oUser.USR_BALANCE) / 100,
                                                                    infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID)))) : "",
                                                ConfigurationManager.AppSettings["EmailSignatureURL"],
                                                ConfigurationManager.AppSettings["EmailSignatureGraphic"],
                                                sLayoutSubtotal,
                                                sLayoutTotal,
                                                strSpaceSection,
                                                GetEmailFooter(ref oInstallation ));

                                            
                                            SendEmail(ref oUser, strParkingEmailSubject, strParkingEmailBody);
                                        }
                                    }
                                    catch { }


                                }



                                if ((oGroup.INSTALLATION.INS_OPT_OPERATIONCONFIRM_MODE ?? 0) == 0)
                                {

                                    if (Convert.ToInt32(parametersOut["r"]) == Convert.ToInt32(ResultType.Result_OK))
                                    {
                                        bool bConfirmed1 = true;
                                        bool bConfirmed2 = true;
                                        bool bConfirmed3 = true;


                                        if (oGroup.INSTALLATION.INS_PARK_CONFIRM_WS2_SIGNATURE_TYPE.HasValue)
                                        {
                                            SortedList parametersOutTemp = new SortedList();

                                            switch ((ConfirmParkWSSignatureType)oGroup.INSTALLATION.INS_PARK_CONFIRM_WS2_SIGNATURE_TYPE)
                                            {

                                                case ConfirmParkWSSignatureType.cpst_nocall:
                                                    rt = ResultType.Result_OK;
                                                    break;

                                                case ConfirmParkWSSignatureType.cpst_eysa:
                                                    {
                                                        rt = oThirdPartyOperation.EysaConfirmParking(2, strPlate, dtUTCInsertionDate.Value, oUser, oGroup.INSTALLATION, oGroup.GRP_ID, dTariff, iQuantity, iTime, dtIni, dtEnd,
                                                                                                     iQT, iQC, iIVA, sBonusMarca, iBonusType,dLatitude, dLongitude,
                                                                                                     ref parametersOutTemp, out str3dPartyOpNum, out lEllapsedTime);
                                                    }
                                                    break;


                                                case ConfirmParkWSSignatureType.cpst_standard:
                                                    {
                                                        rt = oThirdPartyOperation.StandardConfirmParking(2, strPlate, dtSavedInstallationTime, oUser, oGroup.INSTALLATION, oGroup.GRP_ID, dTariff, iRealQuantity, iQuantity,  iTime, dtIni, dtEnd,
                                                                                                                dOperationID, strPlaceString, iPostpay, ref parametersOutTemp, out str3dPartyOpNum, out lEllapsedTime);
                                                    }
                                                    break;

                                                case ConfirmParkWSSignatureType.cpst_gtechna:
                                                    {
                                                        rt = oThirdPartyOperation.GtechnaConfirmParking(2, session.MOSE_ID, strPlate, dtSavedInstallationTime, oGroup.INSTALLATION, oGroup.GRP_ID, dTariff, iQuantity, iTime, dtIni, dtEnd,
                                                                                                               dOperationID, ref parametersOutTemp, out str3dPartyOpNum, out lEllapsedTime);
                                                    }
                                                    break;

                                                case ConfirmParkWSSignatureType.cpst_madridplatform:
                                                    {
                                                        rt = oThirdPartyOperation.MadridPlatformConfirmParking(2, strPlate, dtSavedInstallationTime, dtUTCInsertionDate.Value, oUser, oGroup.INSTALLATION, oGroup.GRP_ID, dTariff, iQuantity, iTime, dtIni, dtEnd, dOperationID, dAuthId ?? 0,
                                                                                                            ref parametersOut, out str3dPartyOpNum, out lEllapsedTime);
                                                    }
                                                    break;

                                                default:
                                                    break;
                                            }



                                            if (rt != ResultType.Result_OK)
                                            {
                                                bConfirmed2 = false;
                                                Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error in WS 2 Confirmation"), LogLevels.logWARN);
                                            }
                                            else
                                            {
                                                if (str3dPartyOpNum.Length > 0)
                                                {
                                                    customersRepository.UpdateThirdPartyIDInParkingOperation(ref oUser, 2, dOperationID, str3dPartyOpNum);
                                                }

                                            }
                                        }


                                        if (oGroup.INSTALLATION.INS_PARK_CONFIRM_WS3_SIGNATURE_TYPE.HasValue)
                                        {
                                            SortedList parametersOutTemp = new SortedList();

                                            switch ((ConfirmParkWSSignatureType)oGroup.INSTALLATION.INS_PARK_CONFIRM_WS3_SIGNATURE_TYPE)
                                            {
                                                case ConfirmParkWSSignatureType.cpst_nocall:
                                                    rt = ResultType.Result_OK;
                                                    break;

                                                case ConfirmParkWSSignatureType.cpst_eysa:
                                                    {
                                                        rt = oThirdPartyOperation.EysaConfirmParking(3, strPlate, dtUTCInsertionDate.Value, oUser, oGroup.INSTALLATION, oGroup.GRP_ID, dTariff, iQuantity, iTime, dtIni, dtEnd,
                                                                                                     iQT, iQC, iIVA, sBonusMarca, iBonusType,dLatitude, dLongitude,
                                                                                                     ref parametersOutTemp, out str3dPartyOpNum, out lEllapsedTime);
                                                    }
                                                    break;


                                                case ConfirmParkWSSignatureType.cpst_standard:
                                                    {
                                                        rt = oThirdPartyOperation.StandardConfirmParking(3, strPlate, dtSavedInstallationTime, oUser, oGroup.INSTALLATION, oGroup.GRP_ID, dTariff, iRealQuantity, iQuantity, iTime, dtIni, dtEnd,
                                                                                                                dOperationID, strPlaceString, iPostpay, ref parametersOutTemp, out str3dPartyOpNum, out lEllapsedTime);
                                                    }
                                                    break;


                                                case ConfirmParkWSSignatureType.cpst_gtechna:
                                                    {
                                                        rt = oThirdPartyOperation.GtechnaConfirmParking(3, session.MOSE_ID, strPlate, dtSavedInstallationTime, oGroup.INSTALLATION, oGroup.GRP_ID, dTariff, iQuantity, iTime, dtIni, dtEnd,
                                                                                                               dOperationID, ref parametersOutTemp, out str3dPartyOpNum, out lEllapsedTime);
                                                    }
                                                    break;

                                                case ConfirmParkWSSignatureType.cpst_madridplatform:
                                                    {
                                                        rt = oThirdPartyOperation.MadridPlatformConfirmParking(3, strPlate, dtSavedInstallationTime, dtUTCInsertionDate.Value, oUser, oGroup.INSTALLATION, oGroup.GRP_ID, dTariff, iQuantity, iTime, dtIni, dtEnd, dOperationID, dAuthId ?? 0,
                                                                                                            ref parametersOut, out str3dPartyOpNum, out lEllapsedTime);
                                                    }
                                                    break;

                                                default:
                                                    break;
                                            }



                                            if (rt != ResultType.Result_OK)
                                            {
                                                bConfirmed3 = false;
                                                Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error in WS 3 Confirmation"), LogLevels.logWARN);
                                            }
                                            else
                                            {
                                                if (str3dPartyOpNum.Length > 0)
                                                {
                                                    customersRepository.UpdateThirdPartyIDInParkingOperation(ref oUser, 3, dOperationID, str3dPartyOpNum);
                                                }

                                            }
                                        }

                                        if ((!bConfirmed2) || (!bConfirmed3))
                                        {
                                            customersRepository.UpdateThirdPartyConfirmedInParkingOperation(ref oUser, dOperationID, bConfirmed1, bConfirmed2, bConfirmed3);
                                        }
                                    }
                                }

                                if (oGroup != null)
                                {
                                    DateTime? dInsDateTime = geograficAndTariffsRepository.getInstallationDateTime(oGroup.GRP_INS_ID);

                                    if (dInsDateTime.HasValue)
                                    {
                                        parametersOut["cityDatetime"] = dtinstDateTime.Value.ToString("HHmmssddMMyy");
                                    }
                                }
                                                                            

                                xmlOut = GenerateXMLOuput(parametersOut);

                                if (xmlOut.Length == 0)
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                }
                                else
                                {
                                    Logger_AddLogMessage(string.Format("ConfirmParkingOperation: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                                }

                                oUser = null;

                            }
                        }
                    }

                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                

            }

            DeleteConfirmLockInformation(strLockDictionaryString);
            return xmlOut;

        }

        [WebMethod]
        public string ConfirmParkingOperationJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("ConfirmParkingOperationJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = ConfirmParkingOperation(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("ConfirmParkingOperationJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("ConfirmParkingOperationJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);
                

            }

            return jsonOut;
        }

        /*
         *  QueryUnParkingOperation
         *  
        <ipark_in>
            <u>user login or generated user id for anonymous operations</u>
            <p>plate</p>
            <d>date in format hh24missddMMYY</d>
            <ah>authentication hash</ah>

        </ ipark _in>
         * 
         * 
        <ipark_out>
	        <r>Result of the method</r>	
            <q>quantity in Cents to be refunded</q>
            <d1>Initial date (in format hh24missddMMYY) for the parking operation chain (first parking, extensions and unparking operation) after unparking</d1>
            <d2>End date (in format hh24missddMMYY) for the parking operation chain (first parking, extensions and unparking operation) after unparking</d2>
            <t>Tariff time in minutes for the parking operation chain after unparking (d2-d1) </t>

        </ipark_out>
         * 
         * 
        Result of the method:
            a.	1: UnParking is possible and the restrictions come after this tag.
            b.	-1: Invalid authentication hash
            c.	-4: Plate has no rights for doing an unparking operation
            d.	-9: Generic Error (for example database or execution error.)
        
         *
         */
        [WebMethod]
        public string QueryUnParkingOperation(string xmlIn)
        {
            string xmlOut = "";
            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("QueryUnParkingOperation: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["d"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("QueryUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString,strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("QueryUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {

                            DateTime dt;
                            try
                            {
                                dt = DateTime.ParseExact(parametersIn["d"].ToString(), "HHmmssddMMyy",
                                  CultureInfo.InvariantCulture);
                            }
                            catch
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("QueryUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;

                            }

                            USER oUser = null;
                            decimal? dInsId = null;
                            string strCulture = "";
                            string strAppVersion = "";

                            rt = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion);


                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("QueryUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }


                            ulong ulAppVersion = AppUtilities.AppVersion(strAppVersion);

                            
                            /*if ((ulAppVersion < _VERSION_2_3) && (parametersIn["p"] == null))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                                Logger_AddLogMessage(string.Format("QueryUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;

                            }*/
                            string strPlate = parametersIn["p"]!=null?parametersIn["p"].ToString():"";
                            strPlate = NormalizePlate(strPlate);

                            /*if ((ulAppVersion < _VERSION_2_3) && (strPlate.Length == 0))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("QueryUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }*/


                            if (strPlate.Length > 0)
                            {
                                string strPlateSharing = infraestructureRepository.GetParameterValue("PlateSharing");
                                bool bPlateSharing = true;

                                if (!string.IsNullOrEmpty(strPlateSharing))
                                {
                                    bPlateSharing = (strPlateSharing != "0");
                                }

                                if (!customersRepository.IsPlateOfUser(ref oUser, strPlate))
                                {
                                    if (bPlateSharing || !customersRepository.IsPlateAssignedToAnotherUser(ref oUser, strPlate))
                                    {
                                        if (!customersRepository.AddPlateToUser(ref oUser, strPlate))
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                            Logger_AddLogMessage(string.Format("QueryUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }
                                    }
                                    else
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Plate_Is_Assigned_To_Another_User);
                                        Logger_AddLogMessage(string.Format("QueryUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }
                                }

                            }
                        
                             
                            INSTALLATION oInstallation=null;
                            DateTime? dtinstDateTime = null;

                            if (!geograficAndTariffsRepository.getInstallation(dInsId, null, null, ref oInstallation, ref dtinstDateTime))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("QueryUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            if (strPlate.Length > 0)
                            {
                                if (customersRepository.ExistUnConfirmedParkingOperationFor(dInsId.Value, strPlate))
                                {
                                    Logger_AddLogMessage(string.Format("QueryUnParkingOperation::Error: Exist Unconfirmed operations for plate {0} in Installation {1}", strPlate, oInstallation.INS_DESCRIPTION), LogLevels.logERROR);
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_RefundNotPossible);
                                    Logger_AddLogMessage(string.Format("QueryUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                            }
                           
                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();

                            List<SortedList> lstRefunds = new List<SortedList>();

                            ThirdPartyOperation oThirdPartyOperation = new ThirdPartyOperation();

                            switch ((UnParkWSSignatureType)oInstallation.INS_UNPARK_WS_SIGNATURE_TYPE)
                            {
                                case UnParkWSSignatureType.upst_test:
                                    {
                                        TimeSpan ts = new TimeSpan(0, 50, 0);

                                        int iAmount = 50;
                                        int iTime = 50;
                                        DateTime dtInitialTime = dtinstDateTime.Value-ts;
                                        DateTime dtEndTime = dtinstDateTime.Value;

                                        parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();
                                        SortedList oRefund = new SortedList();
                                        oRefund["d1"] = dtInitialTime.ToString("HHmmssddMMyy");
                                        oRefund["d2"] = dtEndTime.ToString("HHmmssddMMyy");
                                        oRefund["q"] = iAmount.ToString();
                                        oRefund["t"] = iTime.ToString();
                                        oRefund["cur"] = oInstallation.CURRENCy.CUR_ISO_CODE;
                                        oRefund["p"] = oUser.USER_PLATEs.Where(r => r.USRP_ENABLED == 1).First().USRP_PLATE;
                                        lstRefunds.Add(oRefund);

                                        rt = (ResultType)Convert.ToInt32(parametersOut["r"].ToString());
                                    }
                                    break;

                                case UnParkWSSignatureType.upst_eysa:
                                    {


                                        if (strPlate.Length > 0)
                                        {
                                            rt = oThirdPartyOperation.EysaQueryUnParking(0, oUser, strPlate, dtinstDateTime.Value, oInstallation, ulAppVersion, ref parametersOut,
                                                                                         ref lstRefunds);
                                            if (rt != ResultType.Result_OK)
                                            {
                                                xmlOut = GenerateXMLErrorResult(rt);
                                                Logger_AddLogMessage(string.Format("QueryParkingUnOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                return xmlOut;
                                            }
                                        }
                                        else
                                        {
                                            rt = ResultType.Result_Error_RefundNotPossible;

                                            foreach (USER_PLATE oPlate in oUser.USER_PLATEs.Where(r => r.USRP_ENABLED == 1))
                                            {

                                                ResultType rtTemp = oThirdPartyOperation.EysaQueryUnParking(0, oUser, oPlate.USRP_PLATE, dtinstDateTime.Value, oInstallation, ulAppVersion, ref parametersOut,
                                                                                         ref lstRefunds);
                                                if ((rtTemp != ResultType.Result_OK)&& (rtTemp != ResultType.Result_Error_RefundNotPossible))
                                                {
                                                    xmlOut = GenerateXMLErrorResult(rt);
                                                    Logger_AddLogMessage(string.Format("QueryParkingUnOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                    return xmlOut;
                                                }

                                                if (rtTemp == ResultType.Result_OK)
                                                {
                                                    rt = ResultType.Result_OK;
                                                }
                                            }

                                            if (rt == ResultType.Result_OK)
                                            {
                                                parametersOut["r"] = Convert.ToInt32(rt).ToString();
                                            }
                                            else
                                            {
                                                xmlOut = GenerateXMLErrorResult(rt);
                                                Logger_AddLogMessage(string.Format("QueryParkingUnOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                return xmlOut;
                                            }

                                        }

                                    }
                                    break;

                                case UnParkWSSignatureType.upst_internal:
                                    parametersOut["r"] = Convert.ToInt32(ResultType.Result_Error_Generic).ToString();
                                    rt = (ResultType)Convert.ToInt32(parametersOut["r"].ToString());
                                    break;

                                case UnParkWSSignatureType.upst_standard:
                                    {
                                        if (strPlate.Length > 0)
                                        {
                                            rt = oThirdPartyOperation.StandardQueryUnParking(0, oUser, strPlate, dtinstDateTime.Value, oInstallation, ulAppVersion, ref parametersOut,
                                                                                             ref lstRefunds);

                                            if (rt != ResultType.Result_OK)
                                            {
                                                xmlOut = GenerateXMLErrorResult(rt);
                                                Logger_AddLogMessage(string.Format("QueryParkingUnOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                return xmlOut;
                                            }
                                        }
                                        else
                                        {
                                            rt = ResultType.Result_Error_RefundNotPossible;

                                            foreach (USER_PLATE oPlate in oUser.USER_PLATEs.Where(r => r.USRP_ENABLED == 1))
                                            {

                                                ResultType rtTemp = oThirdPartyOperation.StandardQueryUnParking(0, oUser, oPlate.USRP_PLATE, dtinstDateTime.Value, oInstallation, ulAppVersion, ref parametersOut,
                                                                                                                ref lstRefunds);
                                                if ((rtTemp != ResultType.Result_OK) && (rtTemp != ResultType.Result_Error_RefundNotPossible))
                                                {
                                                    xmlOut = GenerateXMLErrorResult(rt);
                                                    Logger_AddLogMessage(string.Format("QueryParkingUnOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                    return xmlOut;
                                                }

                                                if (rtTemp == ResultType.Result_OK)
                                                {
                                                    rt = ResultType.Result_OK;
                                                }
                                            }

                                            if (rt == ResultType.Result_OK)
                                            {
                                                parametersOut["r"] = Convert.ToInt32(rt).ToString();
                                            }
                                            else
                                            {
                                                xmlOut = GenerateXMLErrorResult(rt);
                                                Logger_AddLogMessage(string.Format("QueryParkingUnOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                return xmlOut;
                                            }


                                        }
                                    }
                                    break;


                                default:
                                    parametersOut["r"] = Convert.ToInt32(ResultType.Result_Error_Generic).ToString();
                                    rt = (ResultType)Convert.ToInt32(parametersOut["r"].ToString());
                                    break;
                            }


                            double dChangeToApply = 1.0;

                            parametersOut["refunds"] = "";

                            if (rt == ResultType.Result_OK)
                            {

                                foreach (SortedList oRefund in lstRefunds)
                                {
                                    
                                    oRefund["time_bal"] = oUser.USR_TIME_BALANCE.ToString();
                                    oRefund["refund_balance_type"] = oUser.USR_REFUND_BALANCE_TYPE.ToString();
                                    int iAmount = Convert.ToInt32(oRefund["q"]);
                                    int iTime = Convert.ToInt32(oRefund["t"]);
                                    decimal? dGroupId = oRefund.ContainsKey("g") ? Convert.ToDecimal(oRefund["g"]) : (decimal?)null;
                                    decimal? dTariffId = oRefund.ContainsKey("ad") ? Convert.ToDecimal(oRefund["ad"]) : (decimal?)null;
                                    DateTime dtInitialTime = DateTime.ParseExact(oRefund["d1"].ToString(), "HHmmssddMMyy",
                                                            CultureInfo.InvariantCulture);
                                    DateTime dtEndTime = DateTime.ParseExact(oRefund["d2"].ToString(), "HHmmssddMMyy",
                                                            CultureInfo.InvariantCulture);
                                    decimal dPercBonus = 0;
                                    string sBonusId = null;
                                    if (oRefund["bonusper"] != null)
                                    {
                                        dPercBonus = Convert.ToDecimal(oRefund["bonusper"]) / Convert.ToDecimal(100);
                                        sBonusId = oRefund["bonusid"].ToString();
                                    }


                                    decimal dVAT1;
                                    decimal dVAT2;
                                    decimal dPercFEE;
                                    int iPercFEETopped;
                                    int iFixedFEE;
                                    int? iPaymentTypeId = null;
                                    int? iPaymentSubtypeId = null;
                                    if (oUser.CUSTOMER_PAYMENT_MEAN != null)
                                    {
                                        iPaymentTypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAT_ID;
                                        iPaymentSubtypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAST_ID;
                                    }
                                    if (!customersRepository.GetFinantialParams(oUser, oInstallation.INS_ID, (PaymentSuscryptionType)oUser.USR_SUSCRIPTION_TYPE, iPaymentTypeId, iPaymentSubtypeId, ChargeOperationsType.ParkingRefund,
                                                                                     out dVAT1, out dVAT2, out dPercFEE, out iPercFEETopped, out iFixedFEE))
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                        Logger_AddLogMessage(string.Format("QueryParkingUnOperation::Error getting installation FEE parameters: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }

                                    int iPartialVAT1;
                                    int iPartialPercFEE;
                                    int iPartialFixedFEE;
                                    int iPartialPercFEEVAT;
                                    int iPartialFixedFEEVAT;
                                    int iPartialBonusFEE;
                                    int iPartialBonusFEEVAT;

                                    int iTotalAmount = customersRepository.CalculateFEE(iAmount, dVAT1, dVAT2, dPercFEE, iPercFEETopped, iFixedFEE, dPercBonus,
                                                                                        out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE, out iPartialBonusFEE,
                                                                                        out iPartialPercFEEVAT, out iPartialFixedFEEVAT, out iPartialBonusFEEVAT);

                                    //iTotalAmount = iAmount - iPartialVAT1 - iPartialPercFEE - iPartialFixedFEE;

                                    int iAmountFEE = Convert.ToInt32(Math.Round(iAmount * dPercFEE, MidpointRounding.AwayFromZero));
                                    if (iPercFEETopped > 0 && iAmountFEE > iPercFEETopped) iAmountFEE = iPercFEETopped;
                                    iAmountFEE += iFixedFEE;
                                    int iBonus = Convert.ToInt32(Math.Round(iAmountFEE * dPercBonus, MidpointRounding.AwayFromZero));

                                    int iAmountVAT = iPartialVAT1 + iPartialPercFEEVAT + iPartialFixedFEEVAT - iPartialBonusFEEVAT;
                                    int iSubTotalAmount = iAmount + iAmountFEE - iBonus;
                                    

                                    oRefund["layout"] = oInstallation.INS_FEE_LAYOUT;
                                    oRefund["q_fee_lbl"] = infraestructureRepository.GetLiteral(oInstallation.INS_SERVICE_FEE_LIT_ID ?? 0, strCulture);
                                    oRefund["q_vat_lbl"] = infraestructureRepository.GetLiteral(oInstallation.INS_SERVICE_VAT_LIT_ID ?? 0, strCulture);
                                    oRefund["q_subtotalLbl"] = infraestructureRepository.GetLiteral(oInstallation.INS_SERVICE_SUBTOTAL_LIT_ID ?? 0, strCulture);
                                    oRefund["q_total_lbl"] = infraestructureRepository.GetLiteral(oInstallation.INS_SERVICE_TOTAL_LIT_ID ?? 0, strCulture);
                                    oRefund["q_fee"] = iAmountFEE;
                                    oRefund["q_vat"] = iAmountVAT;
                                    oRefund["q_subtotal"] = iSubTotalAmount;
                                    oRefund["q_total"] = iTotalAmount;
                                    

                                    if (oInstallation.CURRENCy.CUR_ISO_CODE != oUser.CURRENCy.CUR_ISO_CODE)
                                    {
                                        double dChangeFee = 0;

                                        dChangeToApply = GetChangeToApplyFromInstallationCurToUserCur(oInstallation, oUser);
                                        if (dChangeToApply < 0)
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                            Logger_AddLogMessage(string.Format("QueryParkingUnOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }

                                        NumberFormatInfo numberFormatProvider = new NumberFormatInfo();
                                        numberFormatProvider.NumberDecimalSeparator = ".";
                                        oRefund["chng"] = dChangeToApply.ToString(numberFormatProvider);

                                        int iQChange = ChangeQuantityFromInstallationCurToUserCur(Convert.ToInt32(oRefund["q"]),
                                                        dChangeToApply, oInstallation, oUser, out dChangeFee);

                                        oRefund["qch"] = iQChange.ToString();

                                        int iAmountFEEChange = ChangeQuantityFromInstallationCurToUserCur(iAmountFEE, dChangeToApply, oInstallation, oUser, out dChangeFee);
                                        oRefund["qch_fee"] = iAmountFEEChange.ToString();

                                        int iSubTotalAmountChange = ChangeQuantityFromInstallationCurToUserCur(iSubTotalAmount, dChangeToApply, oInstallation, oUser, out dChangeFee);
                                        oRefund["qch_subtotal"] = iSubTotalAmountChange.ToString();

                                        int iTotalAmountChange = ChangeQuantityFromInstallationCurToUserCur(iTotalAmount, dChangeToApply, oInstallation, oUser, out dChangeFee);
                                        oRefund["qch_total"] = iTotalAmountChange.ToString();
                                    }

                                    ChargeOperationsType operationType = ChargeOperationsType.ParkingRefund;

                                    DateTime? dtUTCDateTime = geograficAndTariffsRepository.ConvertInstallationDateTimeToUTC(oInstallation.INS_ID, dtinstDateTime.Value);
                                    DateTime? dtUTCIniDateTime = geograficAndTariffsRepository.ConvertInstallationDateTimeToUTC(oInstallation.INS_ID, dtInitialTime);
                                    DateTime? dtUTCEndDateTime = geograficAndTariffsRepository.ConvertInstallationDateTimeToUTC(oInstallation.INS_ID, dtEndTime);

                                    if (!customersRepository.AddSessionOperationUnParkInfo(ref oUser, parametersIn["SessionID"].ToString(), operationType,
                                                    dtinstDateTime.Value, dtUTCDateTime.Value, oRefund["p"].ToString(), iAmount, iTime, dGroupId, dTariffId, dtUTCIniDateTime.Value, dtUTCEndDateTime.Value, dChangeToApply,
                                                    dVAT1, dVAT2, dPercFEE, iPercFEETopped, iFixedFEE, dPercBonus, sBonusId))
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                        Logger_AddLogMessage(string.Format("QueryParkingUnOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }

                                    /*if (ulAppVersion >= _VERSION_2_3)
                                    {*/
                                        string strRefund = "<refund json:Array='true'>";
                                        foreach (string key in oRefund.Keys)
                                        {
                                            strRefund += string.Format("<{0}>{1}</{0}>", key, oRefund[key]);
                                        }

                                        strRefund += "</refund>";
                                        parametersOut["refunds"] += strRefund;
                                    /*}
                                    else
                                    {                                        
                                        foreach (string key in oRefund.Keys)
                                        {
                                            parametersOut[key] = oRefund[key];
                                        }

                                        break;
                                    }*/
                                }
                            }

                            /*if (ulAppVersion >= _VERSION_2_3)
                            {*/
                                xmlOut = GenerateXMLOuput(parametersOut, new List<string> { "refunds" });
                            /*}
                            else
                            {
                                xmlOut = GenerateXMLOuput(parametersOut);
                            }*/

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("QueryUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("QueryUnParkingOperation: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                            oUser = null;



                        }
                    }

                    if (parametersIn != null)
                    {
                        parametersIn.Clear();
                        parametersIn = null;
                    }

                    if (parametersOut != null)
                    {
                        parametersOut.Clear();
                        parametersOut = null;
                    }

                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("QueryUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("QueryUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                

            }

            return xmlOut;
        }


        [WebMethod]
        public string QueryUnParkingOperationJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("QueryUnParkingOperationJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = QueryUnParkingOperation(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("QueryUnParkingOperationJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("QueryUnParkingOperationJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);
                

            }

            return jsonOut;
        }

        /*
         *  ConfirmUnParkingOperation 
         *  
        <ipark_in>
            <u>user login or generated user id for anonymous operations</u>
            <m>plate</m>
            <d>date in format hh24missddMMYY </d>
            <q>Amount refunded in Cents</q>
            <ah>authentication hash</ah>

        </ ipark _in>
         * 
         
         * 
         * 
        Result of the method:
        a.	Result: is an integer containing a Boolean value. 0 if an error has occurred
         * saving the operation or 1 if the operation has been stored correctly.    
         *
         */
        [WebMethod]
        public string ConfirmUnParkingOperation(string xmlIn)
        {
            string xmlOut = "";
            string strLockDictionaryString = "";

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("ConfirmUnParkingOperation: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["p"] == null) ||
                        (parametersIn["d"] == null) ||
                        (parametersIn["q"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("ConfirmUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString,strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("ConfirmUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            strLockDictionaryString = parametersIn["u"].ToString();
                            if (ExistConfirmLockInformation(strLockDictionaryString))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_ConfirmOperationAlreadyExecuting);
                                Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;

                            }
                            else
                            {


                                DateTime dt;
                                try
                                {
                                    dt = DateTime.ParseExact(parametersIn["d"].ToString(), "HHmmssddMMyy",
                                      CultureInfo.InvariantCulture);
                                }
                                catch
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("ConfirmUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;

                                }

                                int iQuantity;
                                try
                                {
                                    iQuantity = Int32.Parse(parametersIn["q"].ToString(), CultureInfo.InvariantCulture);
                                }
                                catch
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("ConfirmUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;

                                }



                                USER oUser = null;
                                decimal? dInsId = null;
                                string strAppVersion = "";
                                rt = GetUserData(ref oUser, parametersIn, out dInsId, out strAppVersion);

                                if (rt != ResultType.Result_OK)
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(rt);
                                    Logger_AddLogMessage(string.Format("ConfirmUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }

                                decimal? dLatitude = null;
                                decimal? dLongitude = null;
                                GetLatLon(parametersIn, out dLatitude, out dLongitude);


                                INSTALLATION oInstallation = null;
                                DateTime? dtinstDateTime = null;
                                decimal? dLatitudeInst = null;
                                decimal? dLongitudeInst = null;

                                if (!geograficAndTariffsRepository.getInstallation(dInsId.Value,
                                                                             dLatitudeInst,
                                                                             dLongitudeInst,
                                                                             ref oInstallation,
                                                                             ref dtinstDateTime))
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_City);
                                    Logger_AddLogMessage(string.Format("ConfirmUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }


                                string strPlate = NormalizePlate(parametersIn["p"].ToString());

                                if (strPlate.Length == 0)
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("ConfirmUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;

                                }


                                string strPlateSharing = infraestructureRepository.GetParameterValue("PlateSharing");
                                bool bPlateSharing = true;

                                if (!string.IsNullOrEmpty(strPlateSharing))
                                {
                                    bPlateSharing = (strPlateSharing != "0");
                                }

                                if (!customersRepository.IsPlateOfUser(ref oUser, strPlate))
                                {
                                    if (bPlateSharing || !customersRepository.IsPlateAssignedToAnotherUser(ref oUser, strPlate))
                                    {
                                        if (!customersRepository.AddPlateToUser(ref oUser, strPlate))
                                        {
                                            DeleteConfirmLockInformation(strLockDictionaryString);
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                            Logger_AddLogMessage(string.Format("ConfirmUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }
                                    }
                                    else
                                    {

                                        DeleteConfirmLockInformation(strLockDictionaryString);
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Plate_Is_Assigned_To_Another_User);
                                        Logger_AddLogMessage(string.Format("ConfirmUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;

                                    }
                                }
                                


                                double dChangeToApply = 1.0;
                                DateTime dtSavedInstallationTime = DateTime.UtcNow;
                                ChargeOperationsType operationType = ChargeOperationsType.ParkingRefund;
                                int iTime = 0;
                                DateTime dtUTCInitialTime = dtinstDateTime.Value;
                                DateTime dtUTCEndTime = dtinstDateTime.Value;
                                decimal? dGroupId = null;
                                decimal? dTariffId = null;
                                decimal dPercVAT1;
                                decimal dPercVAT2;
                                decimal dPercFEE;
                                int iPercFEETopped;
                                int iFixedFEE;
                                int iPartialVAT1;
                                int iPartialPercFEE;
                                int iPartialFixedFEE;
                                int iPartialPercFEEVAT;
                                int iPartialFixedFEEVAT;
                                int iPartialBonusFEE;
                                int iTotalQuantity;
                                decimal dPercBonus=0;
                                string sBonusId=null;



                                parametersOut = new SortedList();
                                parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();
                                parametersOut["autorecharged"] = "0";

                                if (!customersRepository.CheckSessionOperationUnParkInfo(ref oUser, parametersIn["SessionID"].ToString(), strPlate, iQuantity, out dtSavedInstallationTime,
                                    out iTime, out dGroupId, out dTariffId, out dtUTCInitialTime, out dtUTCEndTime, out operationType, out dChangeToApply,
                                    out dPercVAT1, out dPercVAT2, out dPercFEE, out iPercFEETopped, out iFixedFEE,  out dPercBonus, out sBonusId))                                    
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_OperationExpired);
                                    Logger_AddLogMessage(string.Format("ConfirmUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }


                                DateTime? dtInitialTime = geograficAndTariffsRepository.ConvertUTCToInstallationDateTime(oInstallation.INS_ID, dtUTCInitialTime);
                                DateTime? dtEndTime = geograficAndTariffsRepository.ConvertUTCToInstallationDateTime(oInstallation.INS_ID, dtUTCEndTime);


                                parametersOut = new SortedList();
                                parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();

                                int iCurrencyChargedQuantity = 0;
                                decimal dOperationID = -1;
                                string str3dPartyOpNum = "";
                                DateTime? dtUTCInsertionDate = null;


                                var session = oUser.MOBILE_SESSIONs.Where(r => r.MOSE_SESSIONID == parametersIn["SessionID"].ToString()
                                                                  && r.MOSE_USR_ID == oUser.USR_ID).First();


                                DateTime? dtPrevEnd = null;

                                if (parametersIn.ContainsKey("d_prev_end"))
                                {
                                    try
                                    {
                                        dtPrevEnd = DateTime.ParseExact(parametersIn["d_prev_end"].ToString(), "HHmmssddMMyy",
                                            CultureInfo.InvariantCulture);
                                    }
                                    catch { }
                                }


                                iTotalQuantity = customersRepository.CalculateFEE(iQuantity, dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE,dPercBonus, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE, out iPartialBonusFEE);

                                //iTotalQuantity = iQuantity - iPartialVAT1 - iPartialPercFEE - iPartialFixedFEE;

                                rt = ChargeUnParkingOperation(strPlate, iQuantity, iTime, dtSavedInstallationTime, dtInitialTime.Value, dtEndTime.Value, dtPrevEnd, dChangeToApply, dGroupId, dTariffId,
                                                            dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE,dPercBonus, 
                                                            iPartialVAT1, iPartialPercFEE, iPartialFixedFEE, iPartialBonusFEE, iTotalQuantity, sBonusId,
                                                            parametersIn, oInstallation, ref oUser, session.MOSE_OS.Value, session.MOSE_ID, dLatitude, dLongitude, strAppVersion, ref parametersOut,
                                                            out dOperationID, out dtUTCInsertionDate,out iCurrencyChargedQuantity);


                                if (rt != ResultType.Result_OK)
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(rt);
                                    Logger_AddLogMessage(string.Format("ConfirmParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }

                                if (!dtPrevEnd.HasValue)
                                {
                                    dtPrevEnd = DateTime.Now;

                                }

                                parametersOut["operationid"] = dOperationID;

                                ThirdPartyOperation oThirdPartyOperation = new ThirdPartyOperation();
                                long lEllapsedTime = 0;
                                if ((oInstallation.INS_OPT_OPERATIONCONFIRM_MODE ?? 0) == 0)
                                {


                                    switch ((ConfirmParkWSSignatureType)oInstallation.INS_PARK_CONFIRM_WS_SIGNATURE_TYPE)
                                    {
                                        case ConfirmParkWSSignatureType.cpst_nocall:
                                            rt = ResultType.Result_OK;
                                            break;
                                        case ConfirmParkWSSignatureType.cpst_test:
                                            break;

                                        case ConfirmParkWSSignatureType.cpst_eysa:
                                            {
                                                rt = oThirdPartyOperation.EysaConfirmUnParking(1, strPlate, dtSavedInstallationTime, oUser, oInstallation,
                                                                                            iQuantity, iTime, dGroupId, dTariffId, dtInitialTime.Value, dtEndTime.Value,
                                                                                            ref parametersOut, out str3dPartyOpNum, out lEllapsedTime);
                                            }
                                            break;

                                        case ConfirmParkWSSignatureType.cpst_internal:
                                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_Error_Generic).ToString();
                                            break;

                                        case ConfirmParkWSSignatureType.cpst_standard:
                                            rt = oThirdPartyOperation.StandardConfirmUnParking(1, strPlate, dtSavedInstallationTime, oUser, oInstallation,
                                                                                               iQuantity, iTime, dGroupId.Value, dTariffId.Value, dtInitialTime.Value,
                                                                                               dtEndTime.Value, dOperationID, ref parametersOut, out str3dPartyOpNum, out lEllapsedTime);
                                            break;
                                        case ConfirmParkWSSignatureType.cpst_gtechna:
                                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_Error_Generic).ToString();
                                            break;

                                        default:
                                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_Error_Generic).ToString();
                                            break;
                                    }

                                }

                                if (rt != ResultType.Result_OK)
                                {
                                    try
                                    {
                                        if (parametersOut.IndexOfKey("autorecharged") >= 0)
                                            parametersOut.Remove("autorecharged");
                                        if (parametersOut.IndexOfKey("newbal") >= 0)
                                            parametersOut.Remove("newbal");
                                        if (parametersOut.IndexOfKey("new_time_bal") >= 0)
                                            parametersOut.Remove("new_time_bal");
                                    }
                                    catch{}

                                    ResultType rtRefund = BackUnParkPayment(ref oUser, dOperationID);
                                    if (rtRefund == ResultType.Result_OK)
                                    {
                                        Logger_AddLogMessage(string.Format("ConfirmUnParkingOperation::Payment Refund of {0}", iCurrencyChargedQuantity), LogLevels.logERROR);
                                    }
                                    else
                                    {
                                        Logger_AddLogMessage(string.Format("ConfirmUnParkingOperation::Error in Payment Refund: {0}", rtRefund.ToString()), LogLevels.logERROR);
                                    }


                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(rt);
                                    Logger_AddLogMessage(string.Format("ConfirmUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                                else
                                {
                                    parametersOut["utc_offset"] = geograficAndTariffsRepository.GetInstallationUTCOffSetInMinutes(oInstallation.INS_ID);

                                    if (str3dPartyOpNum.Length > 0)
                                    {
                                        customersRepository.UpdateThirdPartyIDInParkingOperation(ref oUser, 1, dOperationID, str3dPartyOpNum);
                                    }

                                }


                                if (Convert.ToInt32(parametersOut["r"]) == Convert.ToInt32(ResultType.Result_OK))
                                {
                                    customersRepository.DeleteSessionOperationInfo(ref oUser, parametersIn["SessionID"].ToString(),strPlate);

                                    try
                                    {
                                        /*

                                        int iTotalAmount = customersRepository.CalculateFEE(iAmount, dVAT1, dVAT2, dPercFEE, iPercFEETopped, iFixedFEE,dPercBonus,
                                                                                            out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE, out iPartialBonusFEE,
                                                                                            out iPartialPercFEEVAT, out iPartialFixedFEEVAT, out iPartialBonusFEEVAT);

                                        //iTotalAmount = iAmount - iPartialVAT1 - iPartialPercFEE - iPartialFixedFEE;

                                        int iAmountFEE = Convert.ToInt32(Math.Round(iAmount * dPercFEE, MidpointRounding.AwayFromZero));
                                        if (iPercFEETopped > 0 && iAmountFEE > iPercFEETopped) iAmountFEE = iPercFEETopped;
                                        iAmountFEE += iFixedFEE;
                                        int iBonus = Convert.ToInt32(Math.Round(iAmountFEE * dPercBonus, MidpointRounding.AwayFromZero));

                                        int iAmountVAT = iPartialVAT1 + iPartialPercFEEVAT + iPartialFixedFEEVAT -iPartialBonusFEEVAT;
                                        int iSubTotalAmount = iAmount + iAmountFEE - iBonus;
                                         * */



                                        OPERATION oParkOp = null;
                                        if (customersRepository.GetOperationData(ref oUser, dOperationID, out oParkOp))
                                        {
                                            string culture = oUser.USR_CULTURE_LANG;
                                            CultureInfo ci = new CultureInfo(culture);
                                            Thread.CurrentThread.CurrentUICulture = ci;
                                            Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(ci.Name);

                                            iQuantity = oParkOp.OPE_AMOUNT;
                                            dPercVAT1 = oParkOp.OPE_PERC_VAT1 ?? 0;
                                            dPercVAT2 = oParkOp.OPE_PERC_VAT2 ?? 0;
                                            dPercFEE = oParkOp.OPE_PERC_FEE ?? 0;
                                            iPercFEETopped = (int)(oParkOp.OPE_PERC_FEE_TOPPED ?? 0);
                                            iFixedFEE = (int)(oParkOp.OPE_FIXED_FEE ?? 0);
                                            int iPartialBonusFEEVAT;
                                            dPercBonus = oParkOp.OPE_PERC_BONUS ?? 0;


                                            iTotalQuantity = customersRepository.CalculateFEE(iQuantity, dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE, dPercBonus, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE, out iPartialBonusFEE, out iPartialPercFEEVAT, out iPartialFixedFEEVAT, out iPartialBonusFEEVAT);                                         

                                            int iQFEE = Convert.ToInt32(Math.Round(iQuantity * dPercFEE, MidpointRounding.AwayFromZero));
                                            if (iPercFEETopped > 0 && iQFEE > iPercFEETopped) iQFEE = iPercFEETopped;
                                            iQFEE += iFixedFEE;
                                            int iQBonus = iPartialBonusFEE - iPartialBonusFEEVAT;
                                            int iQVAT = iPartialVAT1 + iPartialPercFEEVAT + iPartialFixedFEEVAT - iPartialBonusFEEVAT;
                                            int iQSubTotal = iQuantity + iQFEE -iQBonus;

                                            int iLayout = 0;
                                            if (dPercBonus == 0)
                                            {
                                                if (iQFEE != 0 || iQVAT != 0)
                                                {
                                                    iLayout = oParkOp.INSTALLATION.INS_FEE_LAYOUT;
                                                }
                                            }
                                            else
                                                iLayout = 3;


                                            string sLayoutSubtotal = "";
                                            string sLayoutTotal = "";

                                            if (iLayout == 2)
                                            {
                                                sLayoutSubtotal = string.Format(ResourceExtension.GetLiteral("Email_LayoutSubtotal"),
                                                                                string.Format("{0:0.00} {1}", Convert.ToDouble(iQSubTotal) / 100, oParkOp.CURRENCy.CUR_ISO_CODE),
                                                                                (oParkOp.OPE_PERC_VAT1 != 0 ? string.Format("{0:0.00}% ", oParkOp.OPE_PERC_VAT1 * 100) : "") +
                                                                                (oParkOp.OPE_PERC_VAT2 != 0 && oParkOp.OPE_PERC_VAT1 != oParkOp.OPE_PERC_VAT2 ? string.Format("{0:0.00}%", oParkOp.OPE_PERC_VAT2 * 100) : ""),
                                                                                string.Format("{0:0.00} {1}", Convert.ToDouble(iQVAT) / 100, oParkOp.CURRENCy.CUR_ISO_CODE));
                                            }
                                            else if (iLayout == 1)                                            
                                            {
                                                sLayoutTotal = string.Format(ResourceExtension.GetLiteral("Email_LayoutTotal"),
                                                                             string.Format("{0:0.00} {1}", Convert.ToDouble(iQuantity) / 100, oParkOp.CURRENCy.CUR_ISO_CODE),
                                                                             string.Format("{0:0.00} {1}", Convert.ToDouble(iQFEE) / 100, oParkOp.CURRENCy.CUR_ISO_CODE),
                                                                             (oParkOp.OPE_PERC_VAT1 != 0 ? string.Format("{0:0.00}% ", oParkOp.OPE_PERC_VAT1 * 100) : "") +
                                                                             (oParkOp.OPE_PERC_VAT2 != 0 && oParkOp.OPE_PERC_VAT1 != oParkOp.OPE_PERC_VAT2 ? string.Format("{0:0.00}%", oParkOp.OPE_PERC_VAT2 * 100) : ""),
                                                                             string.Format("{0:0.00} {1}", Convert.ToDouble(iQVAT) / 100, oParkOp.CURRENCy.CUR_ISO_CODE));
                                            }
                                            else if (iLayout == 3)
                                            {
                                                sLayoutTotal = string.Format(ResourceExtension.GetLiteral("Email_LayoutTotalBonus"),
                                                                             string.Format("{0:0.00} {1}", Convert.ToDouble(iQuantity) / 100, oParkOp.CURRENCy.CUR_ISO_CODE),
                                                                             string.Format("{0:0.00} {1}", Convert.ToDouble(iQFEE) / 100, oParkOp.CURRENCy.CUR_ISO_CODE),
                                                                             string.Format("{0:0.00} {1}", -Convert.ToDouble(iQBonus) / 100, oParkOp.CURRENCy.CUR_ISO_CODE),
                                                                             (oParkOp.OPE_PERC_VAT1 != 0 ? string.Format("{0:0.00}% ", oParkOp.OPE_PERC_VAT1 * 100) : "") +
                                                                             (oParkOp.OPE_PERC_VAT2 != 0 && oParkOp.OPE_PERC_VAT1 != oParkOp.OPE_PERC_VAT2 ? string.Format("{0:0.00}%", oParkOp.OPE_PERC_VAT2 * 100) : ""),
                                                                             string.Format("{0:0.00} {1}", Convert.ToDouble(iQVAT) / 100, oParkOp.CURRENCy.CUR_ISO_CODE));
                                            }

                                            string strUnParkingEmailSubject = ResourceExtension.GetLiteral("ConfirmUnParking_EmailHeader");
                                            /*
                                                * ID: {0}<br>
                                                * Matr&iacute;cula: {1}<br>
                                                * Ciudad: {2}<br>
                                                * Fecha de emisi&ocuate;: {5:HH:mm:ss dd/MM/yyyy}<br>
                                                * Aparcamiento Comienza:  {6:HH:mm:ss dd/MM/yyyy}<br><b>
                                                * Aparcamiento Finaliza:  {7:HH:mm:ss dd/MM/yyyy}</b><br>
                                                * Cantidad Pagada: {8} 
                                                */
                                            INSTALLATION oInst = oParkOp.INSTALLATION;

                                            string strAmountToShow = "";
                                            if (oUser.USR_REFUND_BALANCE_TYPE == (int)RefundBalanceType.rbtTime)
                                            {
                                                strAmountToShow = iTime.ToString();
                                            }
                                            else
                                            {

                                               strAmountToShow = (oParkOp.OPE_AMOUNT_CUR_ID == oParkOp.OPE_BALANCE_CUR_ID ?
                                                        string.Format("{0:0.00} {1}", Convert.ToDouble(oParkOp.OPE_TOTAL_AMOUNT) / 100, oParkOp.CURRENCy.CUR_ISO_CODE) :
                                                        string.Format("{0:0.00} {1} / {2:0.00} {3}", Convert.ToDouble(oParkOp.OPE_TOTAL_AMOUNT) / 100, oParkOp.CURRENCy.CUR_ISO_CODE,
                                                                                                        Convert.ToDouble(oParkOp.OPE_FINAL_AMOUNT) / 100, oParkOp.CURRENCy1.CUR_ISO_CODE));
                                            }






                                            string strUnParkingEmailBody = string.Format(ResourceExtension.GetLiteral("ConfirmUnParking_EmailBody"),
                                                oParkOp.OPE_ID,
                                                oParkOp.USER_PLATE.USRP_PLATE,
                                                oParkOp.INSTALLATION.INS_DESCRIPTION,
                                                oParkOp.OPE_DATE,
                                                oParkOp.OPE_INIDATE,
                                                oParkOp.OPE_ENDDATE,
                                                strAmountToShow,
                                                (oParkOp.OPE_SUSCRIPTION_TYPE == (int)PaymentSuscryptionType.pstPrepay || oUser.USR_BALANCE > 0)?
                                                        string.Format(ResourceExtension.GetLiteral("Confirm_EmailBody_Balance"), string.Format("{0:0.00} {1}", 
                                                                    Convert.ToDouble(oUser.USR_BALANCE) / 100,
                                                                    infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID)))) : "",
                                                ConfigurationManager.AppSettings["EmailSignatureURL"],
                                                ConfigurationManager.AppSettings["EmailSignatureGraphic"],
                                                sLayoutSubtotal, 
                                                sLayoutTotal,
                                                GetEmailFooter(ref oInst), dtPrevEnd);


                                            SendEmail(ref oUser, strUnParkingEmailSubject, strUnParkingEmailBody);
                                        }
                                    }
                                    catch { }


                                }


                                if ((oInstallation.INS_OPT_OPERATIONCONFIRM_MODE ?? 0) == 0)
                                {

                                    if (Convert.ToInt32(parametersOut["r"]) == Convert.ToInt32(ResultType.Result_OK))
                                    {
                                        bool bConfirmed1 = true;
                                        bool bConfirmed2 = true;
                                        bool bConfirmed3 = true;


                                        if (oInstallation.INS_PARK_CONFIRM_WS2_SIGNATURE_TYPE.HasValue)
                                        {
                                            SortedList parametersOutTemp = new SortedList();

                                            switch ((ConfirmParkWSSignatureType)oInstallation.INS_PARK_CONFIRM_WS2_SIGNATURE_TYPE)
                                            {

                                                case ConfirmParkWSSignatureType.cpst_nocall:
                                                    rt = ResultType.Result_OK;
                                                    break;

                                                case ConfirmParkWSSignatureType.cpst_eysa:
                                                    {

                                                        rt = oThirdPartyOperation.EysaConfirmUnParking(2, strPlate, dtSavedInstallationTime, oUser, oInstallation,
                                                                                                    iQuantity, iTime, dGroupId, dTariffId, dtInitialTime.Value, dtEndTime.Value,
                                                                                                    ref parametersOutTemp, out str3dPartyOpNum, out lEllapsedTime);
                                                    }
                                                    break;


                                                case ConfirmParkWSSignatureType.cpst_standard:
                                                    {
                                                        rt = oThirdPartyOperation.StandardConfirmUnParking(2, strPlate, dtSavedInstallationTime, oUser, oInstallation,
                                                                                                           iQuantity, iTime, dGroupId.Value, dTariffId.Value, dtInitialTime.Value,
                                                                                                           dtEndTime.Value, dOperationID, ref parametersOut, out str3dPartyOpNum, out lEllapsedTime);
                                                    }
                                                    break;

                                                case ConfirmParkWSSignatureType.cpst_gtechna:
                                                    {
                                                        rt = ResultType.Result_Error_Generic;
                                                    }
                                                    break;

                                                default:
                                                    break;
                                            }



                                            if (rt != ResultType.Result_OK)
                                            {
                                                bConfirmed2 = false;
                                                Logger_AddLogMessage(string.Format("ConfirmUnParkingOperation::Error in WS 2 Confirmation"), LogLevels.logWARN);
                                            }
                                            else
                                            {
                                                if (str3dPartyOpNum.Length > 0)
                                                {
                                                    customersRepository.UpdateThirdPartyIDInParkingOperation(ref oUser, 2, dOperationID, str3dPartyOpNum);
                                                }

                                            }
                                        }


                                        if (oInstallation.INS_PARK_CONFIRM_WS3_SIGNATURE_TYPE.HasValue)
                                        {
                                            SortedList parametersOutTemp = new SortedList();

                                            switch ((ConfirmParkWSSignatureType)oInstallation.INS_PARK_CONFIRM_WS3_SIGNATURE_TYPE)
                                            {
                                                case ConfirmParkWSSignatureType.cpst_nocall:
                                                    rt = ResultType.Result_OK;
                                                    break;

                                                case ConfirmParkWSSignatureType.cpst_eysa:
                                                    {
                                                        rt = oThirdPartyOperation.EysaConfirmUnParking(3, strPlate, dtSavedInstallationTime, oUser, oInstallation,
                                                                                                    iQuantity, iTime, dGroupId, dTariffId, dtInitialTime.Value, dtEndTime.Value,
                                                                                                    ref parametersOutTemp, out str3dPartyOpNum, out lEllapsedTime);
                                                    }
                                                    break;


                                                case ConfirmParkWSSignatureType.cpst_standard:
                                                    {
                                                        rt = oThirdPartyOperation.StandardConfirmUnParking(3, strPlate, dtSavedInstallationTime, oUser, oInstallation,
                                                                                                           iQuantity, iTime, dGroupId.Value, dTariffId.Value, dtInitialTime.Value,
                                                                                                           dtEndTime.Value, dOperationID, ref parametersOut, out str3dPartyOpNum, out lEllapsedTime);
                                                    }
                                                    break;


                                                case ConfirmParkWSSignatureType.cpst_gtechna:
                                                    {
                                                        rt = ResultType.Result_Error_Generic;
                                                    }
                                                    break;

                                                default:
                                                    break;
                                            }



                                            if (rt != ResultType.Result_OK)
                                            {
                                                bConfirmed3 = false;
                                                Logger_AddLogMessage(string.Format("ConfirmUnParkingOperation::Error in WS 3 Confirmation"), LogLevels.logWARN);
                                            }
                                            else
                                            {
                                                if (str3dPartyOpNum.Length > 0)
                                                {
                                                    customersRepository.UpdateThirdPartyIDInParkingOperation(ref oUser, 3, dOperationID, str3dPartyOpNum);
                                                }

                                            }
                                        }

                                        if ((!bConfirmed2) || (!bConfirmed3))
                                        {
                                            customersRepository.UpdateThirdPartyConfirmedInParkingOperation(ref oUser, dOperationID, bConfirmed1, bConfirmed2, bConfirmed3);
                                        }
                                    }
                                }

                                if (dInsId.HasValue)
                                {
                                    DateTime? dInsDateTime = geograficAndTariffsRepository.getInstallationDateTime(dInsId.Value);

                                    if (dInsDateTime.HasValue)
                                    {
                                        parametersOut["cityDatetime"] = dtinstDateTime.Value.ToString("HHmmssddMMyy");
                                    }
                                }


                                xmlOut = GenerateXMLOuput(parametersOut);

                                if (xmlOut.Length == 0)
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("ConfirmUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                }
                                else
                                {
                                    Logger_AddLogMessage(string.Format("ConfirmUnParkingOperation: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                                }

                                oUser = null;
                            }
                        }
                    }

                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("ConfirmUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("ConfirmUnParkingOperation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                

            }

            DeleteConfirmLockInformation(strLockDictionaryString);
            return xmlOut;

        }

        [WebMethod]
        public string ConfirmUnParkingOperationJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("ConfirmUnParkingOperationJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = ConfirmUnParkingOperation(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("ConfirmUnParkingOperationJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("ConfirmUnParkingOperationJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);
                

            }

            return jsonOut;
        }

        /*
         *  QueryFinePaymentQuantity
         *  
        <ipark_in>
            <u>user login or generated user id for anonymous operations</u>
	        <f>fine number</f>
	        <d>date in format hh24missddMMYY</d>
            <ah>authentication hash</ah>

        </ ipark _in>
         *
         * 
         * 
        Result of the method:
        a.	>0: Quantity in Cents to be paid for the input fine number
        b.	-5: Fine number not found
        c.	-6: Fine number found but fine type is not payable.
        d.	-7: Fine number not found but payment period has expired.
        e.	-8: Fine number already paid.
        f.	-9: Generic Error (for example database or execution error.)
  
         *
         */

        [WebMethod]
        public string QueryFinePaymentQuantity(string xmlIn)
        {
            string xmlOut = "";
            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("QueryFinePaymentQuantity: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["cityID"] == null) ||
                        (parametersIn["f"] == null) ||
                        (parametersIn["d"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("QueryFinePaymentQuantity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString,strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("QueryFinePaymentQuantity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {

                            DateTime dt;
                            try
                            {
                                dt = DateTime.ParseExact(parametersIn["d"].ToString(), "HHmmssddMMyy",
                                  CultureInfo.InvariantCulture);
                            }
                            catch
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("QueryFinePaymentQuantity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;

                            }

                            USER oUser = null;                            
                            decimal? dInsId = null;
                            string strCulture = "";
                            string strAppVersion = "";
                            rt = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion);


                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("QueryFinePaymentQuantity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            decimal? dInstallationId = null;

                            try
                            {
                                decimal dTryInstallationId = Convert.ToDecimal(parametersIn["cityID"].ToString());
                                dInstallationId = dTryInstallationId;
                            }
                            catch
                            {
                                dInstallationId = null;
                            }

                            INSTALLATION oInstallation = null;
                            DateTime? dtinstDateTime = null;
                            decimal? dLatitude = null;
                            decimal? dLongitude = null;

                            if (!geograficAndTariffsRepository.getInstallation(dInstallationId,
                                                                         dLatitude,
                                                                         dLongitude,
                                                                         ref oInstallation,
                                                                         ref dtinstDateTime))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_City);
                                Logger_AddLogMessage(string.Format("QueryFinePaymentQuantity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            string strFineNumber = parametersIn["f"].ToString();
                            strFineNumber = strFineNumber.Trim();
                            string strEnforcUser = "";
                            string strSector = "";

                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();
                            parametersOut["cityShortDesc"] = oInstallation.INS_SHORTDESC;

                            ThirdPartyFine oThirdPartyFine = new ThirdPartyFine();

                            switch ((FineWSSignatureType)oInstallation.INS_FINE_WS_SIGNATURE_TYPE)
                            {
                                case FineWSSignatureType.fst_gtechna:
                                    {
                                        rt = oThirdPartyFine.GtechnaQueryFinePaymentQuantity(parametersIn, strFineNumber, dtinstDateTime.Value, oInstallation, ref parametersOut);
                                        parametersOut["r"] = Convert.ToInt32(rt).ToString();
                                        if (rt != ResultType.Result_OK)
                                        {
                                            xmlOut = GenerateXMLOuput(parametersOut);
                                            Logger_AddLogMessage(string.Format("QueryFinePaymentQuantity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }

                                    }
                                    break;
                                case FineWSSignatureType.fst_standard:
                                    {
                                        rt = oThirdPartyFine.StandardQueryFinePaymentQuantity(parametersIn, strFineNumber, dtinstDateTime.Value, oUser, oInstallation, ref parametersOut);
                                        parametersOut["r"] = Convert.ToInt32(rt).ToString();
                                        if (parametersOut.ContainsKey("fnumber") && parametersOut["fnumber"] != null)
                                            strFineNumber = parametersOut["fnumber"].ToString();

                                        if (rt != ResultType.Result_OK)
                                        {
                                            xmlOut = GenerateXMLOuput(parametersOut);
                                            Logger_AddLogMessage(string.Format("QueryFinePaymentQuantity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }
                                    }
                                    break;
                                case FineWSSignatureType.fst_eysa:
                                    {
                                        if (parametersIn["lang"] != null)
                                        {
                                            try
                                            {
                                                int iLangIndex = Convert.ToInt32(parametersIn["lang"].ToString());
                                                if (iLangIndex <= UserDeviceLangs.Length)
                                                {
                                                    strCulture = UserDeviceLangs[iLangIndex - 1];
                                                }
                                            }
                                            catch
                                            { }


                                        }

                                        string strCulturePrefix = strCulture.ToLower().Substring(0, 2);

                                        rt = oThirdPartyFine.EysaQueryFinePaymentQuantity(parametersIn, strFineNumber, dtinstDateTime.Value, strCulturePrefix, oUser, oInstallation, ref parametersOut);
                                        parametersOut["r"] = Convert.ToInt32(rt).ToString();
                                        if (parametersOut.ContainsKey("fnumber") && parametersOut["fnumber"] != null)
                                            strFineNumber = parametersOut["fnumber"].ToString();

                                        if (rt != ResultType.Result_OK)
                                        {
                                            xmlOut = GenerateXMLOuput(parametersOut);
                                            Logger_AddLogMessage(string.Format("QueryFinePaymentQuantity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }
                                        else
                                        {
                                            if (parametersOut.ContainsKey("sector"))
                                            {
                                                strSector = parametersOut["sector"].ToString();
                                                CultureInfo ci = new CultureInfo(strCulture);
                                                Thread.CurrentThread.CurrentUICulture = ci;
                                                Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(ci.Name);
                                                
                                                //parametersOut["zone"]=ResourceExtension.GetLiteral("Zone_" + parametersOut["sector"].ToString());
                                                //parametersOut["sector"]=ResourceExtension.GetLiteral("Sector_" + parametersOut["sector"].ToString());

                                                GROUP oGroup = null;
                                                string sSectorLiteral = "";
                                                if (geograficAndTariffsRepository.getGroupByExtId(1, strSector, out oGroup))
                                                {
                                                    sSectorLiteral = "Sector_A";
                                                }
                                                else if (geograficAndTariffsRepository.getGroupByExtId(2, strSector, out oGroup))
                                                {
                                                    sSectorLiteral = "Sector_V";
                                                }
                                                else if (geograficAndTariffsRepository.getGroupByExtId(1, strSector, out oGroup))
                                                {
                                                    sSectorLiteral = "Sector_VL";
                                                }

                                                if (oGroup != null)
                                                {
                                                    parametersOut["sector"] = ResourceExtension.GetLiteral(sSectorLiteral);
                                                    parametersOut["zone"] = oGroup.GRP_DESCRIPTION;
                                                }
                                            }
                                            else
                                            {
                                                parametersOut["zone"] = "----";
                                                parametersOut["sector"] = "----";
                                            }

                                            if (parametersOut.ContainsKey("enforcuser"))
                                            {
                                                strEnforcUser = parametersOut["enforcuser"].ToString();
                                            }


                                        }



                                    }
                                    break;
                                case FineWSSignatureType.fst_madidplatform:
                                    {
                                        rt = oThirdPartyFine.MadridPlatformQueryFinePaymentQuantity(parametersIn, strFineNumber, dtinstDateTime.Value, oUser, oInstallation, ref parametersOut);
                                        parametersOut["r"] = Convert.ToInt32(rt).ToString();
                                    }
                                    break;

                                case FineWSSignatureType.fst_internal:
                                    parametersOut["r"] = Convert.ToInt32(ResultType.Result_Error_Generic).ToString();
                                    rt = (ResultType)Convert.ToInt32(parametersOut["r"].ToString());
                                    break;
                                case FineWSSignatureType.fst_test:
                                    switch (parametersIn["f"].ToString().Substring(parametersIn["f"].ToString().Length - 1, 1))
                                    {

                                        case "0":
                                            parametersOut["r"] = (int)ResultType.Result_OK;
                                            parametersOut["q"] = 100;
                                            parametersOut["lp"] =  oUser.USER_PLATEs.Where(r => r.USRP_ENABLED == 1).First().USRP_PLATE;
                                            parametersOut["d"] = dtinstDateTime.Value.Subtract(new TimeSpan(0, 30, 0)).ToString("HHmmssddMMyy");
                                            parametersOut["df"] = dtinstDateTime.Value.Add(new TimeSpan(2, 30, 0)).ToString("HHmmssddMMyy");
                                            parametersOut["ta"] = "0.5.2";
                                            parametersOut["dta"] ="Test Article Description";
                                            parametersOut["cur"] = oInstallation.CURRENCy.CUR_ISO_CODE;

                                            break;
                                        case "1":
                                            parametersOut["r"] = (int)ResultType.Result_OK;
                                            parametersOut["q"] = 200;
                                            parametersOut["lp"] =  oUser.USER_PLATEs.Where(r => r.USRP_ENABLED == 1).First().USRP_PLATE;
                                            parametersOut["d"] = dtinstDateTime.Value.Subtract(new TimeSpan(0, 30, 0)).ToString("HHmmssddMMyy");
                                            parametersOut["df"] = dtinstDateTime.Value.Add(new TimeSpan(2, 30, 0)).ToString("HHmmssddMMyy");
                                            parametersOut["ta"] = "0.5.2";
                                            parametersOut["dta"] ="Test Article Description";
                                            parametersOut["cur"] = oInstallation.CURRENCy.CUR_ISO_CODE;

                                            break;
                                        case "2":
                                            parametersOut["r"] = (int)ResultType.Result_OK;
                                            parametersOut["q"] = 300;
                                            parametersOut["lp"] =  oUser.USER_PLATEs.Where(r => r.USRP_ENABLED == 1).First().USRP_PLATE;
                                            parametersOut["d"] = dtinstDateTime.Value.Subtract(new TimeSpan(0, 30, 0)).ToString("HHmmssddMMyy");
                                            parametersOut["df"] = dtinstDateTime.Value.Add(new TimeSpan(2, 30, 0)).ToString("HHmmssddMMyy");
                                            parametersOut["ta"] = "0.5.2";
                                            parametersOut["dta"] ="Test Article Description";
                                            parametersOut["cur"] = oInstallation.CURRENCy.CUR_ISO_CODE;

                                            break;
                                        case "3":
                                            parametersOut["r"] = (int)ResultType.Result_OK;
                                            parametersOut["q"] = 400;
                                            parametersOut["lp"] =  oUser.USER_PLATEs.Where(r => r.USRP_ENABLED == 1).First().USRP_PLATE;
                                            parametersOut["d"] = dtinstDateTime.Value.Subtract(new TimeSpan(0, 30, 0)).ToString("HHmmssddMMyy");
                                            parametersOut["df"] = dtinstDateTime.Value.Add(new TimeSpan(2, 30, 0)).ToString("HHmmssddMMyy");
                                            parametersOut["ta"] = "0.5.2";
                                            parametersOut["dta"] ="Test Article Description";
                                            parametersOut["cur"] = oInstallation.CURRENCy.CUR_ISO_CODE;

                                            break;
                                        case "4":
                                            parametersOut["r"] = (int)ResultType.Result_OK;
                                            parametersOut["q"] = 500;
                                            parametersOut["lp"] =  oUser.USER_PLATEs.Where(r => r.USRP_ENABLED == 1).First().USRP_PLATE;
                                            parametersOut["d"] = dtinstDateTime.Value.Subtract(new TimeSpan(0, 30, 0)).ToString("HHmmssddMMyy");
                                            parametersOut["df"] = dtinstDateTime.Value.Add(new TimeSpan(2, 30, 0)).ToString("HHmmssddMMyy");
                                            parametersOut["ta"] = "0.5.2";
                                            parametersOut["dta"] ="Test Article Description";
                                            parametersOut["cur"] = oInstallation.CURRENCy.CUR_ISO_CODE;

                                            break;
                                        case "5":
                                            parametersOut["r"] = (int)ResultType.Result_OK;
                                            parametersOut["q"] = 600;
                                            parametersOut["lp"] =  oUser.USER_PLATEs.Where(r => r.USRP_ENABLED == 1).First().USRP_PLATE;
                                            parametersOut["d"] = dtinstDateTime.Value.Subtract(new TimeSpan(0, 30, 0)).ToString("HHmmssddMMyy");
                                            parametersOut["df"] = dtinstDateTime.Value.Add(new TimeSpan(2, 30, 0)).ToString("HHmmssddMMyy");
                                            parametersOut["ta"] = "0.5.2";
                                            parametersOut["dta"] ="Test Article Description";
                                            parametersOut["cur"] = oInstallation.CURRENCy.CUR_ISO_CODE;

                                            break;
                                        case "6":
                                            parametersOut["r"] = (int)ResultType.Result_Error_Fine_Number_Not_Found;
                                            break;
                                        case "7":
                                            parametersOut["r"] = (int)ResultType.Result_Error_Fine_Type_Not_Payable;
                                            break;
                                        case "8":
                                            parametersOut["r"] = (int)ResultType.Result_Error_Fine_Payment_Period_Expired;
                                            break;
                                        case "9":
                                            parametersOut["r"] = (int)ResultType.Result_Error_Fine_Number_Already_Paid;
                                            break;
                                        default:
                                            parametersOut["r"] = (int)ResultType.Result_OK;
                                            parametersOut["q"] = 100;
                                            parametersOut["lp"] =  oUser.USER_PLATEs.Where(r => r.USRP_ENABLED == 1).First().USRP_PLATE;
                                            parametersOut["d"] = dtinstDateTime.Value.Subtract(new TimeSpan(0,30,0));
                                            parametersOut["df"] = dtinstDateTime.Value.Add(new TimeSpan(2, 30, 0));
                                            parametersOut["ta"] = "0.5.2";
                                            parametersOut["dta"] ="Test Article Description";
                                            parametersOut["cur"] = oInstallation.CURRENCy.CUR_ISO_CODE;

                                            break;

                                    }
                                    rt = (ResultType)Convert.ToInt32(parametersOut["r"].ToString());
                                    break;
                                default:
                                     parametersOut["r"] = Convert.ToInt32(ResultType.Result_Error_Generic).ToString();
                                    break;
                                    
                            }


                            double dChangeToApply = 1.0;

                            if (rt == ResultType.Result_OK)
                            {
                                int iQ = 0;
                                int iQFEE = 0;
                                int iQFEEChange = 0;
                                int iQVAT = 0;
                                int iQTotal = 0;
                                int iQTotalChange = 0;
                                int iQSubTotal = 0;
                                int iQSubTotalChange = 0;

                                decimal dVAT1;
                                decimal dVAT2;
                                int iPartialVAT1;
                                decimal dPercFEE;
                                int iPercFEETopped;
                                int iPartialPercFEE;
                                int iFixedFEE;
                                int iPartialFixedFEE;
                                int iPartialPercFEEVAT;                                
                                int iPartialFixedFEEVAT;

                                int? iPaymentTypeId = null;
                                int? iPaymentSubtypeId = null;
                                if (oUser.CUSTOMER_PAYMENT_MEAN != null)
                                {
                                    iPaymentTypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAT_ID;
                                    iPaymentSubtypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAST_ID;
                                }
                                if (!customersRepository.GetFinantialParams(oUser, oInstallation.INS_ID, (PaymentSuscryptionType)oUser.USR_SUSCRIPTION_TYPE, iPaymentTypeId, iPaymentSubtypeId, ChargeOperationsType.TicketPayment,
                                                                            out dVAT1, out dVAT2, out dPercFEE, out iPercFEETopped, out iFixedFEE))
                                {
                                    rt = ResultType.Result_Error_Generic;
                                    Logger_AddLogMessage("QueryFinePaymentQuantity::Error getting finantial parameters", LogLevels.logERROR);
                                }

                                iQ = Convert.ToInt32(parametersOut["q"].ToString());

                                iQTotal = customersRepository.CalculateFEE(iQ, dVAT1, dVAT2, dPercFEE, iPercFEETopped, iFixedFEE,
                                                                           out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE,
                                                                           out iPartialPercFEEVAT, out iPartialFixedFEEVAT);
                                iQFEE = Convert.ToInt32(Math.Round(iQ * dPercFEE, MidpointRounding.AwayFromZero));
                                if (iPercFEETopped > 0 && iQFEE > iPercFEETopped) iQFEE = iPercFEETopped;
                                iQFEE += iFixedFEE;
                                iQVAT = iPartialVAT1 + iPartialPercFEEVAT + iPartialFixedFEEVAT;
                                iQSubTotal = iQ + iQFEE;

                                parametersOut["layout"] = oInstallation.INS_FEE_LAYOUT;
                                parametersOut["q_fee_lbl"] = infraestructureRepository.GetLiteral(oInstallation.INS_SERVICE_FEE_LIT_ID ?? 0, strCulture);
                                parametersOut["q_vat_lbl"] = infraestructureRepository.GetLiteral(oInstallation.INS_SERVICE_VAT_LIT_ID ?? 0, strCulture);
                                parametersOut["q_subtotalLbl"] = infraestructureRepository.GetLiteral(oInstallation.INS_SERVICE_SUBTOTAL_LIT_ID ?? 0, strCulture);
                                parametersOut["q_total_lbl"] = infraestructureRepository.GetLiteral(oInstallation.INS_SERVICE_TOTAL_LIT_ID ?? 0, strCulture);
                                parametersOut["q_fee"] = iQFEE;
                                parametersOut["q_vat"] = iQVAT;
                                parametersOut["q_subtotal"] = iQSubTotal;
                                parametersOut["q_total"] = iQTotal;
                                int? iMaxAmountAllowedToPay = MaxAmountAllowedToPay(ref oUser);


                                if (oInstallation.CURRENCy.CUR_ISO_CODE != oUser.CURRENCy.CUR_ISO_CODE)
                                {
                                    double dChangeFee = 0;

                                    dChangeToApply = GetChangeToApplyFromInstallationCurToUserCur(oInstallation, oUser);
                                    if (dChangeToApply < 0)
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                        Logger_AddLogMessage(string.Format("QueryFinePaymentQuantity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }

                                    NumberFormatInfo numberFormatProvider = new NumberFormatInfo();
                                    numberFormatProvider.NumberDecimalSeparator = ".";
                                    parametersOut["chng"] = dChangeToApply.ToString(numberFormatProvider);

                                    int iQChange = ChangeQuantityFromInstallationCurToUserCur(iQ, dChangeToApply, oInstallation, oUser, out dChangeFee);

                                    parametersOut["qch"] = iQChange.ToString();

                                    iQFEEChange = ChangeQuantityFromInstallationCurToUserCur(iQFEE, dChangeToApply, oInstallation, oUser, out dChangeFee);
                                    iQSubTotalChange = ChangeQuantityFromInstallationCurToUserCur(iQSubTotal, dChangeToApply, oInstallation, oUser, out dChangeFee);
                                    iQTotalChange = ChangeQuantityFromInstallationCurToUserCur(iQTotal, dChangeToApply, oInstallation, oUser, out dChangeFee);

                                    parametersOut["qch_fee"] = iQFEEChange;
                                    parametersOut["qch_subtotal"] = iQSubTotalChange;
                                    parametersOut["qch_total"] = iQTotalChange;
                                    if (iMaxAmountAllowedToPay.HasValue)
                                    {
                                        if (iMaxAmountAllowedToPay < iQTotalChange)
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Not_Enough_Balance);
                                            Logger_AddLogMessage(string.Format("QueryFinePaymentQuantity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }
                                    }

                                }
                                else
                                {
                                    if (iMaxAmountAllowedToPay.HasValue)
                                    {
                                        if (iMaxAmountAllowedToPay < iQTotal)
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Not_Enough_Balance);
                                            Logger_AddLogMessage(string.Format("QueryFinePaymentQuantity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }
                                    }


                                }


                                DateTime? dtUTCDateTime = geograficAndTariffsRepository.ConvertInstallationDateTimeToUTC(oInstallation.INS_ID, dtinstDateTime.Value);

                                decimal? dAuthId = null;
                                if (parametersOut["AuthId"] != null)
                                {
                                    try
                                    {
                                        decimal dTryAuthId = Convert.ToDecimal(parametersOut["AuthId"].ToString());
                                        dAuthId = dTryAuthId;
                                    }
                                    catch
                                    {
                                        dAuthId = null;
                                    }
                                }
                                
                                string sExtGrpId = "";
                                decimal? dGrpId = null;
                                if (parametersOut["ExtGrpId"] != null) sExtGrpId = parametersOut["ExtGrpId"].ToString();
                                if (!string.IsNullOrWhiteSpace(sExtGrpId))
                                {
                                    GROUP oGroup = null;
                                    DateTime? dtGroupDateTime = null;
                                    if (geograficAndTariffsRepository.getGroupByExtOpsId(sExtGrpId, ref oGroup, ref dtGroupDateTime))
                                    {
                                        dGrpId = oGroup.GRP_ID;
                                    }
                                }

                                /*decimal dVAT1;
                                decimal dVAT2;
                                decimal dPercFEE;
                                int iPercFEETopped;
                                int iFixedFEE;
                                int? iPaymentTypeId = null;
                                int? iPaymentSubtypeId = null;
                                if (oUser.CUSTOMER_PAYMENT_MEAN != null)
                                {
                                    iPaymentTypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAT_ID;
                                    iPaymentSubtypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAST_ID;
                                }
                                if (!customersRepository.GetFinantialParams(oUser, oInstallation.INS_ID, (PaymentSuscryptionType) oUser.USR_SUSCRIPTION_TYPE, iPaymentTypeId, iPaymentSubtypeId, ChargeOperationsType.TicketPayment,
                                                                                 out dVAT1, out dVAT2, out dPercFEE, out iPercFEETopped, out iFixedFEE))
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("QueryFinePaymentQuantity::Error getting installation FEE parameters: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }*/

                                if (!customersRepository.AddSessionTicketPaymentInfo(ref oUser, parametersIn["SessionID"].ToString(),
                                                dtinstDateTime.Value, dtUTCDateTime.Value, strFineNumber,
                                                parametersOut["lp"].ToString(), parametersOut["ta"].ToString(), parametersOut["dta"].ToString(),
                                                iQ,
                                                dChangeToApply, dAuthId, dGrpId,
                                                dVAT1, dVAT2, dPercFEE, iPercFEETopped, iFixedFEE, strSector, strEnforcUser))
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("QueryFinePaymentQuantity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                            }

                            parametersOut["utc_offset"] = geograficAndTariffsRepository.GetInstallationUTCOffSetInMinutes(oInstallation.INS_ID);

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("QueryFinePaymentQuantity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("QueryFinePaymentQuantity: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }

                            oUser = null;


                        }
                    }

                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("QueryFinePaymentQuantity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("QueryFinePaymentQuantity::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                

            }

            return xmlOut;

        }



        [WebMethod]
        public string QueryFinePaymentQuantityJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("QueryFinePaymentQuantityJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = QueryFinePaymentQuantity(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;


                //Logger_AddLogMessage(string.Format("QueryFinePaymentQuantityJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("QueryFinePaymentQuantityJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);
                

            }

            return jsonOut;
        }



        /*
         *  ConfirmFinePayment 
         *  
        <ipark_in>
            <u>user login or generated user id for anonymous operations</u>
	        <f>fine number</f>
	        <d>date in format hh24missddMMYY</d>
	        <q>quantity paid in Cents for the fine</q>
            <tid>Paypal transaction Id for payments with anonymous operations</tid>
            <ah>authentication hash</ah>
        </ ipark _in>
         * 
         
         * 
        Result of the method:
        Result: is an integer containing a Boolean value. 0 if an error has occurred
         * saving the operation or 1 if the operation has been stored correctly.      
         *
         */
        [WebMethod]
        public string ConfirmFinePayment(string xmlIn)
        {
            string xmlOut = "";
            string strLockDictionaryString = "";

            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("ConfirmFinePayment: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                          (parametersIn["SessionID"] == null) ||
                          (parametersIn["cityID"] == null) ||
                          (parametersIn["f"] == null) ||
                          (parametersIn["d"] == null)||
                          (parametersIn["q"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("ConfirmFinePayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString,strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("ConfirmFinePayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            strLockDictionaryString = parametersIn["u"].ToString();
                            if (ExistConfirmLockInformation(strLockDictionaryString))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_ConfirmOperationAlreadyExecuting);
                                Logger_AddLogMessage(string.Format("ConfirmRecharge::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;

                            }
                            else
                            {


                                DateTime dt;
                                try
                                {
                                    dt = DateTime.ParseExact(parametersIn["d"].ToString(), "HHmmssddMMyy",
                                      CultureInfo.InvariantCulture);
                                }
                                catch
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("ConfirmFinePayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;

                                }

                                int iQuantity;
                                try
                                {
                                    iQuantity = Int32.Parse(parametersIn["q"].ToString(), CultureInfo.InvariantCulture);
                                }
                                catch
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("ConfirmFinePayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;

                                }


                                USER oUser = null;
                                string strAppVersion = "";
                                rt = GetUserData(ref oUser, parametersIn, out strAppVersion);

                                if (rt != ResultType.Result_OK)
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(rt);
                                    Logger_AddLogMessage(string.Format("ConfirmFinePayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }

                                decimal? dInstallationId = null;

                                try
                                {
                                    decimal dTryInstallationId = Convert.ToDecimal(parametersIn["cityID"].ToString());
                                    dInstallationId = dTryInstallationId;
                                }
                                catch
                                {
                                    dInstallationId = null;
                                }

                                decimal? dLatitude = null;
                                decimal? dLongitude = null;
                                GetLatLon(parametersIn, out dLatitude, out dLongitude);

                                INSTALLATION oInstallation = null;
                                DateTime? dtinstDateTime = null;
                                decimal? dLatitudeInst = null;
                                decimal? dLongitudeInst = null;

                                if (!geograficAndTariffsRepository.getInstallation(dInstallationId,
                                                                             dLatitudeInst,
                                                                             dLongitudeInst,
                                                                             ref oInstallation,
                                                                             ref dtinstDateTime))
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_City);
                                    Logger_AddLogMessage(string.Format("ConfirmFinePayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }


                                string strFineNumber = parametersIn["f"].ToString();
                                strFineNumber = strFineNumber.Trim();


                                string strPlate = "";
                                string strArticleType = "";
                                string strArticleDescription = "";
                                double dChangeToApply = 1.0;
                                decimal? dAuthId = null;
                                decimal? dGrpId = null;
                                DateTime dtSavedInstallationTime = DateTime.UtcNow;
                                ChargeOperationsType operationType = ChargeOperationsType.TicketPayment;
                                decimal dPercVAT1;
                                decimal dPercVAT2;
                                decimal dPercFEE;
                                int iPercFEETopped;
                                int iFixedFEE;
                                int iPartialVAT1;
                                int iPartialPercFEE;
                                int iPartialFixedFEE;
                                int iPartialPercFEEVAT;
                                int iPartialFixedFEEVAT;
                                int iTotalQuantity;
                                string strSector = "";
                                string strEnforcUSer = "";
                                

                                if (!customersRepository.CheckSessionTicketPaymentInfo(ref oUser, parametersIn["SessionID"].ToString(), ref strFineNumber, iQuantity,
                                        out strPlate, out strArticleType, out strArticleDescription, out dtSavedInstallationTime, out dChangeToApply, out dAuthId, out dGrpId,
                                        out dPercVAT1, out dPercVAT2, out dPercFEE, out iPercFEETopped, out iFixedFEE,  out strSector, out strEnforcUSer))
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_OperationExpired);
                                    Logger_AddLogMessage(string.Format("ConfirmFinePayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }

                                GROUP oGroup = null;
                                DateTime? drGroupDateTime = null;
                                if (dGrpId.HasValue)
                                {
                                    if (geograficAndTariffsRepository.getGroup(dGrpId, ref oGroup, ref drGroupDateTime))
                                    {
                                    }
                                }

                                parametersOut = new SortedList();
                                parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();


                                int iCurrencyChargedQuantity = 0;
                                decimal dTicketPaymentID = -1;
                                string str3rdPartyOpNum = "";
                                decimal? dRechargeId = null;
                                bool bRestoreBalanceInCaseOfRefund = true;
                                int? iBalanceAfterRecharge = null;
                                DateTime? dtUTCInsertionDate = null;

                                var session = oUser.MOBILE_SESSIONs.Where(r => r.MOSE_SESSIONID == parametersIn["SessionID"].ToString()
                                                                  && r.MOSE_USR_ID == oUser.USR_ID).First();

                                iTotalQuantity = customersRepository.CalculateFEE(iQuantity, dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE);

                                rt = ChargeFinePayment(strFineNumber, dChangeToApply, iQuantity, dtSavedInstallationTime, strPlate, strArticleType, strArticleDescription,
                                                        oInstallation, ref oUser, session.MOSE_OS.Value, dLatitude, dLongitude, strAppVersion, dGrpId,
                                                        dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE,
                                                        iPartialVAT1, iPartialPercFEE, iPartialFixedFEE, iTotalQuantity, strSector, strEnforcUSer,
                                                        ref parametersOut, out iCurrencyChargedQuantity, out dTicketPaymentID, out dtUTCInsertionDate, out dRechargeId,
                                                        out iBalanceAfterRecharge, out bRestoreBalanceInCaseOfRefund);

                                if (rt != ResultType.Result_OK)
                                {
                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(rt);
                                    Logger_AddLogMessage(string.Format("ConfirmFinePayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }

                                parametersOut["operationid"] = dTicketPaymentID;

                                long lEllapsedTime = 0;

                                if ((oInstallation.INS_OPT_FINECONFIRM_MODE ?? 0) == 0)
                                {
                                    ThirdPartyFine oThirdPartyFine = new ThirdPartyFine();

                                    switch ((ConfirmFineWSSignatureType)oInstallation.INS_FINE_CONFIRM_WS_SIGNATURE_TYPE)
                                    {
                                        case ConfirmFineWSSignatureType.cfst_gtechna:
                                            {
                                                rt = oThirdPartyFine.GtechnaConfirmFinePayment(1,strFineNumber, dtSavedInstallationTime, iQuantity, dTicketPaymentID,
                                                                                               oInstallation, ref parametersOut, out str3rdPartyOpNum, out lEllapsedTime);
                                            }
                                            break;
                                        case ConfirmFineWSSignatureType.cfst_standard:
                                            {
                                                rt = oThirdPartyFine.StandardConfirmFinePayment(1, strFineNumber, dtSavedInstallationTime, iQuantity, oUser, dTicketPaymentID,
                                                                                                oInstallation, ref parametersOut, out str3rdPartyOpNum, out lEllapsedTime);
                                            }
                                            break;
                                        case ConfirmFineWSSignatureType.cfst_eysa:
                                            {
                                                rt = oThirdPartyFine.EysaConfirmFinePayment(1, strFineNumber, dtSavedInstallationTime, iQuantity, oUser,
                                                                                            oInstallation, ref parametersOut, out str3rdPartyOpNum, out lEllapsedTime);
                                            }
                                            break;
                                        case ConfirmFineWSSignatureType.cfst_madidplatform:
                                            {
                                                rt = oThirdPartyFine.MadridPlatformConfirmFinePayment(1, strFineNumber, dtSavedInstallationTime,dtUTCInsertionDate.Value, iQuantity, oUser,
                                                                                                      oInstallation, dTicketPaymentID, dAuthId ?? 0, oGroup, ref parametersOut, out str3rdPartyOpNum, out lEllapsedTime);
                                            }
                                            break;
                                        case ConfirmFineWSSignatureType.cfst_picbilbao:
                                            {
                                                rt = oThirdPartyFine.PICBilbaoConfirmFinePayment(1, strFineNumber, dtSavedInstallationTime, iQuantity, dTicketPaymentID, strPlate, strArticleType, oUser,
                                                                                            oInstallation, ref parametersOut, out str3rdPartyOpNum, out lEllapsedTime);
                                            }
                                            break;

                                        case ConfirmFineWSSignatureType.cfst_internal:
                                            rt = ResultType.Result_Error_Generic;
                                            parametersOut["r"] = Convert.ToInt32(rt).ToString();
                                            break;
                                        case ConfirmFineWSSignatureType.cfst_test:
                                            rt = ResultType.Result_OK;
                                            parametersOut["r"] = Convert.ToInt32(rt).ToString();
                                            break;
                                        default:
                                            rt = ResultType.Result_Error_Generic;
                                            parametersOut["r"] = Convert.ToInt32(rt).ToString();
                                            break;

                                    }
                                }
                                else
                                {
                                    if ((FineWSSignatureType)oInstallation.INS_FINE_CONFIRM_WS_SIGNATURE_TYPE == FineWSSignatureType.fst_madidplatform)
                                    {
                                        if (dAuthId.HasValue) str3rdPartyOpNum = dAuthId.Value.ToString();
                                    }
                                }

                                if (rt != ResultType.Result_OK)
                                {
                                    ResultType rtRefund = RefundChargeFinePayment(ref oUser, dTicketPaymentID, dRechargeId, bRestoreBalanceInCaseOfRefund);
                                    if (rtRefund == ResultType.Result_OK)
                                    {
                                        Logger_AddLogMessage(string.Format("ConfirmFinePayment::Payment Refund of {0}", iCurrencyChargedQuantity), LogLevels.logERROR);
                                    }
                                    else
                                    {
                                        Logger_AddLogMessage(string.Format("ConfirmFinePayment::Error in Payment Refund: {0}", rtRefund.ToString()), LogLevels.logERROR);
                                    }


                                    DeleteConfirmLockInformation(strLockDictionaryString);
                                    xmlOut = GenerateXMLErrorResult(rt);
                                    Logger_AddLogMessage(string.Format("ConfirmFinePayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                                else
                                {
                                    if (str3rdPartyOpNum.Length > 0)
                                    {
                                        customersRepository.UpdateThirdPartyIDInFinePayment(ref oUser, 1, dTicketPaymentID, str3rdPartyOpNum);
                                    }



                                    if (dRechargeId != null)
                                    {
                                        customersRepository.ConfirmRecharge(ref oUser, dRechargeId.Value);

                                        try
                                        {


                                            CUSTOMER_PAYMENT_MEANS_RECHARGE oRecharge = null;
                                            if (customersRepository.GetRechargeData(ref oUser, dRechargeId.Value, out oRecharge))
                                            {
                                                //if ((PaymentSuscryptionType)oRecharge.CUSPMR_SUSCRIPTION_TYPE == PaymentSuscryptionType.pstPrepay)
                                                if ((PaymentSuscryptionType)oUser.USR_SUSCRIPTION_TYPE.Value == PaymentSuscryptionType.pstPrepay)
                                                {
                                                    string culture = oUser.USR_CULTURE_LANG;
                                                    CultureInfo ci = new CultureInfo(culture);
                                                    Thread.CurrentThread.CurrentUICulture = ci;
                                                    Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(ci.Name);

                                                    iQuantity = oRecharge.CUSPMR_AMOUNT;
                                                    dPercVAT1 = oRecharge.CUSPMR_PERC_VAT1 ?? 0;
                                                    dPercVAT2 = oRecharge.CUSPMR_PERC_VAT2 ?? 0;
                                                    dPercFEE = oRecharge.CUSPMR_PERC_FEE ?? 0;
                                                    iPercFEETopped = (int)(oRecharge.CUSPMR_PERC_FEE_TOPPED ?? 0);
                                                    iFixedFEE = (int)(oRecharge.CUSPMR_FIXED_FEE ?? 0);

                                                    iTotalQuantity = customersRepository.CalculateFEE(iQuantity, dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE, out iPartialPercFEEVAT, out iPartialFixedFEEVAT);

                                                    int iQFEE = Convert.ToInt32(Math.Round(iQuantity * dPercFEE, MidpointRounding.AwayFromZero));
                                                    if (iPercFEETopped > 0 && iQFEE > iPercFEETopped) iQFEE = iPercFEETopped;
                                                    iQFEE += iFixedFEE;
                                                    int iQVAT = iPartialVAT1 + iPartialPercFEEVAT + iPartialFixedFEEVAT;
                                                    int iQSubTotal = iQuantity + iQFEE;

                                                    int iLayout = 0;
                                                    if (iQFEE != 0 || iQVAT != 0)
                                                    {
                                                        OPERATOR oOperator = customersRepository.GetDefaultOperator();
                                                        if (oOperator != null) iLayout = oOperator.OPR_FEE_LAYOUT;
                                                    }


                                                    string sLayoutSubtotal = "";
                                                    string sLayoutTotal = "";

                                                    string sCurIsoCode = infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oRecharge.CUSPMR_CUR_ID));

                                                    if (iLayout == 2)
                                                    {
                                                        sLayoutSubtotal = string.Format(ResourceExtension.GetLiteral("Email_LayoutSubtotal"),
                                                                                        string.Format("{0:0.00} {1}", Convert.ToDouble(iQSubTotal) / 100, sCurIsoCode),
                                                                                        (oRecharge.CUSPMR_PERC_VAT1 != 0 ? string.Format("{0:0.00}% ", oRecharge.CUSPMR_PERC_VAT1 * 100) : "") +
                                                                                        (oRecharge.CUSPMR_PERC_VAT2 != 0 && oRecharge.CUSPMR_PERC_VAT1 != oRecharge.CUSPMR_PERC_VAT2 ? string.Format("{0:0.00}%", oRecharge.CUSPMR_PERC_VAT2 * 100) : ""),
                                                                                        string.Format("{0:0.00} {1}", Convert.ToDouble(iQVAT) / 100, sCurIsoCode));
                                                    }
                                                    else if (iLayout == 1)
                                                    {
                                                        sLayoutTotal = string.Format(ResourceExtension.GetLiteral("Email_LayoutTotal"),
                                                                                     string.Format("{0:0.00} {1}", Convert.ToDouble(iQuantity) / 100, sCurIsoCode),
                                                                                     string.Format("{0:0.00} {1}", Convert.ToDouble(iQFEE) / 100, sCurIsoCode),
                                                                                     (oRecharge.CUSPMR_PERC_VAT1 != 0 ? string.Format("{0:0.00}% ", oRecharge.CUSPMR_PERC_VAT1 * 100) : "") +
                                                                                     (oRecharge.CUSPMR_PERC_VAT2 != 0 && oRecharge.CUSPMR_PERC_VAT1 != oRecharge.CUSPMR_PERC_VAT2 ? string.Format("{0:0.00}%", oRecharge.CUSPMR_PERC_VAT2 * 100) : ""),
                                                                                     string.Format("{0:0.00} {1}", Convert.ToDouble(iQVAT) / 100, sCurIsoCode));
                                                    }

                                                  



                                                    string strRechargeEmailSubject = ResourceExtension.GetLiteral("ConfirmAutomaticRecharge_EmailHeader");
                                                    /*
                                                        ID: {0}<br>
                                                     *  Fecha de recarga: {1:HH:mm:ss dd/MM/yyyy}<br>
                                                     *  Cantidad Recargada: {2} 
                                                     */
                                                    string strRechargeEmailBody = string.Format(ResourceExtension.GetLiteral("ConfirmRecharge_EmailBody"),
                                                        oRecharge.CUSPMR_ID,
                                                        oRecharge.CUSPMR_DATE,
                                                        string.Format("{0:0.00} {1}", Convert.ToDouble(oRecharge.CUSPMR_TOTAL_AMOUNT_CHARGED) / 100,
                                                                                      infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oRecharge.CUSPMR_CUR_ID))),
                                                        string.Format("{0:0.00} {1}", Convert.ToDouble(iBalanceAfterRecharge) / 100,
                                                                            infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID))),
                                                        ConfigurationManager.AppSettings["EmailSignatureURL"],
                                                        ConfigurationManager.AppSettings["EmailSignatureGraphic"],
                                                        sLayoutSubtotal, sLayoutTotal,
                                                        GetEmailFooter(ref oUser));

                                                    SendEmail(ref oUser, strRechargeEmailSubject, strRechargeEmailBody);

                                                }
                                            }
                                        }
                                        catch { }


                                    }


                                    if (oUser.USR_SUSCRIPTION_TYPE == (int)PaymentSuscryptionType.pstPrepay)
                                    {
                                        int iDiscountValue = 0;
                                        string strDiscountCurrencyISOCode = "";

                                        try
                                        {
                                            iDiscountValue = Convert.ToInt32(ConfigurationManager.AppSettings["SuscriptionType1_DiscountValue"]);
                                            strDiscountCurrencyISOCode = ConfigurationManager.AppSettings["SuscriptionType1_DiscountCurrency"];
                                        }
                                        catch
                                        { }


                                        if (iDiscountValue > 0)
                                        {
                                            double dDiscountChangeApplied = 0;
                                            double dDiscountChangeFee = 0;
                                            int iCurrencyDiscountQuantity = ChangeQuantityFromCurToUserCur(iDiscountValue, strDiscountCurrencyISOCode, oUser,
                                                                                                            out dDiscountChangeApplied, out dDiscountChangeFee);

                                            if (iCurrencyDiscountQuantity > 0)
                                            {
                                                DateTime? dtUTCTime = geograficAndTariffsRepository.ConvertInstallationDateTimeToUTC(oInstallation.INS_ID, dtSavedInstallationTime.AddSeconds(1));

                                                customersRepository.AddDiscountToFinePayment(ref oUser, session.MOSE_OS.Value, PaymentSuscryptionType.pstPrepay,
                                                        dtSavedInstallationTime.AddSeconds(1), dtUTCTime.Value, iDiscountValue,
                                                        infraestructureRepository.GetCurrencyFromIsoCode(strDiscountCurrencyISOCode),
                                                        oUser.CURRENCy.CUR_ID, dDiscountChangeApplied, dDiscountChangeFee, iCurrencyDiscountQuantity, dTicketPaymentID,
                                                        dLatitude, dLongitude, strAppVersion);

                                                parametersOut["newbal"] = oUser.USR_BALANCE;

                                            }
                                        }

                                    }

                                }



                                if (Convert.ToInt32(parametersOut["r"]) == Convert.ToInt32(ResultType.Result_OK))
                                {
                                    customersRepository.DeleteSessionTicketPaymentInfo(ref oUser, parametersIn["SessionID"].ToString());


                                    try
                                    {

                                        TICKET_PAYMENT oTicketPayment = null;
                                        if (customersRepository.GetTicketPaymentData(ref oUser, dTicketPaymentID, out oTicketPayment))
                                        {
                                            string culture = oUser.USR_CULTURE_LANG;
                                            CultureInfo ci = new CultureInfo(culture);
                                            Thread.CurrentThread.CurrentUICulture = ci;
                                            Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(ci.Name);

                                            iQuantity = oTicketPayment.TIPA_AMOUNT;
                                            dPercVAT1 = oTicketPayment.TIPA_PERC_VAT1 ?? 0;
                                            dPercVAT2 = oTicketPayment.TIPA_PERC_VAT2 ?? 0;
                                            dPercFEE = oTicketPayment.TIPA_PERC_FEE ?? 0;
                                            iPercFEETopped = (int)(oTicketPayment.TIPA_PERC_FEE_TOPPED ?? 0);
                                            iFixedFEE = (int)(oTicketPayment.TIPA_FIXED_FEE ?? 0);

                                            iTotalQuantity = customersRepository.CalculateFEE(iQuantity, dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE, out iPartialPercFEEVAT, out iPartialFixedFEEVAT);

                                            int iQFEE = Convert.ToInt32(Math.Round(iQuantity * dPercFEE, MidpointRounding.AwayFromZero));
                                            if (iPercFEETopped > 0 && iQFEE > iPercFEETopped) iQFEE = iPercFEETopped;
                                            iQFEE += iFixedFEE;
                                            int iQVAT = iPartialVAT1 + iPartialPercFEEVAT + iPartialFixedFEEVAT;
                                            int iQSubTotal = iQuantity + iQFEE;

                                            int iLayout = 0;
                                            if (iQFEE != 0 || iQVAT != 0)
                                            {
                                                iLayout = oTicketPayment.INSTALLATION.INS_FEE_LAYOUT;
                                            }

                                            string strEnforcUser = "";
                                            string strZone = "";
                                            string strZoneSector = "";

                                            if (parametersIn.ContainsKey("enforcuser"))
                                                strEnforcUser = parametersIn["enforcuser"].ToString();
                                            if (parametersIn.ContainsKey("zone"))
                                                strZone = parametersIn["zone"].ToString();
                                            if (parametersIn.ContainsKey("sector"))
                                                strZoneSector = parametersIn["sector"].ToString();

                                            string sLayoutSubtotal = "";
                                            string sLayoutTotal = "";

                                            if (iLayout == 2)
                                            {
                                                sLayoutSubtotal = string.Format(ResourceExtension.GetLiteral("Email_LayoutSubtotal"),
                                                                                string.Format("{0:0.00} {1}", Convert.ToDouble(iQSubTotal) / 100, oTicketPayment.CURRENCy.CUR_ISO_CODE),
                                                                                (oTicketPayment.TIPA_PERC_VAT1 != 0 ? string.Format("{0:0.00}% ", oTicketPayment.TIPA_PERC_VAT1 * 100) : "") +
                                                                                (oTicketPayment.TIPA_PERC_VAT2 != 0 && oTicketPayment.TIPA_PERC_VAT1 != oTicketPayment.TIPA_PERC_VAT2 ? string.Format("{0:0.00}%", oTicketPayment.TIPA_PERC_VAT2 * 100) : ""),
                                                                                string.Format("{0:0.00} {1}", Convert.ToDouble(iQVAT) / 100, oTicketPayment.CURRENCy.CUR_ISO_CODE));
                                            }
                                            else if (iLayout == 1)
                                            {
                                                sLayoutTotal = string.Format(ResourceExtension.GetLiteral("Email_LayoutTotal"),
                                                                             string.Format("{0:0.00} {1}", Convert.ToDouble(iQuantity) / 100, oTicketPayment.CURRENCy.CUR_ISO_CODE),
                                                                             string.Format("{0:0.00} {1}", Convert.ToDouble(iQFEE) / 100, oTicketPayment.CURRENCy.CUR_ISO_CODE),
                                                                             (oTicketPayment.TIPA_PERC_VAT1 != 0 ? string.Format("{0:0.00}% ", oTicketPayment.TIPA_PERC_VAT1 * 100) : "") +
                                                                             (oTicketPayment.TIPA_PERC_VAT2 != 0 && oTicketPayment.TIPA_PERC_VAT1 != oTicketPayment.TIPA_PERC_VAT2 ? string.Format("{0:0.00}%", oTicketPayment.TIPA_PERC_VAT2 * 100) : ""),
                                                                             string.Format("{0:0.00} {1}", Convert.ToDouble(iQVAT) / 100, oTicketPayment.CURRENCy.CUR_ISO_CODE));
                                            }

                                            string strTicketPaymentEmailSubject = ResourceExtension.GetLiteral("ConfirmTicketPayment_EmailHeader");
                                            /*
                                             ID: {0}<br>
                                             Expediente: {1}<br>
                                             Matr&iacute;cula: {2}<br>
                                             Ciudad: {3}<br>
                                             Fecha de anulaci&oacute;n: {4:HH:mm:ss dd/MM/yyyy}<br>
                                             Artículo: {5}<br>
                                             Cantidad Pagada: {6} <br><br>
                                             */
                                            INSTALLATION oInst = oTicketPayment.INSTALLATION;
                                            string strTicketPaymentEmailBody = string.Format(ResourceExtension.GetLiteral("ConfirmTicketPayment_EmailBody"),
                                                oTicketPayment.TIPA_ID,
                                                oTicketPayment.TIPA_TICKET_NUMBER.Substring(0,8),
                                                oTicketPayment.TIPA_PLATE_STRING,
                                                oTicketPayment.INSTALLATION.INS_DESCRIPTION,
                                                oTicketPayment.TIPA_DATE,
                                                oTicketPayment.TIPA_TICKET_DATA,
                                                (oTicketPayment.TIPA_AMOUNT_CUR_ID == oTicketPayment.TIPA_BALANCE_CUR_ID ?
                                                string.Format("{0:0.00} {1}", Convert.ToDouble(oTicketPayment.TIPA_TOTAL_AMOUNT) / 100, oTicketPayment.CURRENCy.CUR_ISO_CODE) :
                                                string.Format("{0:0.00} {1} / {2:0.00} {3}", Convert.ToDouble(oTicketPayment.TIPA_TOTAL_AMOUNT) / 100, oTicketPayment.CURRENCy.CUR_ISO_CODE,
                                                                                             Convert.ToDouble(oTicketPayment.TIPA_FINAL_AMOUNT) / 100, oTicketPayment.CURRENCy1.CUR_ISO_CODE)),
                                                (oTicketPayment.TIPA_SUSCRIPTION_TYPE == (int)PaymentSuscryptionType.pstPrepay || oUser.USR_BALANCE > 0) ?
                                                        string.Format(ResourceExtension.GetLiteral("Confirm_EmailBody_Balance"), string.Format("{0:0.00} {1}", 
                                                                    Convert.ToDouble(oUser.USR_BALANCE) / 100,
                                                                    infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID)))) : "",
                                                ConfigurationManager.AppSettings["EmailSignatureURL"],
                                                ConfigurationManager.AppSettings["EmailSignatureGraphic"],
                                                sLayoutSubtotal,
                                                sLayoutTotal,
                                                GetEmailFooter(ref oInst), strZone, strZoneSector, strEnforcUser);


                                            SendEmail(ref oUser, strTicketPaymentEmailSubject, strTicketPaymentEmailBody);
                                        }
                                    }
                                    catch { }


                                }


                                if ((oInstallation.INS_OPT_FINECONFIRM_MODE ?? 0) == 0)
                                {
                                    bool bConfirmed1 = true;
                                    bool bConfirmed2 = true;
                                    bool bConfirmed3 = true;

                                    ThirdPartyFine oThirdPartyFine = new ThirdPartyFine();


                                    if (oInstallation.INS_FINE_CONFIRM_WS2_SIGNATURE_TYPE.HasValue)
                                    {
                                        SortedList parametersOutTemp = new SortedList();

                                        switch ((ConfirmFineWSSignatureType)oInstallation.INS_FINE_CONFIRM_WS2_SIGNATURE_TYPE)
                                        {
                                            case ConfirmFineWSSignatureType.cfst_gtechna:
                                                {
                                                    rt = oThirdPartyFine.GtechnaConfirmFinePayment(2, strFineNumber, dtSavedInstallationTime, iQuantity, dTicketPaymentID,
                                                                                                   oInstallation, ref parametersOutTemp, out str3rdPartyOpNum, out lEllapsedTime);
                                                }
                                                break;
                                            case ConfirmFineWSSignatureType.cfst_standard:
                                                {
                                                    rt = oThirdPartyFine.StandardConfirmFinePayment(2, strFineNumber, dtSavedInstallationTime, iQuantity, oUser, dTicketPaymentID,
                                                                                                    oInstallation, ref parametersOutTemp, out str3rdPartyOpNum, out lEllapsedTime);
                                                }
                                                break;
                                            case ConfirmFineWSSignatureType.cfst_eysa:
                                                {
                                                    rt = oThirdPartyFine.EysaConfirmFinePayment(2, strFineNumber, dtSavedInstallationTime, iQuantity, oUser,
                                                                                                oInstallation, ref parametersOutTemp, out str3rdPartyOpNum, out lEllapsedTime);
                                                }
                                                break;
                                            case ConfirmFineWSSignatureType.cfst_madidplatform:
                                                {
                                                    rt = oThirdPartyFine.MadridPlatformConfirmFinePayment(2, strFineNumber, dtSavedInstallationTime, dtUTCInsertionDate.Value, iQuantity, oUser,
                                                                                                          oInstallation, dTicketPaymentID, dAuthId ?? 0, oGroup, ref parametersOutTemp, out str3rdPartyOpNum, out lEllapsedTime);
                                                }
                                                break;
                                            case ConfirmFineWSSignatureType.cfst_picbilbao:
                                                {
                                                    rt = oThirdPartyFine.PICBilbaoConfirmFinePayment(2, strFineNumber, dtSavedInstallationTime, iQuantity, dTicketPaymentID, strPlate, strArticleType, oUser,
                                                                                                oInstallation, ref parametersOutTemp, out str3rdPartyOpNum, out lEllapsedTime);
                                                }
                                                break;

                                            case ConfirmFineWSSignatureType.cfst_internal:
                                                rt = ResultType.Result_Error_Generic;
                                                break;
                                            case ConfirmFineWSSignatureType.cfst_test:
                                                rt = ResultType.Result_OK;
                                                break;
                                            default:
                                                rt = ResultType.Result_Error_Generic;
                                                break;

                                        }

                                        if (rt != ResultType.Result_OK)
                                        {
                                            bConfirmed2 = false;
                                            Logger_AddLogMessage(string.Format("ConfirmFinePayment::Error in WS 2 Confirmation"), LogLevels.logWARN);
                                        }
                                        else
                                        {
                                            if (str3rdPartyOpNum.Length > 0)
                                            {
                                                customersRepository.UpdateThirdPartyIDInFinePayment(ref oUser, 2, dTicketPaymentID, str3rdPartyOpNum);
                                            }

                                        }
                                    }

                                    if (oInstallation.INS_FINE_CONFIRM_WS3_SIGNATURE_TYPE.HasValue)
                                    {
                                        SortedList parametersOutTemp = new SortedList();
                                        switch ((ConfirmFineWSSignatureType)oInstallation.INS_FINE_CONFIRM_WS3_SIGNATURE_TYPE)
                                        {
                                            case ConfirmFineWSSignatureType.cfst_gtechna:
                                                {
                                                    rt = oThirdPartyFine.GtechnaConfirmFinePayment(3, strFineNumber, dtSavedInstallationTime, iQuantity, dTicketPaymentID,
                                                                                                   oInstallation, ref parametersOutTemp, out str3rdPartyOpNum, out lEllapsedTime);
                                                }
                                                break;
                                            case ConfirmFineWSSignatureType.cfst_standard:
                                                {
                                                    rt = oThirdPartyFine.StandardConfirmFinePayment(3, strFineNumber, dtSavedInstallationTime, iQuantity, oUser, dTicketPaymentID,
                                                                                                    oInstallation, ref parametersOutTemp, out str3rdPartyOpNum, out lEllapsedTime);
                                                }
                                                break;
                                            case ConfirmFineWSSignatureType.cfst_eysa:
                                                {
                                                    rt = oThirdPartyFine.EysaConfirmFinePayment(3, strFineNumber, dtSavedInstallationTime, iQuantity, oUser,
                                                                                                oInstallation, ref parametersOutTemp, out str3rdPartyOpNum, out lEllapsedTime);
                                                }
                                                break;
                                            case ConfirmFineWSSignatureType.cfst_madidplatform:
                                                {
                                                    rt = oThirdPartyFine.MadridPlatformConfirmFinePayment(3, strFineNumber, dtSavedInstallationTime, dtUTCInsertionDate.Value, iQuantity, oUser,
                                                                                                          oInstallation, dTicketPaymentID, dAuthId ?? 0, oGroup, ref parametersOutTemp, out str3rdPartyOpNum, out lEllapsedTime);
                                                }
                                                break;
                                            case ConfirmFineWSSignatureType.cfst_picbilbao:
                                                {
                                                    rt = oThirdPartyFine.PICBilbaoConfirmFinePayment(3, strFineNumber, dtSavedInstallationTime, iQuantity, dTicketPaymentID, strPlate, strArticleType, oUser,
                                                                                                oInstallation, ref parametersOutTemp, out str3rdPartyOpNum, out lEllapsedTime);
                                                }
                                                break;
                                            case ConfirmFineWSSignatureType.cfst_internal:
                                                rt = ResultType.Result_Error_Generic;                                                
                                                break;
                                            case ConfirmFineWSSignatureType.cfst_test:
                                                rt = ResultType.Result_OK;
                                                break;
                                            default:
                                                rt = ResultType.Result_Error_Generic;
                                                break;

                                        }

                                        if (rt != ResultType.Result_OK)
                                        {
                                            bConfirmed3 = false;
                                            Logger_AddLogMessage(string.Format("ConfirmFinePayment::Error in WS 3 Confirmation"), LogLevels.logWARN);
                                        }
                                        else
                                        {
                                            if (str3rdPartyOpNum.Length > 0)
                                            {
                                                customersRepository.UpdateThirdPartyIDInFinePayment(ref oUser, 3, dTicketPaymentID, str3rdPartyOpNum);
                                            }

                                        }
                                    }


                                    if ((!bConfirmed2) || (!bConfirmed3))
                                    {
                                        customersRepository.UpdateThirdPartyConfirmedInFinePayment(ref oUser, dTicketPaymentID, bConfirmed1, bConfirmed2, bConfirmed3);
                                    }

                                }
                                    

                                parametersOut["utc_offset"] = geograficAndTariffsRepository.GetInstallationUTCOffSetInMinutes(oInstallation.INS_ID);

                                xmlOut = GenerateXMLOuput(parametersOut);

                                if (xmlOut.Length == 0)
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("ConfirmFinePayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                }
                                else
                                {
                                    Logger_AddLogMessage(string.Format("ConfirmFinePayment: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                                }

                                oUser = null;

                            }

                        }
                    }

                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("ConfirmFinePayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }
                
                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("ConfirmFinePayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                

            }

            DeleteConfirmLockInformation(strLockDictionaryString);
            return xmlOut;

        }



        [WebMethod]
        public string ConfirmFinePaymentJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("ConfirmFinePaymentJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = ConfirmFinePayment(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("ConfirmFinePaymentJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("ConfirmFinePaymentJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);
                

            }

            return jsonOut;
        }
        /*
        *  ConfirmUserData
        *  

            xmlIn: xml containing input parameters of the method:
        <ipark_in>
            <fname>First Name</fname >
            <lname>Last Name</lname >
            <dlicense> Driver License / Passport / DNI </dlicense>
            <ccode>Country Code </code>
            <phone>Complete Cell Number</phone >	
            <email> user e-mail </email >	
            <ah>authentication hash</ah>
        </ ipark _in>

        * 
        * 
        <ipark_out>
	        <r>Result of the method</r>
        </ipark_out>

        * 
        * 
        The tag <r> of the method will have these possible values:
        a.	2: Login successful.
        b.	-13: Invalid First Name
        c.	-14: Invalid Last Name.
        d.	-15: Invalid Driver License / Passport / DNI 
        e.	-16: Invalid Country Code
        f.	-17: Invalid Cell Number	
        g.	-18: user e-mail	
        h.	-19 Invalid Input Parameter 
        i.	-20 Missing Input Parameter 
        j.	-21: Cell Number already exists.
        k.	-22: Email already exists.
      
        *
        */

        [WebMethod]
        public string ConfirmUserData(string xmlIn)
        {
            string xmlOut = "";
            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("ConfirmUserData: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    PaymentMeanCreditCardProviderType CCProvider = PaymentMeanCreditCardProviderType.pmccpUndefined;
                    PaymentMeanType paymentType = PaymentMeanType.pmtDebitCreditCard;

                    try
                    {
                        int iPayType = Convert.ToInt32(parametersIn["paymeth"].ToString());
                        paymentType = (PaymentMeanType)iPayType;

                    }
                    catch
                    {
                        Logger_AddLogMessage(string.Format("ConfirmUserData::Invalid Payment Method. Setting to 1 (Credit Card"), LogLevels.logDEBUG); ;
                        paymentType = PaymentMeanType.pmtDebitCreditCard;

                    }


                    try
                    {
                        int iCCProvider = Convert.ToInt32(parametersIn["ccprovider"].ToString());
                        CCProvider = (PaymentMeanCreditCardProviderType)iCCProvider;
                    }
                    catch
                    {
                        Logger_AddLogMessage(string.Format("ConfirmUserData::Invalid ccprovider. Setting to 1(Credit Call)"), LogLevels.logDEBUG);;
                        CCProvider = PaymentMeanCreditCardProviderType.pmccpCreditCall;
                    }
                   
                    if  ((parametersIn["pass"] == null) ||
                        (parametersIn["ccode"] == null) ||
                        (parametersIn["email"] == null) ||
                        (parametersIn["subscription_type"] == null) ||
                        (parametersIn["paymeth"] == null) ||
                        ((CCProvider == PaymentMeanCreditCardProviderType.pmccpCreditCall)&&
                                (paymentType == PaymentMeanType.pmtDebitCreditCard)&&
                                ((parametersIn["ekashu_transaction_id"] == null) ||                                
                                (parametersIn["ccchargedquantity"] == null)))||
                        ((CCProvider == PaymentMeanCreditCardProviderType.pmccpIECISA) &&
                                (paymentType == PaymentMeanType.pmtDebitCreditCard)&&
                                ((parametersIn["iecisa_CF_TicketNumber"] == null) ||
                                (parametersIn["iecisa_CF_AuthCode"] == null) ||
                                (parametersIn["iecisa_CF_TransactionID"] == null) ||
                                (parametersIn["iecisa_TransactionID"] == null) ||                                
                                (parametersIn["iecisa_CF_Result"] == null) ||
                                (parametersIn["iecisa_CF_Token"] == null) ||
                                (parametersIn["iecisa_CF_PAN"] == null) ||
                                (parametersIn["iecisa_GatewayDate"] == null)||
                                (parametersIn["iecisa_CF_ExpirationDate"] == null)||
                                (parametersIn["ccchargedquantity"] == null))) ||
                        ((CCProvider == PaymentMeanCreditCardProviderType.pmccpStripe) &&
                                (paymentType == PaymentMeanType.pmtDebitCreditCard) &&
                                ((parametersIn["stripe_customer_id"] == null) ||
                                (parametersIn["stripe_card_reference"] == null) ||
                                (parametersIn["stripe_card_scheme"] == null) ||
                                (parametersIn["stripe_masked_card_number"] == null) ||
                                (parametersIn["stripe_expires_end_month"] == null) ||
                                (parametersIn["stripe_expires_end_year"] == null) ||
                                (parametersIn["stripe_transaction_id"] == null) ||
                                (parametersIn["stripe_date_time_utc"] == null) ||
                                (parametersIn["ccchargedquantity"] == null))))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("ConfirmUserData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }                    
                    else
                    {

                        string strSignupScreenType=infraestructureRepository.GetParameterValue("SignUpScreenType");
                        SignupScreenType eSignupScreenType = SignupScreenType.Iparkme;

                        if (!string.IsNullOrEmpty(strSignupScreenType))
                        {
                            try
                            {
                                eSignupScreenType = (SignupScreenType)Convert.ToInt32(strSignupScreenType);
                            }
                            catch{}
                        }


                        if (eSignupScreenType == SignupScreenType.Iparkme)
                        {
                            if ((parametersIn["license"] == null) ||
                               (parametersIn["phone"] == null))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                                Logger_AddLogMessage(string.Format("ConfirmUserData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                        }

                        if (eSignupScreenType == SignupScreenType.Iparkme)
                        {
                            if ((string.IsNullOrEmpty(parametersIn["license"].ToString().Trim())) ||
                               (string.IsNullOrEmpty(parametersIn["phone"].ToString().Trim())))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                                Logger_AddLogMessage(string.Format("ConfirmUserData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                        }

                        string strCalculatedHash = CalculateHash(strHashString,strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("ConfirmUserData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            string strCulture = ConfigurationManager.AppSettings["ConfirmUserData_Culture"];
                            if (parametersIn["lang"]!=null)
                            {
                                try
                                {
                                    int iLangIndex = Convert.ToInt32 (parametersIn["lang"].ToString());
                                    if (iLangIndex<=UserDeviceLangs.Length)
                                    {
                                        strCulture = UserDeviceLangs[iLangIndex-1];
                                    }
                                }
                                catch
                                {}


                            }
                            

                           

                            int iCountry = -1;
                            try
                            {
                                iCountry = Convert.ToInt32(parametersIn["ccode"].ToString());
                                string strPrefix = infraestructureRepository.GetCountryTelephonePrefix(iCountry);
                                if (strPrefix.Length == 0)
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Country_Code);
                                    Logger_AddLogMessage(string.Format("ConfirmUserData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                            }
                            catch
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Country_Code);
                                Logger_AddLogMessage(string.Format("ConfirmUserData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }


                            bool bAutoRecharge=false;
                            int? iAutoRechargeAmount=null;
                            int? iAutoRechargeBelow=null;
                            if (parametersIn["autrech"]!=null)
                            {
                                try
                                {
                                    bAutoRecharge = Convert.ToInt32 (parametersIn["autrech"].ToString())==1;

                                    if (bAutoRecharge)
                                    {
                                        if ((parametersIn["autbelow"]!=null)&&(parametersIn["autamo"]!=null))
                                        {

                                            iAutoRechargeAmount = Convert.ToInt32 (parametersIn["autamo"].ToString());
                                            iAutoRechargeBelow = Convert.ToInt32 (parametersIn["autbelow"].ToString());

                                        }
                                        else
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                                            Logger_AddLogMessage(string.Format("ConfirmUserData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;                                            
                                        }

                                    }


                                }
                                catch
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("ConfirmUserData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;                                            
                                            
                                }
                            }


                            PaymentSuscryptionType? suscriptionType = null;
                            string sSuscriptionType = "";
                            RefundBalanceType eRefundBalType= RefundBalanceType.rbtAmount;

                            infraestructureRepository.GetCountryPossibleSuscriptionTypes(iCountry, out sSuscriptionType, out eRefundBalType);

                            try
                            {
                                int iSuscType = Convert.ToInt32(parametersIn["subscription_type"].ToString());
                                if (iSuscType == -1)
                                {
                                    
                                    if (((int)PaymentSuscryptionType.pstPrepay).ToString() == sSuscriptionType)
                                    {
                                        suscriptionType = PaymentSuscryptionType.pstPrepay;
                                    }
                                    else if (((int)PaymentSuscryptionType.pstPerTransaction).ToString() == sSuscriptionType)
                                    {
                                        suscriptionType = PaymentSuscryptionType.pstPerTransaction;
                                    }
                                }
                                else
                                {
                                    suscriptionType = (PaymentSuscryptionType)iSuscType;

                                }

                            }
                            catch
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("ConfirmUserData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }



                            int? iChargedQuantity = null;
                            if ((paymentType == PaymentMeanType.pmtDebitCreditCard) || (paymentType == PaymentMeanType.pmtPaypal))
                            {                               
                                try
                                {
                                    iChargedQuantity = Convert.ToInt32(parametersIn["ccchargedquantity"].ToString());

                                }
                                catch
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("ConfirmUserData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                            }



                            int iOSID = (int)MobileOS.Web;

                            if (parametersIn["OSID"] != null)
                            {
                                try
                                {
                                    iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());                                           
                                }
                                catch { }
                            }

                            int? iUTCOffset = null;


                            if ((parametersIn["date"] != null) && (parametersIn["utc_date"] != null))
                            {

                                DateTime dt;
                                DateTime dtUTC;

                                try
                                {
                                    dt = DateTime.ParseExact(parametersIn["date"].ToString(), "HHmmssddMMyy",
                                      CultureInfo.InvariantCulture);
                                    dtUTC = DateTime.ParseExact(parametersIn["utc_date"].ToString(), "HHmmssddMMyy",
                                      CultureInfo.InvariantCulture);

                                    iUTCOffset = Convert.ToInt32((dtUTC - dt).TotalMinutes + 0.5);

                                }
                                catch
                                {
                                    iUTCOffset = 0;
                                }


                            }
                            else
                            {

                                if (parametersIn["utc_offset"] != null)
                                {
                                    try
                                    {
                                        iUTCOffset = Convert.ToInt32(parametersIn["utc_offset"].ToString());
                                    }
                                    catch { }
                                }
                                else
                                {
                                    iUTCOffset = 0;
                                }
                            }


                            string strfname = "";
                            string strlname = "";
                            string strdlicense = "";
                            string struserstreet = "";
                            int istreetnum = 0;
                            int? iuserstreetflat = null;
                            string struserstate = "";
                            string strusercity = "";
                            string struserpostalcode = "";

                            if (parametersIn["fname"] != null)
                            {
                                strfname = parametersIn["fname"].ToString();
                            }

                            if (parametersIn["lname"] != null)
                            {
                                strlname = parametersIn["lname"].ToString();
                            }

                            if (parametersIn["dlicense"] != null)
                            {
                                strdlicense = parametersIn["dlicense"].ToString();
                            }

                            if (parametersIn["userstreet"] != null)
                            {
                                struserstreet = parametersIn["userstreet"].ToString();
                            }

                            if (parametersIn["userstreetnum"] != null)
                            {
                                try
                                {
                                    istreetnum = Convert.ToInt32(parametersIn["userstreetnum"].ToString());
                                }
                                catch { }
                            }


                            if (parametersIn["userstreetflat"] != null)
                            {
                                try
                                {
                                    iuserstreetflat = Convert.ToInt32(parametersIn["userstreetflat"].ToString());
                                }
                                catch { }
                            }


                            if (parametersIn["userstate"] != null)
                            {
                                struserstate = parametersIn["userstate"].ToString();
                            }

                            if (parametersIn["usercity"] != null)
                            {
                                strusercity = parametersIn["usercity"].ToString();
                            }

                            if (parametersIn["userpostalcode"] != null)
                            {
                                struserpostalcode = parametersIn["userpostalcode"].ToString();
                            }


                            string sAppVersion = "";
                            try
                            {
                                if (parametersIn["appvers"] != null)
                                    sAppVersion = parametersIn["appvers"].ToString();
                                else
                                    sAppVersion = "1.0";
                            }
                            catch
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("ConfirmUserData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }
                            if (!CheckVersionFormat(sAppVersion))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("ConfirmUserData::Error: Invalid app version format: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }
                            ulong ulAppVersion = AppUtilities.AppVersion(sAppVersion);

                            string strSignUpGuid = GenerateNewGuid();

                            string strTel = "";

                            if (parametersIn["phone"] != null)
                            {
                                strTel = parametersIn["phone"].ToString().Trim();
                            }


                            string strUserMustBeActivated = infraestructureRepository.GetParameterValue("UserMustBeActivated");
                            bool bUserMustBeActivated = false;
                            int iNumMaxMinutesForActivation=Int32.MaxValue;

                            if (!string.IsNullOrEmpty(strUserMustBeActivated))
                            {
                                bUserMustBeActivated = (strUserMustBeActivated == "1");
                            }

                            if (bUserMustBeActivated)
                            {
                                bool bDeleteMembership=false;
                                string strNumMaxMinutesForActivation = infraestructureRepository.GetParameterValue("NonActivatedUserUnBlockingTime");
                                try
                                {
                                    iNumMaxMinutesForActivation = Convert.ToInt32(strNumMaxMinutesForActivation);                                        
                                }
                                catch
                                {}

                                customersRepository.DeleteNonActivatedUser(parametersIn["email"].ToString().ToLower().Trim(), iNumMaxMinutesForActivation, out  bDeleteMembership);


                                if (bDeleteMembership)
                                {
                                    FormAuthMemberShip.MembershipService.DeleteUser(parametersIn["email"].ToString().ToLower().Trim());
                                }
                            }


                            USER oUser = new USER
                            {

                                CUSTOMER = new CUSTOMER
                                {
                                    CUS_TYPE = (int)CustomerType.Individual,
                                    CUS_COU_ID = iCountry,
                                    CUS_DOC_ID = strdlicense.ToUpper(),
                                    CUS_DOC_ID_TYPE = 0,//Undefined for now
                                    CUS_NAME = strfname.ToUpper(),
                                    CUS_SURNAME1 = strlname.ToUpper(),
                                    CUS_SURNAME2 = "",
                                    CUS_STREET = struserstreet.ToUpper(),
                                    CUS_STREE_NUMBER = istreetnum,
                                    CUS_LEVEL_NUM = iuserstreetflat,
                                    CUS_DOOR = "",
                                    CUS_LETTER = "",
                                    CUS_STAIR = "",
                                    CUS_CITY = strusercity.ToUpper(),
                                    CUS_STATE = struserstate.ToUpper(),
                                    CUS_ZIPCODE = struserpostalcode.ToUpper(),
                                    CUS_ENABLED = 1,
                                    CUS_INSERT_UTC_DATE = DateTime.UtcNow
                                },

                                USR_COU_ID = iCountry,
                                USR_EMAIL = parametersIn["email"].ToString().ToLower().Trim(),
                                USR_MAIN_TEL_COUNTRY = iCountry,
                                USR_MAIN_TEL = strTel,
                                USR_SECUND_TEL_COUNTRY = null,
                                USR_SECUND_TEL = "",
                                USR_USERNAME =  parametersIn["email"].ToString().ToLower().Trim(),
                                USR_BALANCE = 0,
                                USR_CUR_ID =  infraestructureRepository.GetCountryCurrency(iCountry),
                                USR_CULTURE_LANG = strCulture,
                                USR_ENABLED = 1,
                                USR_INSERT_UTC_DATE = DateTime.UtcNow,
                                USR_SUSCRIPTION_TYPE = (int ?)suscriptionType,
                                USR_REFUND_BALANCE_TYPE = (int)eRefundBalType,
                                USR_UTC_OFFSET = iUTCOffset.Value,
                                USR_PAYMETH = (int)PaymentMeanTypeStatus.pmsWithoutPaymentMean,
                                USR_SIGNUP_OS = iOSID,
                                USR_SIGNUP_GUID = strSignUpGuid,
                                USR_ACTIVATED = bUserMustBeActivated?0:1
                            };





                            if (eSignupScreenType == SignupScreenType.Iparkme)
                            {

                                string strPlateSharing = infraestructureRepository.GetParameterValue("PlateSharing");
                                bool bPlateSharing = true;

                                if (!string.IsNullOrEmpty(strPlateSharing))
                                {
                                    bPlateSharing = (strPlateSharing != "0");
                                }


                                if (bPlateSharing || !customersRepository.IsPlateAssignedToAnotherUser(parametersIn["license"].ToString().ToUpper()))
                                {
                                    oUser.USER_PLATEs.Add(new USER_PLATE
                                    {
                                        USRP_PLATE = parametersIn["license"].ToString().ToUpper(),
                                        USRP_IS_DEFAULT = 1,
                                        USRP_ENABLED = 1
                                    });
                                }
                                else
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Plate_Is_Assigned_To_Another_User);
                                    Logger_AddLogMessage(string.Format("ConfirmUserData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }

                            }

                            if (eSignupScreenType == SignupScreenType.Iparkme)
                            {
                                if (customersRepository.ExistMainTelephone(Convert.ToInt32(oUser.USR_MAIN_TEL_COUNTRY), oUser.USR_MAIN_TEL))
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Mobile_Phone_Already_Exist);
                                    Logger_AddLogMessage(string.Format("ConfirmUserData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                            }


                            if (customersRepository.ExistEmail(oUser.USR_EMAIL))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Email_Already_Exist);
                                Logger_AddLogMessage(string.Format("ConfirmUserData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            string password = parametersIn["pass"].ToString();
                            FormAuthMemberShip.MembershipService.DeleteUser(oUser.USR_USERNAME);

                            DateTime? dtExpDate = null;
                            string strReference = "";
                            string strAuthCode = "";
                            string strAuthResult = "";
                            string strAuthResultDesc = "";
                            string strCardHash = "";
                            string strCardReference = "";
                            string strCardScheme = "";
                            string strGatewayDate = "";
                            string strMaskedCardNumber = "";
                            string strTransactionId = "";
                            string strCFTransactionId = null;
                            string strExpMonth = "";
                            string strExpYear = "";
                            bool bReturnPAN = false;

                            MembershipCreateStatus createStatus = FormAuthMemberShip.MembershipService.CreateUser(oUser.USR_USERNAME, password, oUser.USR_EMAIL);
                            if (createStatus != MembershipCreateStatus.Success)
                            {
                                FormAuthMemberShip.MembershipService.DeleteUser(oUser.USR_USERNAME);
                                createStatus = FormAuthMemberShip.MembershipService.CreateUser(oUser.USR_USERNAME, password, oUser.USR_EMAIL);
                            }

                            if (createStatus != MembershipCreateStatus.Success)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("ConfirmUserData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }
                            else
                            {
                                if (!customersRepository.AddUser(ref oUser, null))
                                {
                                    FormAuthMemberShip.MembershipService.DeleteUser(oUser.USR_USERNAME);
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("ConfirmUserData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                                else
                                {


                                    string culture = oUser.USR_CULTURE_LANG;
                                    CultureInfo ci = new CultureInfo(culture);
                                    Thread.CurrentThread.CurrentUICulture = ci;
                                    Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(ci.Name);

                                    if ((paymentType == PaymentMeanType.pmtDebitCreditCard) || (paymentType == PaymentMeanType.pmtPaypal))
                                    {
                                        CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG oGatewayConfig=null;
                                        if (paymentType == PaymentMeanType.pmtDebitCreditCard)
                                        {
                                            oGatewayConfig = oUser.CURRENCy.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIGs
                                                                  .Where(r => r.CPTGC_ENABLED != 0 && r.CPTGC_PAT_ID == Convert.ToInt32(PaymentMeanType.pmtDebitCreditCard))
                                                                  .FirstOrDefault();
                                        }

                                        decimal? dGatewayConfigId = ((oGatewayConfig != null) ? oGatewayConfig.CPTGC_ID : (decimal?)null);


                                        PaymentMeanRechargeStatus rechargeStatus = PaymentMeanRechargeStatus.Waiting_Commit;


                                        if (CCProvider == PaymentMeanCreditCardProviderType.pmccpCreditCall)
                                        {

                                            strTransactionId = parametersIn["ekashu_transaction_id"].ToString();
                                            if (parametersIn["ekashu_card_reference"] == null)
                                            {
                                                int iRetries = 0;
                                                if (!CardEasePayments.GetMobileTransactionInfo(strTransactionId,
                                                                                         oGatewayConfig.CPTGC_CC_EKASHU_FORM_URL,
                                                                                         oGatewayConfig.CPTGC_CC_TERMINAL_ID,
                                                                                         oGatewayConfig.CPTGC_CC_TRANSACTION_KEY,
                                                                                         oGatewayConfig.CPTGC_CC_CARDEASE_TIMEOUT.Value,
                                                                                        out strReference,
                                                                                        out strAuthCode,
                                                                                        out strAuthResult,
                                                                                        out strCardHash,
                                                                                        out strCardReference,
                                                                                        out strCardScheme,
                                                                                        out strGatewayDate,
                                                                                        out strMaskedCardNumber,
                                                                                        out strExpMonth,
                                                                                        out strExpYear,
                                                                                        out iRetries))
                                                {
                                                    //Result_Error_Getting_Transaction_Parameters = -58,
                                                    //Result_Error_Duplicate_Recharge = -59,
                                                    FormAuthMemberShip.MembershipService.DeleteUser(oUser.USR_USERNAME);
                                                    customersRepository.DeleteUser(ref oUser);
                                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Getting_Transaction_Parameters);
                                                    Logger_AddLogMessage(string.Format("ConfirmUserData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                    return xmlOut;
                                                }

                                                
                                            }
                                            else
                                            {
                                                strReference = parametersIn["ekashu_reference"].ToString();
                                                strAuthCode = parametersIn["ekashu_auth_code"].ToString();
                                                strAuthResult = parametersIn["ekashu_auth_result"].ToString();
                                                strCardHash = parametersIn["ekashu_card_hash"].ToString();
                                                strCardReference = parametersIn["ekashu_card_reference"].ToString();
                                                strCardScheme = parametersIn["ekashu_card_scheme"].ToString();
                                                strGatewayDate = parametersIn["ekashu_date_time_local_fmt"].ToString();
                                                strMaskedCardNumber = parametersIn["ekashu_masked_card_number"].ToString();
                                                strExpMonth = parametersIn["ekashu_expires_end_month"].ToString();
                                                strExpYear = parametersIn["ekashu_expires_end_year"].ToString();
                                            }

                                            if ((strExpMonth.Length == 2) && (strExpYear.Length == 4))
                                            {
                                                dtExpDate = new DateTime(Convert.ToInt32(strExpYear), Convert.ToInt32(strExpMonth), 1).AddMonths(1).AddSeconds(-1);
                                            }

                                            bReturnPAN = true;
                                        }
                                        else if (CCProvider == PaymentMeanCreditCardProviderType.pmccpIECISA)
                                        {


                                            strReference = parametersIn["iecisa_CF_TicketNumber"].ToString();
                                            strAuthCode = parametersIn["iecisa_CF_AuthCode"].ToString();
                                            strAuthResult = parametersIn["iecisa_CF_Result"].ToString(); ;
                                            strCardScheme = "";
                                            strCFTransactionId = parametersIn["iecisa_CF_TransactionID"].ToString();
                                            strTransactionId = parametersIn["iecisa_TransactionID"].ToString(); 


                                            strCardHash = parametersIn["iecisa_CF_Token"].ToString();
                                            strCardReference = parametersIn["iecisa_CF_Token"].ToString();
                                            strMaskedCardNumber = parametersIn["iecisa_CF_PAN"].ToString();
                                            strGatewayDate = DateTime.ParseExact(parametersIn["iecisa_GatewayDate"].ToString(), "HHmmssddMMyyyy",
                                                                    CultureInfo.InvariantCulture).ToString("ddMMyyyyHHmmss");
                                            string strExpDate = parametersIn["iecisa_CF_ExpirationDate"].ToString();                                         

                                            if (strExpDate.Length == 4)
                                            {
                                                dtExpDate = new DateTime(Convert.ToInt32(strExpDate.Substring(2, 2)) + 2000,
                                                                            Convert.ToInt32(strExpDate.Substring(0, 2)), 1).AddMonths(1).AddSeconds(-1);
                                            }
                                            rechargeStatus = PaymentMeanRechargeStatus.Committed;
                                            bReturnPAN = true;

                                        }
                                        else if (CCProvider == PaymentMeanCreditCardProviderType.pmccpStripe)
                                        {

                                            strReference = parametersIn["stripe_transaction_id"].ToString();
                                            strAuthCode = "";
                                            strAuthResult = "succeeded";
                                            strCardHash = parametersIn["stripe_customer_id"].ToString();
                                            strCardReference = parametersIn["stripe_card_reference"].ToString();
                                            strCardScheme = parametersIn["stripe_card_scheme"].ToString();
                                            strGatewayDate = DateTime.ParseExact(parametersIn["stripe_date_time_utc"].ToString(), "HHmmssddMMyy",
                                                                    CultureInfo.InvariantCulture).ToString("ddMMyyyyHHmmss");
                                            strMaskedCardNumber = parametersIn["stripe_masked_card_number"].ToString();
                                            strTransactionId = parametersIn["stripe_transaction_id"].ToString();
                                            strExpMonth = parametersIn["stripe_expires_end_month"].ToString();
                                            strExpYear = parametersIn["stripe_expires_end_year"].ToString();


                                            if ((strExpMonth.Length == 2) && (strExpYear.Length == 4))
                                            {
                                                dtExpDate = new DateTime(Convert.ToInt32(strExpYear), Convert.ToInt32(strExpMonth), 1).AddMonths(1).AddSeconds(-1);
                                            }
                                            bReturnPAN = true;

                                        }



                                        if (!customersRepository.SetUserPaymentMean(ref oUser, infraestructureRepository,
                                                        new CUSTOMER_PAYMENT_MEAN
                                                        {
                                                            CUSPM_PAT_ID = Convert.ToInt32(paymentType),
                                                            CUSPM_PAST_ID = ((Convert.ToInt32(paymentType) == (int)PaymentMeanType.pmtPaypal) && (!bAutoRecharge)) ?
                                                                (int)PaymentMeanSubType.pmstPaypal : (int)PaymentMeanSubType.pmstUndefined,
                                                            CUSPM_CREDIT_CARD_PAYMENT_PROVIDER = (Convert.ToInt32(paymentType) == (int)PaymentMeanType.pmtPaypal) ? -1 :
                                                                                                (int)CCProvider,
                                                            CUSPM_AUTOMATIC_RECHARGE = bAutoRecharge ? 1 : 0,
                                                            CUSPM_AMOUNT_TO_RECHARGE = bAutoRecharge ? iAutoRechargeAmount.Value : (int?)null,
                                                            CUSPM_RECHARGE_WHEN_AMOUNT_IS_LESS = bAutoRecharge ? iAutoRechargeBelow : (int?)null,
                                                            CUSPM_TOKEN_PAYPAL_ID = "",
                                                            CUSPM_CUR_ID = oUser.USR_CUR_ID,
                                                            CUSPM_VALID = 1,
                                                            CUSPM_CPTGC_ID = dGatewayConfigId,
                                                        }))
                                        {
                                            FormAuthMemberShip.MembershipService.DeleteUser(oUser.USR_USERNAME);
                                            customersRepository.DeleteUser(ref oUser);
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                            Logger_AddLogMessage(string.Format("ConfirmUserData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;

                                        }
                                        else
                                        {

                                            if (paymentType != PaymentMeanType.pmtDebitCreditCard)
                                            {
                                                FormAuthMemberShip.MembershipService.DeleteUser(oUser.USR_USERNAME);
                                                customersRepository.DeleteUser(ref oUser);
                                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                                Logger_AddLogMessage(string.Format("ConfirmUserData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                return xmlOut;
                                            }



      

                                            decimal? dRechargeId = null;

                                            bool bAddToBalance = true;
                                            decimal dCurrencyToCharge = oUser.CURRENCy.CUR_ID;




                                            if (suscriptionType == PaymentSuscryptionType.pstPerTransaction)
                                            {
                                                List<string> oPerTransactionParameters = new List<string>();
                                                iChargedQuantity = 0;

                                                oPerTransactionParameters = ConfigurationManager.AppSettings["SuscriptionType2_AddPayMethChargeValue"].ToString().Split(';').ToList();

                                                for (int i = 0; i < oPerTransactionParameters.Count; i++)
                                                {
                                                    if (oPerTransactionParameters[i] == oUser.CURRENCy.CUR_ISO_CODE)
                                                    {
                                                        iChargedQuantity = Convert.ToInt32(oPerTransactionParameters[i + 1]);
                                                        dCurrencyToCharge = oUser.CURRENCy.CUR_ID;
                                                        break;
                                                    }

                                                }

                                                bAddToBalance = false;
                                                rechargeStatus = rechargeStatus == PaymentMeanRechargeStatus.Waiting_Commit ? PaymentMeanRechargeStatus.Waiting_Cancellation : PaymentMeanRechargeStatus.Waiting_Refund;
                                            }
                                            

                                            decimal? dLatitude = null;
                                            decimal? dLongitude = null;
                                            this.GetLatLon(parametersIn, out dLatitude, out dLongitude);

                                            decimal dPercVAT1;
                                            decimal dPercVAT2;
                                            decimal dPercFEE;
                                            int iPercFEETopped;
                                            int iFixedFEE;
                                            int? iPaymentTypeId = null;
                                            int? iPaymentSubtypeId = null;
                                            if (oUser.CUSTOMER_PAYMENT_MEAN != null)
                                            {
                                                iPaymentTypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAT_ID;
                                                iPaymentSubtypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAST_ID;
                                            }

                                           

                                            if (suscriptionType != PaymentSuscryptionType.pstPerTransaction)
                                            {
                                                if (!customersRepository.GetFinantialParams(oUser, "", iPaymentTypeId, iPaymentSubtypeId, ChargeOperationsType.BalanceRecharge,
                                                                                            out dPercVAT1, out dPercVAT2, out dPercFEE, out iPercFEETopped, out iFixedFEE))
                                                {
                                                    FormAuthMemberShip.MembershipService.DeleteUser(oUser.USR_USERNAME);
                                                    customersRepository.DeleteUser(ref oUser);
                                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                                    Logger_AddLogMessage(string.Format("ConfirmUserData::Error: Error getting finantial parameters. xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                    return xmlOut;
                                                }
                                            }
                                            else
                                            {
                                                dPercVAT1 = 0;
                                                dPercVAT2 = 0;
                                                dPercFEE = 0;
                                                iPercFEETopped = 0;
                                                iFixedFEE = 0;
                                            }

                                            int iPartialVAT1=0;
                                            int iPartialPercFEE=0;
                                            int iPartialFixedFEE=0;
                                            int iPartialPercFEEVAT=0;
                                            int iPartialFixedFEEVAT=0;

                                            int iTotalQuantity = iChargedQuantity.Value;

                                            if (suscriptionType != PaymentSuscryptionType.pstPerTransaction)
                                            {
                                                iTotalQuantity = customersRepository.CalculateFEE(iChargedQuantity.Value, dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE);
                                            }



                                            /*if (CCProvider == PaymentMeanCreditCardProviderType.pmccpIECISA)
                                            {
                                                if (rechargeStatus == PaymentMeanRechargeStatus.Waiting_Commit)
                                                {
                                                    strReference = IECISAPayments.UserReference();
                                                    DateTime dtNow = DateTime.Now;

                                                    if (!customersRepository.StartRecharge(ref oUser,
                                                                                            iOSID,
                                                                                            PaymentMeanCreditCardProviderType.pmccpIECISA,
                                                                                            PaymentMeanRechargeInfoType.Payment_With_Token,
                                                                                            dtNow,
                                                                                            iTotalQuantity,
                                                                                            dCurrencyToCharge,
                                                                                            strReference,
                                                                                            strCardReference))
                                                    {
                                                        FormAuthMemberShip.MembershipService.DeleteUser(oUser.USR_USERNAME);
                                                        customersRepository.DeleteUser(ref oUser);
                                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                                        Logger_AddLogMessage(string.Format("ConfirmUserData::Error:Error Starting IECISA Recharge. xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                        return xmlOut;
                                                    }

                                                    IECISAPayments cardPayment = new IECISAPayments();

                                                    bool bOperationMustBeCancelled = false;
                                                    if (!cardPayment.AutomaticPayment(oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_IE_CF_MERCHANT_ID,
                                                                                    oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_IE_CF_CENTRE_ID,
                                                                                    oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_IE_CF_POS_ID,
                                                                                    oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_IE_SYNC_URL,
                                                                                    oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_IE_MAC_KEY,
                                                                                    oUser.USR_EMAIL,
                                                                                    iTotalQuantity,
                                                                                    infraestructureRepository.GetCurrencyIsoCode((int)dCurrencyToCharge),
                                                                                    strCardReference,
                                                                                    strReference,
                                                                                    dtNow,
                                                                                    out bOperationMustBeCancelled,
                                                                                    out strAuthCode,
                                                                                    out strAuthResult,
                                                                                    out strAuthResultDesc,
                                                                                    out strGatewayDate,
                                                                                    out strTransactionId))
                                                    {
                                                        customersRepository.FailedRecharge(ref oUser, strReference, strAuthResult,
                                                                                        strAuthResultDesc, strMaskedCardNumber,
                                                                                        bOperationMustBeCancelled ? PaymentMeanRechargeInfoStatus.WaitingSystemCancellation :
                                                                                                                    PaymentMeanRechargeInfoStatus.Failed);
                                                        FormAuthMemberShip.MembershipService.DeleteUser(oUser.USR_USERNAME);
                                                        customersRepository.DeleteUser(ref oUser);
                                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                                        Logger_AddLogMessage(string.Format("ConfirmUserData::Error:Error in IECISA Recharge. xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                        return xmlOut;
                                                    }


                                                    rechargeStatus = PaymentMeanRechargeStatus.Committed;
                                                }
                                            }*/


                                            if (!customersRepository.RechargeUserBalance(ref oUser,
                                                Convert.ToInt32(iOSID),
                                                bAddToBalance,
                                                iChargedQuantity.Value,
                                                dPercVAT1, dPercVAT2, iPartialVAT1, dPercFEE, iPercFEETopped, iPartialPercFEE, iFixedFEE, iPartialFixedFEE, iTotalQuantity,
                                                dCurrencyToCharge,
                                                (PaymentSuscryptionType)oUser.USR_SUSCRIPTION_TYPE,
                                                rechargeStatus,
                                                PaymentMeanRechargeCreationType.pmrctUserCreationRecharge,
                                                //0,
                                                strReference,
                                                strTransactionId,
                                                strCFTransactionId,
                                                strGatewayDate,
                                                strAuthCode,
                                                strAuthResult,
                                                strAuthResultDesc,
                                                strCardHash,
                                                strCardReference,
                                                strCardScheme,
                                                strMaskedCardNumber,
                                                dtExpDate,
                                                null,
                                                null,
                                                null,
                                                false,
                                                dLatitude, dLongitude, sAppVersion,
                                                out dRechargeId))
                                            {
                                                FormAuthMemberShip.MembershipService.DeleteUser(oUser.USR_USERNAME);
                                                customersRepository.DeleteUser(ref oUser);
                                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                                Logger_AddLogMessage(string.Format("ConfirmUserData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                return xmlOut;

                                            }


                                            /*if ((suscriptionType == PaymentSuscryptionType.pstPerTransaction) && (!bPerTransactionRefundMoney))
                                            {

                                                decimal dOperationID;
                                                if (!customersRepository.ChargeServiceOperation(ref oUser,
                                                    Convert.ToInt32(iOSID),
                                                    false,
                                                    ServiceChargeType.NewPaymentMean,
                                                    PaymentSuscryptionType.pstPerTransaction,
                                                    DateTime.UtcNow.AddMinutes(-oUser.USR_UTC_OFFSET),
                                                    DateTime.UtcNow,
                                                    iChargedQuantity.Value,
                                                    dCurrencyToCharge,
                                                    dCurrencyToCharge,
                                                    1.0,
                                                    0,
                                                    iChargedQuantity.Value,
                                                    dRechargeId,
                                                    out dOperationID))
                                                {
                                                    FormAuthMemberShip.MembershipService.DeleteUser(oUser.USR_USERNAME);
                                                    customersRepository.DeleteUser(ref oUser);
                                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                                    Logger_AddLogMessage(string.Format("ConfirmUserData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                    return xmlOut;

                                                }
                                            }*/




                                            if (oUser.USR_SUSCRIPTION_TYPE.Value == (int)PaymentSuscryptionType.pstPrepay)
                                            {
                                                CUSTOMER_PAYMENT_MEANS_RECHARGE oRecharge = null;
                                                if (customersRepository.GetRechargeData(ref oUser, dRechargeId.Value, out oRecharge))
                                                {
                                                    if ((PaymentSuscryptionType)oRecharge.CUSPMR_SUSCRIPTION_TYPE == PaymentSuscryptionType.pstPrepay)
                                                    {

                                                        int iQuantity = oRecharge.CUSPMR_AMOUNT;
                                                        dPercVAT1 = oRecharge.CUSPMR_PERC_VAT1 ?? 0;
                                                        dPercVAT2 = oRecharge.CUSPMR_PERC_VAT2 ?? 0;
                                                        dPercFEE = oRecharge.CUSPMR_PERC_FEE ?? 0;
                                                        iPercFEETopped = (int)(oRecharge.CUSPMR_PERC_FEE_TOPPED ?? 0);
                                                        iFixedFEE = (int)(oRecharge.CUSPMR_FIXED_FEE ?? 0);

                                                        iTotalQuantity = customersRepository.CalculateFEE(iQuantity, dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE, out iPartialPercFEEVAT, out iPartialFixedFEEVAT);

                                                        int iQFEE = Convert.ToInt32(Math.Round(iQuantity * dPercFEE, MidpointRounding.AwayFromZero));
                                                        if (iPercFEETopped > 0 && iQFEE > iPercFEETopped) iQFEE = iPercFEETopped;
                                                        iQFEE += iFixedFEE;
                                                        int iQVAT = iPartialVAT1 + iPartialPercFEEVAT + iPartialFixedFEEVAT;
                                                        int iQSubTotal = iQuantity + iQFEE;

                                                        int iLayout = 0;
                                                        if (iQFEE != 0 || iQVAT != 0)
                                                        {
                                                            OPERATOR oOperator = customersRepository.GetDefaultOperator();
                                                            if (oOperator != null) iLayout = oOperator.OPR_FEE_LAYOUT;
                                                        }


                                                        string sLayoutSubtotal = "";
                                                        string sLayoutTotal = "";

                                                        string sCurIsoCode = infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oRecharge.CUSPMR_CUR_ID));

                                                        if (iLayout == 2)
                                                        {
                                                            sLayoutSubtotal = string.Format(ResourceExtension.GetLiteral("Email_LayoutSubtotal"),
                                                                                            string.Format("{0:0.00} {1}", Convert.ToDouble(iQSubTotal) / 100, sCurIsoCode),
                                                                                            (oRecharge.CUSPMR_PERC_VAT1 != 0 ? string.Format("{0:0.00}% ", oRecharge.CUSPMR_PERC_VAT1 * 100) : "") +
                                                                                            (oRecharge.CUSPMR_PERC_VAT2 != 0 && oRecharge.CUSPMR_PERC_VAT1 != oRecharge.CUSPMR_PERC_VAT2 ? string.Format("{0:0.00}%", oRecharge.CUSPMR_PERC_VAT2 * 100) : ""),
                                                                                            string.Format("{0:0.00} {1}", Convert.ToDouble(iQVAT) / 100, sCurIsoCode));
                                                        }
                                                        else if (iLayout == 1)
                                                        {
                                                            sLayoutTotal = string.Format(ResourceExtension.GetLiteral("Email_LayoutTotal"),
                                                                                            string.Format("{0:0.00} {1}", Convert.ToDouble(iQuantity) / 100, sCurIsoCode),
                                                                                            string.Format("{0:0.00} {1}", Convert.ToDouble(iQFEE) / 100, sCurIsoCode),
                                                                                            (oRecharge.CUSPMR_PERC_VAT1 != 0 ? string.Format("{0:0.00}% ", oRecharge.CUSPMR_PERC_VAT1 * 100) : "") +
                                                                                            (oRecharge.CUSPMR_PERC_VAT2 != 0 && oRecharge.CUSPMR_PERC_VAT1 != oRecharge.CUSPMR_PERC_VAT2 ? string.Format("{0:0.00}%", oRecharge.CUSPMR_PERC_VAT2 * 100) : ""),
                                                                                            string.Format("{0:0.00} {1}", Convert.ToDouble(iQVAT) / 100, sCurIsoCode));
                                                        }

                                                        string strRechargeEmailSubject = ResourceExtension.GetLiteral("ConfirmNoAutomaticRecharge_EmailHeader");
                                                        /*
                                                            ID: {0}<br>
                                                            *  Fecha de recarga: {1:HH:mm:ss dd/MM/yyyy}<br>
                                                            *  Cantidad Recargada: {2} 
                                                            */
                                                        string strRechargeEmailBody = string.Format(ResourceExtension.GetLiteral("ConfirmRecharge_EmailBody"),
                                                            oRecharge.CUSPMR_ID,
                                                            oRecharge.CUSPMR_DATE,
                                                            string.Format("{0:0.00} {1}", Convert.ToDouble(oRecharge.CUSPMR_TOTAL_AMOUNT_CHARGED) / 100,
                                                                                            infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oRecharge.CUSPMR_CUR_ID))),
                                                            string.Format("{0:0.00} {1}", Convert.ToDouble(oUser.USR_BALANCE) / 100,
                                                                                infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID))),
                                                            ConfigurationManager.AppSettings["EmailSignatureURL"],
                                                            ConfigurationManager.AppSettings["EmailSignatureGraphic"],
                                                            sLayoutSubtotal, sLayoutTotal,
                                                            GetEmailFooter(ref oUser));


                                                        SendEmail(ref oUser, strRechargeEmailSubject, strRechargeEmailBody);

                                                    }
                                                }

                                            }

                                        }
                                    }


                                    string strActivationURL = "";
                                    if (bUserMustBeActivated)
                                    {
                                        USERS_SECURITY_OPERATION oSecOperation = new USERS_SECURITY_OPERATION
                                        {
                                            USOP_NEW_EMAIL = oUser.USR_EMAIL,
                                            USOP_NEW_MAIN_TEL = oUser.USR_MAIN_TEL,
                                            USOP_NEW_MAIN_TEL_COUNTRY = oUser.USR_MAIN_TEL_COUNTRY,
                                            USOP_ACTIVATION_RETRIES = 0,
                                            USOP_OP_TYPE = (int)SecurityOperationType.ActivateAccount,
                                            USOP_STATUS = (int)SecurityOperationStatus.Inserted,
                                            USOP_LAST_SENT_DATE = DateTime.UtcNow,
                                            USOP_UTCDATETIME = DateTime.UtcNow,
                                            USOP_USR_ID = oUser.USR_ID,
                                            USOP_SEND_BY_PUSH = 0,
                                            USOP_UPID_ID = null
                                        };

                                        if (customersRepository.AddSecurityOperation(ref oUser, oSecOperation))
                                        {
                                            strActivationURL = ConfigurationManager.AppSettings["ForgotPassword_URL"];
                                            strActivationURL += "?code=" + oSecOperation.USOP_URL_PARAMETER;
                                        }
                                    }

                                    if ((oUser.CUSTOMER_PAYMENT_MEAN!=null)||(string.IsNullOrEmpty(GetLiteralByUserCountry("NewUserWithoutPaymentMeanEmail_Body", ref oUser))))
                                    {


                                        if (!bUserMustBeActivated)
                                        {
                                            long lSenderId = infraestructureRepository.SendEmailTo(oUser.USR_EMAIL, ResourceExtension.GetLiteral("CustomerInscriptionModel_SummaryWelcomeEmail_Subject"),
                                                                                            string.Format(ResourceExtension.GetLiteral("CustomerInscriptionModel_SummaryWelcomeEmail_Body"),
                                                                                                ConfigurationManager.AppSettings["ConfirmUserData_WebBaseURL"].ToString(),
                                                                                                oUser.CUSTOMER.CUS_NAME + " " + oUser.CUSTOMER.CUS_SURNAME1, oUser.USR_USERNAME,
                                                                                                GetEmailFooter(ref oUser)));

                                            if (lSenderId > 0)
                                            {
                                                customersRepository.InsertUserEmail(ref oUser, oUser.USR_EMAIL,
                                                    ResourceExtension.GetLiteral("CustomerInscriptionModel_SummaryWelcomeEmail_Subject"), string.Format(ResourceExtension.GetLiteral("CustomerInscriptionModel_SummaryWelcomeEmail_Body"),
                                                    ConfigurationManager.AppSettings["ConfirmUserData_WebBaseURL"].ToString(),
                                                    oUser.CUSTOMER.CUS_NAME + " " + oUser.CUSTOMER.CUS_SURNAME1,
                                                    oUser.USR_USERNAME, GetEmailFooter(ref oUser)), lSenderId);

                                            }
                                        }
                                        else
                                        {
                                            long lSenderId = infraestructureRepository.SendEmailTo(oUser.USR_EMAIL, ResourceExtension.GetLiteral("Activation_EmailBody_Subject"),
                                                string.Format(ResourceExtension.GetLiteral("Activation_EmailBody"),
                                                              oUser.USR_USERNAME, strActivationURL, GetEmailFooter(ref oUser)));

                                            if (lSenderId > 0)
                                            {
                                                customersRepository.InsertUserEmail(ref oUser, oUser.USR_EMAIL,
                                                    ResourceExtension.GetLiteral("Activation_EmailBody_Subject"), string.Format(ResourceExtension.GetLiteral("Activation_EmailBody"),
                                                    oUser.USR_USERNAME, strActivationURL, GetEmailFooter(ref oUser)), lSenderId);

                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (!bUserMustBeActivated)
                                        {
                                            List<string> oListSendWarningEmails = new List<string>();
                                            if ((ConfigurationManager.AppSettings["NewUserWithoutPaymentWarningEmailList"] != null) &&
                                                (!string.IsNullOrEmpty(ConfigurationManager.AppSettings["NewUserWithoutPaymentWarningEmailList"].ToString())))
                                            {
                                                string strTempEmails = ConfigurationManager.AppSettings["NewUserWithoutPaymentWarningEmailList"].ToString();
                                                oListSendWarningEmails = strTempEmails.Split(';').ToList();
                                            }

                                            long lSenderId = 0;
                                            if (oListSendWarningEmails.Count() == 0)
                                            {

                                                lSenderId = infraestructureRepository.SendEmailTo(oUser.USR_EMAIL, ResourceExtension.GetLiteral("NewUserWithoutPaymentMeanEmail_Subject"),
                                                                                            string.Format(GetLiteralByUserCountry("NewUserWithoutPaymentMeanEmail_Body", ref oUser),
                                                                                            oUser.USR_USERNAME, GetEmailFooter(ref oUser)));
                                            }
                                            else
                                            {
                                                oListSendWarningEmails.Add(oUser.USR_EMAIL);
                                                List<long> oListSenderIds;

                                                oListSenderIds = infraestructureRepository.SendEmailToMultiRecipients(oListSendWarningEmails, ResourceExtension.GetLiteral("NewUserWithoutPaymentMeanEmail_Subject"),
                                                                                            string.Format(GetLiteralByUserCountry("NewUserWithoutPaymentMeanEmail_Body", ref oUser),
                                                                                            oUser.USR_USERNAME, GetEmailFooter(ref oUser)));

                                                lSenderId = oListSenderIds[oListSenderIds.Count - 1];


                                            }
                                        }
                                        else
                                        {
                                            long lSenderId = infraestructureRepository.SendEmailTo(oUser.USR_EMAIL, ResourceExtension.GetLiteral("Activation_EmailBody_Subject"),
                                                string.Format(ResourceExtension.GetLiteral("Activation_EmailBody"),
                                                              oUser.USR_USERNAME, strActivationURL, GetEmailFooter(ref oUser)));

                                            if (lSenderId > 0)
                                            {
                                                customersRepository.InsertUserEmail(ref oUser, oUser.USR_EMAIL,
                                                    ResourceExtension.GetLiteral("Activation_EmailBody_Subject"), string.Format(ResourceExtension.GetLiteral("Activation_EmailBody"),
                                                    oUser.USR_USERNAME, strActivationURL, GetEmailFooter(ref oUser)), lSenderId);

                                            }
                                        }

                                    }
                                }
                            }

                            customersRepository.AssignPendingInvitationsToAccept(ref oUser);

                            oUser = null;

                                   

                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();
                            parametersOut["signup_guid"] = strSignUpGuid;
                            parametersOut["accountnotactive"] = bUserMustBeActivated?1:0;

                            if (bReturnPAN)
                            {

                                /*parametersOut["ekashu_reference"] = strReference;
                                parametersOut["ekashu_auth_code"] = strAuthCode;
                                parametersOut["ekashu_auth_result"] = strAuthResult;
                                parametersOut["ekashu_card_hash"] = strCardHash;
                                parametersOut["ekashu_card_reference"] = strCardReference;
                                parametersOut["ekashu_card_scheme"] = strCardScheme;
                                parametersOut["ekashu_date_time_local_fmt"] = strGatewayDate;*/
                                parametersOut["masked_card_number"] = strMaskedCardNumber;
                                /*parametersOut["ekashu_expires_end_month"] = strExpMonth;
                                parametersOut["ekashu_expires_end_year"] = strExpYear;*/
                            }

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("ConfirmUserData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("ConfirmUserData: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }

                           

                        }

                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("ConfirmUserData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("ConfirmUserData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                

            }

            return xmlOut;
        }

        [WebMethod]
        public string ConfirmUserDataJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("ConfirmUserDataJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = ConfirmUserData(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);

                //Logger_AddLogMessage(string.Format("ConfirmUserDataJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);
                xmlOut = null;

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("ConfirmUserDataJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);
                

            }

            return jsonOut;
        }



        [WebMethod]
        public string UpdateInfoQuery(string xmlIn)
        {
            string xmlOut = "";
            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("UpdateInfoQuery: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) || 
                        (parametersIn["SessionID"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("UpdateInfoQuery::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString,strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("UpdateInfoQuery::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {


                            USER oUser = null;
                            rt = GetUserData(ref oUser, parametersIn,false);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("UpdateInfoQuery::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }


                            decimal? dInsId = null;
                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();

                            rt = GetQueryLoginData(ref oUser, parametersIn, out dInsId, ref parametersOut);
                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("QueryLogin::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            xmlOut = GenerateXMLOuput(parametersOut, new List<string> { "cities" });

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("UpdateInfoQuery::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("UpdateInfoQuery: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }

                            oUser = null;

                        }
                    }

                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("UpdateInfoQuery::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("UpdateInfoQuery::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                

            }

            return xmlOut;

        }



        [WebMethod]
        public string UpdateInfoQueryJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("UpdateInfoQueryJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = UpdateInfoQuery(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("UpdateInfoQueryJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("UpdateInfoQueryJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);
                

            }

            return jsonOut;
        }




        [WebMethod]
        public string UpdatePushID(string xmlIn)
        {
            string xmlOut = "";
            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("UpdatePushID: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) || 
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["pushID"] == null))                    
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("UpdatePushID::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString,strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("UpdatePushID::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                           
                            USER oUser = null;
                            rt = GetUserData(ref oUser, parametersIn);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("UpdatePushID::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }
                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("UpdatePushID::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("UpdatePushID: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }

                            oUser = null;


                        }
                    }

                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("UpdatePushID::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("UpdatePushID::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                

            }

            return xmlOut;

        }



        [WebMethod]
        public string UpdatePushIDJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("UpdatePushIDJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = UpdatePushID(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("UpdatePushIDJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("UpdatePushIDJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);
                

            }

            return jsonOut;
        }



        [WebMethod]
        public string ForgetPassword(string xmlIn)
        {
            string xmlOut = "";
            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("ForgetPassword: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if (parametersIn["u"] == null)
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("ForgetPassword::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("ForgetPassword::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {                            

                            USER oUser = null;

                            if (!customersRepository.GetUserData(ref oUser, parametersIn["u"].ToString()))
                            {
                                oUser = null;
                                if (!customersRepository.GetUserDataByEmail(ref oUser, parametersIn["u"].ToString()))
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_User);
                                    Logger_AddLogMessage(string.Format("ForgetPassword::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                                }
                            }




                            if (oUser != null)
                            {

                                bool bSendByPush =false;
                                USERS_PUSH_ID oUserPush = null;

                                try
                                {
                                    //is device from user
                                    string strWIFIMAC = parametersIn["WIFIMAC"].ToString() ;
                                    string strIMEI = parametersIn["IMEI"].ToString();
                                    int iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());

                                    if (!string.IsNullOrEmpty(strWIFIMAC) || !string.IsNullOrEmpty(strIMEI))
                                    {
                                        MobileOS eMobileOS = (MobileOS)iOSID;

                                        string strSendPush = infraestructureRepository.GetParameterValue(string.Format("ForgetPassword_SendPush.{0}", eMobileOS));

                                        Logger_AddLogMessage(string.Format("ForgetPassword: ForgetPassword_SendPush.{0}={1}", eMobileOS, strSendPush), LogLevels.logINFO);


                                        if (!string.IsNullOrEmpty(strSendPush))
                                        {
                                            if (Convert.ToInt32(strSendPush) == 1)
                                            {
                                                oUserPush = oUser.USERS_PUSH_IDs.Where(r => r.UPID_OS == iOSID &&
                                                  ((!string.IsNullOrEmpty(r.UPID_CELL_WIFI_MAC) && !string.IsNullOrEmpty(strWIFIMAC) && r.UPID_CELL_WIFI_MAC == strWIFIMAC) ||
                                                   (!string.IsNullOrEmpty(r.UPID_CELL_IMEI) && !string.IsNullOrEmpty(strIMEI) && r.UPID_CELL_IMEI == strIMEI))).FirstOrDefault();

                                                if (oUserPush != null)
                                                {
                                                    Logger_AddLogMessage(string.Format("ForgetPassword: ForgetPassword_SendPush.{0}={1} PushId={2}", eMobileOS, strSendPush, oUserPush.UPID_PUSHID), LogLevels.logINFO);
                                                    bSendByPush = true;

                                                }
                                            }
                                        }
                                    }


                                }
                                catch (Exception e)
                                {
                                    Logger_AddLogException(e, string.Format("ForgetPassword::Error: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logERROR);
                                }

                                USERS_SECURITY_OPERATION oSecOperation = null;


                                string strPasswordRecoveryType = infraestructureRepository.GetParameterValue("PasswordRecoveryType");
                                PasswordRecoveryType ePasswordRecoveryType = PasswordRecoveryType.Recover;

                                if (!string.IsNullOrEmpty(strPasswordRecoveryType))
                                {
                                    try
                                    {
                                        ePasswordRecoveryType = (PasswordRecoveryType)Convert.ToInt32(strPasswordRecoveryType);
                                    }
                                    catch { }
                                }


                                switch (ePasswordRecoveryType)
                                {

                                    case PasswordRecoveryType.Recover:
                                        {

                                            oSecOperation = new USERS_SECURITY_OPERATION
                                            {
                                                USOP_NEW_EMAIL = oUser.USR_EMAIL,
                                                USOP_NEW_MAIN_TEL = oUser.USR_MAIN_TEL,
                                                USOP_NEW_MAIN_TEL_COUNTRY = oUser.USR_MAIN_TEL_COUNTRY,
                                                USOP_ACTIVATION_RETRIES = 0,
                                                USOP_OP_TYPE = (int)SecurityOperationType.RecoverPassword,
                                                USOP_STATUS = (int)SecurityOperationStatus.Inserted,
                                                USOP_LAST_SENT_DATE = DateTime.UtcNow,
                                                USOP_UTCDATETIME = DateTime.UtcNow,
                                                USOP_USR_ID = oUser.USR_ID,
                                                USOP_SEND_BY_PUSH = bSendByPush ? 1 : 0,
                                                USOP_UPID_ID = (oUserPush != null) ? oUserPush.UPID_ID : (decimal?)null
                                            };

                                            if (customersRepository.AddSecurityOperation(ref oUser, oSecOperation))
                                            {

                                                if (!string.IsNullOrEmpty(oUser.USR_CULTURE_LANG))
                                                {
                                                    CultureInfo ci = new CultureInfo(oUser.USR_CULTURE_LANG);
                                                    Thread.CurrentThread.CurrentUICulture = ci;
                                                    Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(ci.Name);
                                                }

                                                if (!SendEmailAndSMS(ref oUser, oSecOperation, ResourceExtension.GetLiteral("ForgotPassword_EmailHeader"),
                                                        ResourceExtension.GetLiteral("ForgotPassword_EmailBody"), ResourceExtension.GetLiteral("ForgotPassword_SMS")))
                                                {
                                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                                    Logger_AddLogMessage(string.Format("ForgetPassword::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                }

                                                customersRepository.UpdateSecurityOperationRetries(ref oSecOperation);

                                                if (bSendByPush)
                                                {
                                                    Logger_AddLogMessage(string.Format("ForgetPassword: Sending Code Also by Push to {0}", oUser.USR_EMAIL), LogLevels.logINFO);
                                                }

                                                parametersOut = new SortedList();
                                                parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();

                                                xmlOut = GenerateXMLOuput(parametersOut);

                                                if (xmlOut.Length == 0)
                                                {
                                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                                    Logger_AddLogMessage(string.Format("ForgetPassword::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                }
                                                else
                                                {
                                                    Logger_AddLogMessage(string.Format("ForgetPassword: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                                                }



                                            }
                                            else
                                            {
                                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                                Logger_AddLogMessage(string.Format("ForgetPassword::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            }


                                        }
                                        break;
                                    case PasswordRecoveryType.Reset:
                                        {

                                            oSecOperation = new USERS_SECURITY_OPERATION
                                            {
                                                USOP_NEW_EMAIL = oUser.USR_EMAIL,
                                                USOP_NEW_MAIN_TEL = oUser.USR_MAIN_TEL,
                                                USOP_NEW_MAIN_TEL_COUNTRY = oUser.USR_MAIN_TEL_COUNTRY,
                                                USOP_ACTIVATION_RETRIES = 0,
                                                USOP_OP_TYPE = (int)SecurityOperationType.ResetPassword,
                                                USOP_STATUS = (int)SecurityOperationStatus.Inserted,
                                                USOP_LAST_SENT_DATE = DateTime.UtcNow,
                                                USOP_UTCDATETIME = DateTime.UtcNow,
                                                USOP_USR_ID = oUser.USR_ID,
                                                USOP_SEND_BY_PUSH =  0,
                                                USOP_UPID_ID = null
                                            };

                                            if (customersRepository.AddSecurityOperation(ref oUser, oSecOperation))
                                            {

                                                if (!string.IsNullOrEmpty(oUser.USR_CULTURE_LANG))
                                                {
                                                    CultureInfo ci = new CultureInfo(oUser.USR_CULTURE_LANG);
                                                    Thread.CurrentThread.CurrentUICulture = ci;
                                                    Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(ci.Name);
                                                }

                                                if (!SendEmail(ref oUser, oSecOperation, ResourceExtension.GetLiteral("ForgotPassword_EmailHeader"),
                                                        ResourceExtension.GetLiteral("ForgotPassword_EmailBody")))
                                                {
                                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                                    Logger_AddLogMessage(string.Format("ForgetPassword::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                }

                                                customersRepository.UpdateSecurityOperationRetries(ref oSecOperation);

                                               
                                                parametersOut = new SortedList();
                                                parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();

                                                xmlOut = GenerateXMLOuput(parametersOut);

                                                if (xmlOut.Length == 0)
                                                {
                                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                                    Logger_AddLogMessage(string.Format("ForgetPassword::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                }
                                                else
                                                {
                                                    Logger_AddLogMessage(string.Format("ForgetPassword: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                                                }



                                            }
                                            else
                                            {
                                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                                Logger_AddLogMessage(string.Format("ForgetPassword::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            }
                                        }
                                        break;

                                    default:
                                        break;
                                }

                                oUser = null;
                            }
                            else
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_User);
                                Logger_AddLogMessage(string.Format("ForgetPassword::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                        }
                        
                    }

                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("ForgetPassword::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }
                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }


            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("ForgetPassword::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;

        }




        [WebMethod]
        public string ForgetPasswordJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("ForgetPasswordJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = ForgetPassword(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("ForgetPasswordJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("ForgetPasswordJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);


            }

            return jsonOut;
        }


        [WebMethod]
        public string ForgetUsername(string xmlIn)
        {
            string xmlOut = "";
            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("ForgetUsername: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if (parametersIn["email"] == null)
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("ForgetUsername::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("ForgetUsername::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {

                            USER oUser = null;

                            if (customersRepository.GetUserDataByEmail(ref oUser, parametersIn["email"].ToString()))
                            {

                                if (oUser != null)
                                {

                                    string culture = oUser.USR_CULTURE_LANG;
                                    CultureInfo ci = new CultureInfo(culture);
                                    Thread.CurrentThread.CurrentUICulture = ci;
                                    Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(ci.Name);

                                    string strSubject = ResourceExtension.GetLiteral("ForgetUsername_EmailHeader");
                                    string strMessage = string.Format(ResourceExtension.GetLiteral("ForgeUsername_EmailBody"), oUser.USR_USERNAME);

                                    long lSenderId = infraestructureRepository.SendEmailTo(oUser.USR_EMAIL, strSubject, strMessage);

                                    if (lSenderId > 0)
                                    {
                                        parametersOut = new SortedList();
                                        parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();

                                        xmlOut = GenerateXMLOuput(parametersOut);

                                        if (xmlOut.Length == 0)
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                            Logger_AddLogMessage(string.Format("ForgetUsername::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        }
                                        else
                                        {
                                            Logger_AddLogMessage(string.Format("ForgetUsername: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                                        }
                                    }
                                    else
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                        Logger_AddLogMessage(string.Format("ForgetUsername::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    }

                                    oUser = null;

                                }
                                else
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_User);
                                    Logger_AddLogMessage(string.Format("ForgetUsername::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                }
                            }
                            else
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_User);
                                Logger_AddLogMessage(string.Format("ForgetUsername::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }

                        }
                    }

                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("ForgetUsername::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("ForgetUsername::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;

        }




        [WebMethod]
        public string ForgetUsernameJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("ForgetUsernameJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = ForgetUsername(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("ForgetUsernameJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("ForgetUsernameJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);


            }

            return jsonOut;
        }


        [WebMethod]
        public string QueryOperationList(string xmlIn)
        {
            string xmlOut = "";
            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("QueryOperationList: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["typeoflist"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("QueryOperationList::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("QueryOperationList::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {

                            USER oUser = null;
                            string strAppVersion = "";
                            rt = GetUserData(ref oUser, parametersIn, out strAppVersion);                           

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("QueryOperationList::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            ulong ulAppVersion = AppUtilities.AppVersion(strAppVersion);

                            int iTypeofList=-1;
                            OperationListType opListType= OperationListType.Current;
                            
                            try
                            {
                                iTypeofList=Convert.ToInt32(parametersIn["typeoflist"].ToString());
                                opListType = (OperationListType) iTypeofList;
                             
                            }
                            catch
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("QueryOperationList::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }


                            List<ALL_OPERATION> oOperations = new List<ALL_OPERATION>();

                            DateTime userDateTime = DateTime.UtcNow - new TimeSpan(0, oUser.USR_UTC_OFFSET, 0);

                            if (opListType == OperationListType.Current)
                            {

                                IQueryable<ALL_OPERATION> oAllOperations = customersRepository.GetUserOperations(ref oUser, 2);

                                //Add Today Operations
                                foreach (ALL_OPERATION oper in oAllOperations)
                                {
                                    DateTime operCorrectedTime = oper.OPE_DATE.Value;

                                    if (userDateTime.Date == operCorrectedTime.Date)
                                    {
                                        oOperations.Add(oper);
                                    }
                                }


                                oAllOperations = customersRepository.GetUserOperations(ref oUser, 60);


                                Dictionary<string, bool> oHashPlateUsed = new Dictionary<string, bool>();
                                foreach (USER_PLATE oPlate in oUser.USER_PLATEs)
                                {
                                    if (!oHashPlateUsed.ContainsKey(oPlate.USRP_PLATE))
                                    {
                                        oHashPlateUsed.Add(oPlate.USRP_PLATE, false);
                                    }
                                }



                                //Add Active Operations from previous days
                                foreach (ALL_OPERATION oper in oAllOperations)
                                {
                                    if ((oper.OPE_TYPE == (int)ChargeOperationsType.ParkingOperation) ||
                                        (oper.OPE_TYPE == (int)ChargeOperationsType.ExtensionOperation) ||
                                        (oper.OPE_TYPE == (int)ChargeOperationsType.ParkingRefund))
                                    {
                                        bool bUsed = oHashPlateUsed[oper.USRP_PLATE];
                                        if (!bUsed)
                                        {
                                            DateTime operCorrectedTime = oper.OPE_DATE.Value;
                                            if (userDateTime.Date != operCorrectedTime.Date)
                                            {
                                                DateTime operIniCorrectedTime = oper.OPE_INIDATE.Value;
                                                DateTime operEndCorrectedTime = oper.OPE_ENDDATE.Value;

                                                

                                                if (userDateTime >= operIniCorrectedTime && userDateTime < operEndCorrectedTime)
                                                {
                                                    oOperations.Add(oper);
                                                    oHashPlateUsed[oper.USRP_PLATE] = true;

                                                    bool bAllPlatesUsed = true;
                                                    var keys = new List<string>(oHashPlateUsed.Keys);
                                                    foreach (string key in keys)
                                                    {
                                                        bAllPlatesUsed = bAllPlatesUsed && oHashPlateUsed[key];
                                                    }

                                                    if (bAllPlatesUsed)
                                                        break;

                                                }
                                            }


                                        }
                                    }
                                }

                                oAllOperations = null;

                            }
                            else
                            {


                                string strHistoricOperationsBehavior = infraestructureRepository.GetParameterValue("HistoricOperationsBehavior");
                                OperationListType olt = OperationListType.Historical;

                                if (!string.IsNullOrEmpty(strHistoricOperationsBehavior))
                                {
                                    try
                                    {
                                        olt = (OperationListType)Convert.ToInt32(strHistoricOperationsBehavior);
                                    }
                                    catch { }
                                }



                                int iNumDaysToGoBack = Convert.ToInt32(ConfigurationManager.AppSettings["NumDaysToGoBackInOperationsList"].ToString());
                                IQueryable<ALL_OPERATION> oAllOperations = customersRepository.GetUserOperations(ref oUser, iNumDaysToGoBack + 2);
                                //Add Not Today Operations and arriving to iNumDaysToGoBack
                               
                                DateTime dtLastOperation = userDateTime.Date.AddDays(-iNumDaysToGoBack);


                                foreach (ALL_OPERATION oper in oAllOperations)
                                {

                                    DateTime operCorrectedTime = oper.OPE_DATE.Value;


                                    if ((operCorrectedTime > dtLastOperation) || (olt==OperationListType.All))
                                    {
                                        //Is not today's
                                        if ((userDateTime.Date != operCorrectedTime.Date)|| (olt==OperationListType.All))
                                        {
                                            oOperations.Add(oper);
                                        }
                                    }

                                }
                                oAllOperations = null;

                            }

                            parametersOut = new SortedList();
                            parametersOut["r"] = oOperations.Count();
                            parametersOut["useropers"] = "";
                            if (oOperations.Count() > 0)
                            {

                                List<USER_OPERATIONS_HIDDEN> oHiddenOperations = customersRepository.GetUserHiddenOperations(ref oUser);


                                foreach (ALL_OPERATION operation in oOperations)
                                {
                                    if (operation.OPE_TYPE != (int)ChargeOperationsType.BalanceTransfer && operation.OPE_TYPE != (int)ChargeOperationsType.BalanceReception)
                                    {

                                        int iOt = operation.OPE_TYPE;

                                        if (oHiddenOperations.Where(r => r.UOPHI_OP_TYPE == iOt && r.UOPHI_OP_ID == operation.OPE_ID).Count() == 0)
                                        {

                                            parametersOut["useropers"] += string.Format("<userope json:Array='true'>" +
                                                                                        "<id>{0}</id><ot>{1}</ot>", operation.OPE_ID, iOt);

                                            DateTime operCorrectedTime = operation.OPE_DATE.Value;
                                            switch ((ChargeOperationsType)operation.OPE_TYPE)
                                            {

                                                case ChargeOperationsType.ParkingOperation:
                                                case ChargeOperationsType.ExtensionOperation:
                                                case ChargeOperationsType.ParkingRefund:

                                                    DateTime operIniCorrectedTime = operation.OPE_INIDATE.Value;
                                                    DateTime operEndCorrectedTime = operation.OPE_ENDDATE.Value;
                                                    string strOpeRefundPreviousEndDate = "";
                                                    if (operation.OPE_REFUND_PREVIOUS_ENDDATE.HasValue)
                                                    {
                                                        strOpeRefundPreviousEndDate = operation.OPE_REFUND_PREVIOUS_ENDDATE.Value.ToString("HHmmssddMMyy");
                                                    }

                                                    parametersOut["useropers"] += string.Format("<p>{0}</p>" +
                                                                                               "<cityID>{1}</cityID>" +
                                                                                               "<cityShortDesc>{2}</cityShortDesc>" +
                                                                                               "<g>{3}</g>" +
                                                                                               "<ad>{4}</ad>" +
                                                                                               "<d>{5}</d>" +
                                                                                               "<q_city>{6}</q_city>" +
                                                                                               "<cur_city>{7}</cur_city>" +
                                                                                               "<q_user>{8}</q_user>" +
                                                                                               "<cur_user>{9}</cur_user>" +
                                                                                               "<t>{10}</t>" +
                                                                                               "<bd>{11}</bd>	" +
                                                                                               "<ed>{12}</ed>	" +
                                                                                               "<bal_before>{13}</bal_before>" +
                                                                                               "<st>{14}</st>" +
                                                                                               "<srcType>{15}</srcType>" +
                                                                                               "<srcIdent>{16}</srcIdent>" +
                                                                                               "<postpay>{17}</postpay>" +
                                                                                               "<time_bal_used>{18}</time_bal_used>" +
                                                                                               "<time_bal_before>{19}</time_bal_before>" +
                                                                                               "<d_prev_end>{20}</d_prev_end>",
                                                                                               operation.USRP_PLATE,
                                                                                               operation.OPE_INS_ID,
                                                                                               operation.INS_SHORTDESC,
                                                                                               operation.GRP_DESCRIPTION,
                                                                                               operation.TAR_DESCRIPTION,
                                                                                               operCorrectedTime.ToString("HHmmssddMMyy"),
                                                                                               operation.OPE_TOTAL_AMOUNT,
                                                                                               operation.OPE_AMOUNT_CUR_ISO_CODE,
                                                                                               operation.OPE_FINAL_AMOUNT,
                                                                                               operation.OPE_BALANCE_CUR_ISO_CODE,
                                                                                               operation.OPE_TIME,
                                                                                               operIniCorrectedTime.ToString("HHmmssddMMyy"),
                                                                                               operEndCorrectedTime.ToString("HHmmssddMMyy"),
                                                                                               operation.OPE_BALANCE_BEFORE,
                                                                                               operation.OPE_SUSCRIPTION_TYPE,
                                                                                               operation.EPO_SRCTYPE,
                                                                                               string.IsNullOrEmpty(operation.EPO_SRCIDENT) ? "-1" : operation.EPO_SRCIDENT,
                                                                                               operation.OPE_POSTPAY ?? 0,
                                                                                               operation.OPE_TIME_BALANCE_USED,
                                                                                               operation.OPE_TIME_BALANCE_BEFORE,
                                                                                               strOpeRefundPreviousEndDate);

                                                    break;

                                                case ChargeOperationsType.TicketPayment:
                                                    parametersOut["useropers"] += string.Format("<f>{0}</f>" +
                                                                                               "<lp>{1}</lp>" +
                                                                                               "<cityID>{2}</cityID>" +
                                                                                               "<cityShortDesc>{3}</cityShortDesc>" +
                                                                                               "<d>{4}</d>" +
                                                                                               "<q_city>{5}</q_city>" +
                                                                                               "<cur_city>{6}</cur_city>" +
                                                                                               "<q_user>{7}</q_user>" +
                                                                                               "<cur_user>{8}</cur_user>" +
                                                                                               "<bal_before>{9}</bal_before>" +
                                                                                               "<st>{10}</st>" +
                                                                                               "<srcType>{11}</srcType>" +
                                                                                               "<srcIdent>{12}</srcIdent>",
                                                                                               operation.TIPA_TICKET_NUMBER.Substring(0, 8),
                                                                                               operation.USRP_PLATE,
                                                                                               operation.OPE_INS_ID,
                                                                                               operation.INS_SHORTDESC,
                                                                                               operCorrectedTime.ToString("HHmmssddMMyy"),
                                                                                               operation.OPE_TOTAL_AMOUNT,
                                                                                               operation.OPE_AMOUNT_CUR_ISO_CODE,
                                                                                               operation.OPE_FINAL_AMOUNT,
                                                                                               operation.OPE_BALANCE_CUR_ISO_CODE,
                                                                                               operation.OPE_BALANCE_BEFORE,
                                                                                               operation.OPE_SUSCRIPTION_TYPE,
                                                                                               operation.EPO_SRCTYPE,
                                                                                               string.IsNullOrEmpty(operation.EPO_SRCIDENT) ? "-1" : operation.EPO_SRCIDENT);
                                                    break;


                                                case ChargeOperationsType.BalanceRecharge:
                                                    PaymentMeanRechargeType oRechargeType = (PaymentMeanRechargeType)(operation.OPE_CUSPMR_TYPE ?? 0);
                                                    parametersOut["useropers"] += string.Format("<d>{0}</d>" +
                                                                                               "<q_user>{1}</q_user>" +
                                                                                               "<cur_user>{2}</cur_user>" +
                                                                                               "<bal_before>{3}</bal_before>" +
                                                                                               "<st>{4}</st>" +
                                                                                               "<srcType>{5}</srcType>" +
                                                                                               "<srcIdent>{6}</srcIdent>" +
                                                                                               "<q_balance>{7}</q_balance>" +
                                                                                               "<recType>{8}</recType>" +
                                                                                               "{9}",
                                                                                               operCorrectedTime.ToString("HHmmssddMMyy"),
                                                                                               operation.OPE_TOTAL_AMOUNT,
                                                                                               operation.OPE_AMOUNT_CUR_ISO_CODE,
                                                                                               operation.OPE_BALANCE_BEFORE,
                                                                                               operation.OPE_SUSCRIPTION_TYPE,
                                                                                                (int)TranslatePaymentMeanRechargeType(oRechargeType),
                                                        //operation.EPO_SRCTYPE,
                                                                                               string.IsNullOrEmpty(operation.EPO_SRCIDENT) ? "-1" : operation.EPO_SRCIDENT,
                                                                                               operation.OPE_AMOUNT,
                                                                                               (oRechargeType == PaymentMeanRechargeType.Pagatelia ? 4 : (int)oRechargeType),
                                                                                               (operation.OPE_CUSPMR_PAGATELIA_NEW_BALANCE.HasValue ? string.Format("<new_pagatelia_balance>{0}</new_pagatelia_balance>", operation.OPE_CUSPMR_PAGATELIA_NEW_BALANCE) : ""));

                                                    break;

                                                case ChargeOperationsType.ServiceCharge:
                                                case ChargeOperationsType.Discount:
                                                    parametersOut["useropers"] += string.Format("<d>{0}</d>" +
                                                                                               "<q_city>{1}</q_city>" +
                                                                                               "<cur_city>{2}</cur_city>" +
                                                                                               "<q_user>{3}</q_user>" +
                                                                                               "<q_balance>{9}</q_balance>" +
                                                                                               "<cur_user>{4}</cur_user>" +
                                                                                               "<bal_before>{5}</bal_before>" +
                                                                                               "<st>{6}</st>" +
                                                                                               "<srcType>{7}</srcType>" +
                                                                                               "<srcIdent>{8}</srcIdent>",
                                                                                               operCorrectedTime.ToString("HHmmssddMMyy"),
                                                                                               operation.OPE_TOTAL_AMOUNT,
                                                                                               operation.OPE_AMOUNT_CUR_ISO_CODE,
                                                                                               operation.OPE_FINAL_AMOUNT,
                                                                                               operation.OPE_BALANCE_CUR_ISO_CODE,
                                                                                               operation.OPE_BALANCE_BEFORE,
                                                                                               operation.OPE_SUSCRIPTION_TYPE,
                                                                                               operation.EPO_SRCTYPE,
                                                                                               string.IsNullOrEmpty(operation.EPO_SRCIDENT) ? "-1" : operation.EPO_SRCIDENT,
                                                                                               operation.OPE_AMOUNT);

                                                    break;

                                                case ChargeOperationsType.BalanceTransfer:
                                                case ChargeOperationsType.BalanceReception:
                                                    parametersOut["useropers"] += string.Format("<tranatype>{0}</tranatype>" +
                                                                                               "<d>{1}</d>" +
                                                                                               "<q_user>{2}</q_user>" +
                                                                                               "<cur_user>{3}</cur_user>" +
                                                                                               "<bal_before>{4}</bal_before>" +
                                                                                               "<u_aux>{5}</u_aux>",
                                                                                               (operation.OPE_TYPE == (int)ChargeOperationsType.BalanceTransfer ? 2 : 1),
                                                                                               operCorrectedTime.ToString("HHmmssddMMyy"),
                                                                                               (operation.OPE_TYPE == (int)ChargeOperationsType.BalanceTransfer ? -operation.OPE_TOTAL_AMOUNT : operation.OPE_TOTAL_AMOUNT),
                                                                                               operation.OPE_AMOUNT_CUR_ISO_CODE,
                                                                                               operation.OPE_BALANCE_BEFORE,
                                                                                               operation.OPE_ADDITIONAL_USR_USERNAME);

                                                    break;

                                                case ChargeOperationsType.TollPayment:
                                                case ChargeOperationsType.TollLock:
                                                case ChargeOperationsType.TollUnlock:
                                                    parametersOut["useropers"] += string.Format("<p>{0}</p>" +
                                                                                               "<cityID>{1}</cityID>" +
                                                                                               "<cityShortDesc>{2}</cityShortDesc>" +
                                                                                               "<d>{3}</d>" +
                                                                                               "<q_city>{4}</q_city>" +
                                                                                               "<cur_city>{5}</cur_city>" +
                                                                                               "<q_user>{6}</q_user>" +
                                                                                               "<cur_user>{12}</cur_user>" +
                                                                                               "<tollq>{7}</tollq>" +
                                                                                               "<tollqvat>{8}</tollqvat>" +
                                                                                               "<tollid>{9}</tollid>" +
                                                                                               "<tolliddesc>{10}</tolliddesc>" +
                                                                                               "<bal_before>{11}</bal_before>",
                                                                                               operation.USRP_PLATE,
                                                                                               operation.OPE_INS_ID,
                                                                                               operation.INS_SHORTDESC,
                                                                                               operCorrectedTime.ToString("HHmmssddMMyy"),
                                                                                               operation.OPE_TOTAL_AMOUNT,
                                                                                               operation.OPE_AMOUNT_CUR_ISO_CODE,
                                                                                               operation.OPE_FINAL_AMOUNT,
                                                                                               operation.OPE_AMOUNT,
                                                                                               Convert.ToInt32(Math.Round(operation.OPE_VAT ?? 0, MidpointRounding.AwayFromZero)),
                                                                                               operation.GRP_ID,
                                                                                               operation.GRP_DESCRIPTION,
                                                                                               operation.OPE_BALANCE_BEFORE,
                                                                                               operation.OPE_BALANCE_CUR_ISO_CODE);

                                                    break;

                                                case ChargeOperationsType.OffstreetEntry:
                                                case ChargeOperationsType.OffstreetExit:
                                                case ChargeOperationsType.OffstreetOverduePayment:

                                                    string sIniDate = "";
                                                    string sEndDate = "";
                                                    if (operation.OPE_INIDATE.HasValue) sIniDate = operation.OPE_INIDATE.Value.ToString("HHmmssddMMyy");
                                                    if (operation.OPE_ENDDATE.HasValue) sEndDate = operation.OPE_ENDDATE.Value.ToString("HHmmssddMMyy");

                                                    parametersOut["useropers"] += string.Format("<p>{0}</p>" +
                                                                                               "<cityID>{1}</cityID>" +
                                                                                               "<cityShortDesc>{2}</cityShortDesc>" +
                                                                                               "<g>{3}</g>" +
                                                                                               "<ad>{4}</ad>" +
                                                                                               "<d>{5}</d>" +
                                                                                               "<q_city>{6}</q_city>" +
                                                                                               "<cur_city>{7}</cur_city>" +
                                                                                               "<q_user>{8}</q_user>" +
                                                                                               "<cur_user>{9}</cur_user>" +
                                                                                               "<t>{10}</t>" +
                                                                                               "<bd>{11}</bd>	" +
                                                                                               "<ed>{12}</ed>	" +
                                                                                               "<bal_before>{13}</bal_before>" +
                                                                                               "<st>{14}</st>",
                                                                                               operation.USRP_PLATE,
                                                                                               operation.OPE_INS_ID,
                                                                                               operation.INS_SHORTDESC,
                                                                                               operation.GRP_DESCRIPTION,
                                                                                               operation.TAR_DESCRIPTION,
                                                                                               operCorrectedTime.ToString("HHmmssddMMyy"),
                                                                                               operation.OPE_TOTAL_AMOUNT,
                                                                                               operation.OPE_AMOUNT_CUR_ISO_CODE,
                                                                                               operation.OPE_FINAL_AMOUNT,
                                                                                               operation.OPE_BALANCE_CUR_ISO_CODE,
                                                                                               operation.OPE_TIME,
                                                                                               sIniDate,
                                                                                               sEndDate,
                                                                                               operation.OPE_BALANCE_BEFORE,
                                                                                               operation.OPE_SUSCRIPTION_TYPE);

                                                    break;

                                                default:
                                                    break;

                                            }

                                            parametersOut["useropers"] += "</userope>";
                                        }
                                    }
                                }


                            }

                            oOperations.Clear();
                            oOperations = null;


                            xmlOut = GenerateXMLOuput(parametersOut, new List<string> { "useropers" });

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("QueryOperationList::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("QueryOperationList: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }

                            oUser = null;

                        }
                    }

                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("QueryOperationList::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("QueryOperationList::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

            }

            return xmlOut;
        }
               
        
        
        [WebMethod]
        public string QueryOperationListJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("QueryOperationListJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = QueryOperationList(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                Logger_AddLogMessage(string.Format("QueryOperationListJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("QueryOperationListJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }



        [WebMethod]
        public string HideOperationFromOperationList(string xmlIn)
        {
            string xmlOut = "";
            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("HideOperationFromOperationList: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["ot"] == null)||
                        (parametersIn["id"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("HideOperationFromOperationList::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("HideOperationFromOperationList::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {

                            USER oUser = null;
                            string strAppVersion = "";
                            rt = GetUserData(ref oUser, parametersIn, out strAppVersion);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("HideOperationFromOperationList::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            ulong ulAppVersion = AppUtilities.AppVersion(strAppVersion);

                            int iOpType = -1;
                            ChargeOperationsType opType = ChargeOperationsType.ParkingOperation;

                            try
                            {
                                iOpType = Convert.ToInt32(parametersIn["ot"].ToString());
                                opType = (ChargeOperationsType)iOpType;

                            }
                            catch
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("HideOperationFromOperationList::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }


                            decimal dOPId = -1;

                            try
                            {
                                dOPId = Convert.ToDecimal(parametersIn["id"].ToString());                               

                            }
                            catch
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("HideOperationFromOperationList::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }



                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();

                            if (!customersRepository.HideUserOperation(ref oUser, opType, dOPId))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("HideOperationFromOperationList::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }


                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("HideOperationFromOperationList::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("HideOperationFromOperationList: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }

                            oUser = null;

                        }
                    }

                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("HideOperationFromOperationList::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("HideOperationFromOperationList::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

            }

            return xmlOut;


        }




        [WebMethod]
        public string HideOperationFromOperationListJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("HideOperationFromOperationListJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = HideOperationFromOperationList(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                Logger_AddLogMessage(string.Format("HideOperationFromOperationListJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("HideOperationFromOperationListJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }


        [WebMethod]
        public string GetUserAmountCurrency (string xmlIn)
        {
            string xmlOut = "";
            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("GetUserAmountCurrency: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {


                    if ((parametersIn["subscription_type"] == null) ||
                        (parametersIn["ccode"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("GetUserAmountCurrency::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("GetUserAmountCurrency::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            PaymentSuscryptionType suscriptionType = PaymentSuscryptionType.pstPrepay;

                            try
                            {
                                int iSuscType = Convert.ToInt32(parametersIn["subscription_type"].ToString());
                                suscriptionType = (PaymentSuscryptionType)iSuscType;

                            }
                            catch
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("GetUserAmountCurrency::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }


                            string sAppVersion = "1.0";
                            try
                            {
                                if (parametersIn["appvers"] != null)
                                    sAppVersion = parametersIn["appvers"].ToString();
                            }
                            catch
                            {
                            }

                            ulong ulAppVersion = AppUtilities.AppVersion(sAppVersion);


                            int iCountry = -1;
                            int iCurrencyId = -1;
                            
                            string strCurrencyISOCode = "";
                            try
                            {
                                iCountry = Convert.ToInt32(parametersIn["ccode"].ToString());                              
                                                                                              
                                iCurrencyId = infraestructureRepository.GetCountryCurrency(iCountry);
                                if (iCurrencyId<= 0)
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Country_Code);
                                    Logger_AddLogMessage(string.Format("GetUserAmountCurrency::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }

                                strCurrencyISOCode = infraestructureRepository.GetCurrencyIsoCode(iCurrencyId);


                            }
                            catch
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Country_Code);
                                Logger_AddLogMessage(string.Format("ConfirmUserData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            PaymentMeanType oPaymentMeanType = PaymentMeanType.pmtDebitCreditCard;
                            try
                            {
                                int iPaymentMeanType = Convert.ToInt32(parametersIn["paymeth"].ToString());
                                oPaymentMeanType = (PaymentMeanType)iPaymentMeanType;
                            }
                            catch
                            {
                                oPaymentMeanType = PaymentMeanType.pmtDebitCreditCard;
                            }

                                                     
                            parametersOut = new SortedList();
                            parametersOut["r"] = (int)ResultType.Result_OK;
                            parametersOut["RefundMoney"] = "0";

                            if (suscriptionType == PaymentSuscryptionType.pstPerTransaction)
                            {
                                List<string> oPerTransactionParameters =  new List<string>();

                                oPerTransactionParameters =  ConfigurationManager.AppSettings["SuscriptionType2_AddPayMethChargeValue"].ToString().Split(';').ToList();

                                for (int i = 0; i < oPerTransactionParameters.Count; i++)
                                {
                                    if (oPerTransactionParameters[i] == strCurrencyISOCode)
                                    {
                                        parametersOut["curr"] = strCurrencyISOCode;
                                        parametersOut["q"] = Convert.ToInt32(oPerTransactionParameters[i+1]);
                                        parametersOut["RefundMoney"] = "1";
                                        break;
                                    }

                                }

                                if (parametersOut["curr"].ToString() != strCurrencyISOCode)
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    return xmlOut;
                                }

                                
                            }
                            else
                            {
                                
                                parametersOut["curr"] = strCurrencyISOCode;
                                parametersOut["q"] = "0";
                                parametersOut["layout"] = "0";
                                OPERATOR oOperator = customersRepository.GetDefaultOperator();
                                if (oOperator != null) parametersOut["layout"] = oOperator.OPR_FEE_LAYOUT;
                                parametersOut["rechdefvalues_base"] = "";
                                parametersOut["rechdefvalues_fee"] = "";
                                parametersOut["rechdefvalues_vat"] = "";
                                parametersOut["rechdefvalues_subtotal"] = "";
                                parametersOut["rechdefvalues"] = "";
                                parametersOut["val_autamo"] = "";
                                parametersOut["val_autbelow"] = "";

                                decimal dPercVAT1;
                                decimal dPercVAT2;
                                decimal dPercFEE;
                                int iPercFEETopped;
                                int iFixedFEE;
                                int? iPaymentTypeId = (int)oPaymentMeanType;
                                int? iPaymentSubtypeId = null;

                                if (!customersRepository.GetFinantialParams(strCurrencyISOCode, "", iPaymentTypeId, iPaymentSubtypeId, ChargeOperationsType.BalanceRecharge,
                                                                            out dPercVAT1, out dPercVAT2, out dPercFEE, out iPercFEETopped, out iFixedFEE))
                                {
                                    rt = ResultType.Result_Error_Generic;
                                    Logger_AddLogMessage(string.Format("GetUserAmountCurrency::Error: Error getting finantial parameters. Result = {0}", rt.ToString()), LogLevels.logERROR);
                                }

                                int iQFEE = 0;
                                int iQVAT = 0;
                                int iQTotal = 0;
                                int iPartialVAT1;
                                int iPartialPercFEE;
                                int iPartialFixedFEE;
                                int iPartialPercFEEVAT;
                                int iPartialFixedFEEVAT;
                                int iQSubTotal;

                                int i = 0;
                                foreach (CURRENCY_RECHARGE_VALUE oRechargeValue in infraestructureRepository
                                                    .Currencies
                                                    .Where(r => r.CUR_ID == iCurrencyId)
                                                    .First().CURRENCY_RECHARGE_VALUEs
                                                    .Where(s=> s.CURV_VALUE_TYPE==(int)RechargeValuesTypes.rvt_SignUp)
                                                    .OrderBy(s => s.CURV_VALUE))
                                {
                                    iQTotal = customersRepository.CalculateFEE(oRechargeValue.CURV_VALUE, dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE, out iPartialPercFEEVAT, out iPartialFixedFEEVAT);

                                    iQFEE = Convert.ToInt32(Math.Round(oRechargeValue.CURV_VALUE * dPercFEE, MidpointRounding.AwayFromZero));
                                    if (iPercFEETopped > 0 && iQFEE > iPercFEETopped) iQFEE = iPercFEETopped;
                                                                                                                                                               
                                    iQFEE += iFixedFEE;
                                    iQVAT = iPartialVAT1 +  iPartialPercFEEVAT + iPartialFixedFEEVAT;
                                    iQSubTotal = oRechargeValue.CURV_VALUE + iQFEE;

                                    parametersOut["rechdefvalues_base"] += string.Format("<value json:Array='true'>{0}</value>", oRechargeValue.CURV_VALUE);
                                    parametersOut["rechdefvalues_fee"] += string.Format("<value json:Array='true'>{0}</value>", iQFEE);
                                    parametersOut["rechdefvalues_vat"] += string.Format("<value json:Array='true'>{0}</value>", iQVAT);
                                    parametersOut["rechdefvalues_subtotal"] += string.Format("<value json:Array='true'>{0}</value>", iQSubTotal);
                                    parametersOut["rechdefvalues"] += string.Format("<value json:Array='true'>{0}</value>", iQTotal);

                                    if (i == 0)
                                    {

                                        string strCulture = "";


                                        if (parametersIn["lang"] != null)
                                        {
                                            try
                                            {
                                                int iLangIndex = Convert.ToInt32(parametersIn["lang"].ToString());
                                                if (iLangIndex <= UserDeviceLangs.Length)
                                                {
                                                    strCulture = UserDeviceLangs[iLangIndex - 1];
                                                }
                                            }
                                            catch
                                            { }


                                        }

                                        parametersOut["IsServFeeToBeAdded"] = (iQFEE != 0 ? "TRUE" : "FALSE");
                                        parametersOut["IsCCFeeToBeAdded"] = "FALSE";
                                        parametersOut["IsTAXToBeAdded"] = (iQVAT != 0 ? "TRUE" : "FALSE");

                                        if (!string.IsNullOrEmpty(strCulture))
                                        {
                                            parametersOut["ServFeeLbl"] = infraestructureRepository.GetLiteral(oOperator.OPR_SERVICE_FEE_LIT_ID ?? 0, strCulture);
                                            parametersOut["CCFeeLbl"] = infraestructureRepository.GetLiteral(oOperator.OPR_SERVICE_FEECC_LIT_ID ?? 0, strCulture);
                                            parametersOut["TAXLbl"] = infraestructureRepository.GetLiteral(oOperator.OPR_SERVICE_VAT_LIT_ID ?? 0, strCulture);
                                            parametersOut["SubtotalLbl"] = infraestructureRepository.GetLiteral(oOperator.OPR_SERVICE_SUBTOTAL_LIT_ID ?? 0, strCulture);
                                            parametersOut["TOLTALLbl"] = infraestructureRepository.GetLiteral(oOperator.OPR_SERVICE_TOTAL_LIT_ID ?? 0, strCulture);
                                        }
                                    }

                                    i++;
                                }


                                foreach (CURRENCY_RECHARGE_VALUE oRechargeValue in infraestructureRepository
                                                .Currencies
                                                .Where(r => r.CUR_ID == iCurrencyId)
                                                .First().CURRENCY_RECHARGE_VALUEs
                                                .Where(s => s.CURV_VALUE_TYPE == (int)RechargeValuesTypes.rvt_AutomaticRecharge)
                                                .OrderBy(s => s.CURV_VALUE))
                                {
                                    parametersOut["val_autamo"] = parametersOut["val_autamo"] + string.Format("<value json:Array='true'>{0}</value>", oRechargeValue.CURV_VALUE);
                                }

                                foreach (CURRENCY_RECHARGE_VALUE oRechargeValue in infraestructureRepository
                                                .Currencies
                                                .Where(r => r.CUR_ID == iCurrencyId)
                                                .First().CURRENCY_RECHARGE_VALUEs
                                                .Where(s => s.CURV_VALUE_TYPE == (int)RechargeValuesTypes.rvt_AutomaticRechargeBelow)
                                                .OrderBy (s => s.CURV_VALUE))
                                {
                                    parametersOut["val_autbelow"] = parametersOut["val_autbelow"] + string.Format("<value json:Array='true'>{0}</value>", oRechargeValue.CURV_VALUE);
                                }

                                


                            }

                            
                            xmlOut = GenerateXMLOuput(parametersOut, new List<string> {"rechdefvalues_base", "rechdefvalues_fee", "rechdefvalues_vat", "rechdefvalues_subtotal", "rechdefvalues", "val_autamo", "val_autbelow"}  );

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("GetUserAmountCurrency::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("GetUserAmountCurrency: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }


                        }
                    }

                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("GetUserAmountCurrency::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }
                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("GetUserAmountCurrency::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

            }

            return xmlOut;
        }



        [WebMethod]
        public string GetUserAmountCurrencyJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("GetUserAmountCurrencyJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = GetUserAmountCurrency(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("GetUserAmountCurrencyJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("GetUserAmountCurrencyJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }

        [WebMethod]
        public string GetSubPayOptions(string xmlIn)
        {
            string xmlOut = "";
            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("GetSubPayOptions: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {
                    string strCalculatedHash = CalculateHash(strHashString, strHash);

                    if (strCalculatedHash != strHash)
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                        Logger_AddLogMessage(string.Format("GetSubPayOptions::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {


                        string strCulture = "";
                        if (parametersIn["lang"] != null)
                        {
                            try
                            {
                                int iLangIndex = Convert.ToInt32(parametersIn["lang"].ToString());
                                if (iLangIndex <= UserDeviceLangs.Length)
                                {
                                    strCulture = UserDeviceLangs[iLangIndex - 1];
                                }
                            }
                            catch
                            { }
                        }

                        string sAppVersion = "1.0";
                        try
                        {
                            if (parametersIn["appvers"] != null)
                                sAppVersion = parametersIn["appvers"].ToString();
                        }
                        catch
                        {                           
                        }

                        ulong ulAppVersion = AppUtilities.AppVersion(sAppVersion);

                        int iCountry = -1;
                        try
                        {
                            iCountry = Convert.ToInt32(parametersIn["ccode"].ToString());
                            string strPrefix = infraestructureRepository.GetCountryTelephonePrefix(iCountry);
                            if (strPrefix.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Country_Code);
                                Logger_AddLogMessage(string.Format("GetSubPayOptions::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }
                        }
                        catch
                        {
                            iCountry = -1;

                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                            Logger_AddLogMessage(string.Format("GetSubPayOptions::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            return xmlOut;
                        }

                        
                        
                        int iCurrencyID = infraestructureRepository.GetCountryCurrency(iCountry);



                        CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG oCreditCardConfig = null;
                        CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG oPaypalConfig = null;

                        parametersOut = new SortedList();
                        parametersOut["r"] = (int)ResultType.Result_OK;
                        parametersOut["subscription_type"] = "";
                        parametersOut["payment_method"] = "";


                        if (iCurrencyID != -1)
                        {
                            oCreditCardConfig = infraestructureRepository
                                .Currencies
                                .Where(r => r.CUR_ID == iCurrencyID)
                                .First() 
                                .CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIGs
                                .Where(r => r.CPTGC_ENABLED != 0 && r.CPTGC_PAT_ID == Convert.ToInt32(PaymentMeanType.pmtDebitCreditCard))
                                .FirstOrDefault();


                            if (oCreditCardConfig != null)
                            {
                                PaymentMeanCreditCardProviderType eProviderType = (PaymentMeanCreditCardProviderType)oCreditCardConfig.CPTGC_PROVIDER;
                                parametersOut["ccprovider"] = (int)eProviderType;
                                parametersOut["per_transaction_minimum_charge_amount"] = oCreditCardConfig.CPTGC_MIN_CHARGE ?? 0;
                                parametersOut["per_transaction_minimum_charge_currency"] = infraestructureRepository.GetCurrencyIsoCode(iCurrencyID);


                                switch (eProviderType)
                                {
                                    case PaymentMeanCreditCardProviderType.pmccpCreditCall:
                                        parametersOut["merchantcode"] = oCreditCardConfig.CPTGC_CC_TERMINAL_ID;
                                        parametersOut["merchantname"] = oCreditCardConfig.CPTGC_CC_SELLER_NAME;
                                        parametersOut["get_token_url"] = oCreditCardConfig.CPTGC_CC_EKASHU_FORM_URL;
                                        parametersOut["mac_key"] = oCreditCardConfig.CPTGC_CC_TRANSACTION_KEY.Substring(0,8);
                                        parametersOut["hash_key"] = string.IsNullOrEmpty(oCreditCardConfig.CPTGC_CC_HASH_KEY) ? "" : oCreditCardConfig.CPTGC_CC_HASH_KEY;
                                        parametersOut["css_url"] = string.IsNullOrEmpty(oCreditCardConfig.CPTGC_CC_CSS_URL) ? "" : oCreditCardConfig.CPTGC_CC_CSS_URL;
                                        break;

                                    case PaymentMeanCreditCardProviderType.pmccpIECISA:
                                        parametersOut["iecisa_token_url"] = oCreditCardConfig.CPTGC_STRIPE_FORM_URL;
                                        parametersOut["iecisa_guid"] = oCreditCardConfig.IECISA_CONFIGURATION.IECCON_GUID;
                                        parametersOut["iecisa_hash_seed_key"] = oCreditCardConfig.IECISA_CONFIGURATION.IECCON_HASH_SEED;
                                        break;

                                    case PaymentMeanCreditCardProviderType.pmccpStripe:
                                        parametersOut["stripe_token_url"] = oCreditCardConfig.CPTGC_STRIPE_FORM_URL;
                                        parametersOut["stripe_guid"] = oCreditCardConfig.STRIPE_CONFIGURATION.STRCON_GUID;
                                        parametersOut["stripe_hash_seed_key"] = oCreditCardConfig.STRIPE_CONFIGURATION.STRCON_HASH_SEED;
                                        break;

                                    default:
                                        break;
                                }

                            }


                            oPaypalConfig = infraestructureRepository
                                .Currencies
                                .Where(r => r.CUR_ID == iCurrencyID)
                                .First() 
                                .CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIGs
                                .Where(r => r.CPTGC_ENABLED != 0 && r.CPTGC_PAT_ID == Convert.ToInt32(PaymentMeanType.pmtPaypal))
                                .FirstOrDefault();


                            if (oPaypalConfig != null)
                            {
                                parametersOut["Paypal_Client_id"] = oPaypalConfig.CPTGC_PP_RESTAPI_CLIENT_ID;
                                parametersOut["Paypal_Environment"] = oPaypalConfig.CPTGC_PP_RESTAPI_ENVIRONMENT;
                            }
                        }


                        string sSuscriptionType = "";
                        RefundBalanceType eRefundBalType = RefundBalanceType.rbtAmount;
                        infraestructureRepository.GetCountryPossibleSuscriptionTypes(iCountry, out sSuscriptionType, out eRefundBalType);

                        foreach (PaymentSuscryptionType oSuscriptionType in System.Enum.GetValues(typeof(PaymentSuscryptionType)))
                        {
                            parametersOut["subscription_type"] += string.Format("<st json:Array='true' id= \"{0}\">", (int)oSuscriptionType);
                            if (sSuscriptionType != "")
                                parametersOut["subscription_type"] += (sSuscriptionType == (((int)oSuscriptionType).ToString()) ? "1" : "0");
                            else
                                parametersOut["subscription_type"] += "1";
                            parametersOut["subscription_type"] += "</st>";

                            string sPaymentMeanType = ConfigurationManager.AppSettings[string.Format("PaymentMeanType_{0}", Enum.GetName(typeof(PaymentSuscryptionType), oSuscriptionType))] ?? "";

                            parametersOut["payment_method"] += string.Format("<st xmlns:json='http://james.newtonking.com/projects/json' json:Array='true' id= \"{0}\">", (int)oSuscriptionType);
                            foreach (PaymentMeanType oPaymentMeanType in System.Enum.GetValues(typeof(PaymentMeanType)))
                            {
                                parametersOut["payment_method"] += string.Format("<pm json:Array='true' id= \"{0}\">", (int)oPaymentMeanType);

                                string strParamName = string.Format("PaymentMeanType_{0}_{1}", Enum.GetName(typeof(PaymentSuscryptionType), oSuscriptionType),
                                                                                               Enum.GetName(typeof(PaymentMeanType), oPaymentMeanType));

                                string strPMValue = ConfigurationManager.AppSettings[strParamName] ?? "0";

                                if ((oPaymentMeanType == PaymentMeanType.pmtDebitCreditCard) && (oCreditCardConfig != null))
                                {
                                    PaymentMeanCreditCardProviderType eProviderType = (PaymentMeanCreditCardProviderType)oCreditCardConfig.CPTGC_PROVIDER;
                                    strPMValue = ((int)eProviderType).ToString();
                                }
                                else if ((oPaymentMeanType == PaymentMeanType.pmtDebitCreditCard) && (oCreditCardConfig == null))
                                {
                                    strPMValue = "0";
                                }
                                else if ((oPaymentMeanType == PaymentMeanType.pmtPaypal) && (oPaypalConfig != null))
                                {
                                    strPMValue = "0";
                                    //cambiar a "1" cuando estemos listos para recibir datos paypal en confirm user data
                                }
                                else if ((oPaymentMeanType == PaymentMeanType.pmtPaypal) && (oPaypalConfig == null))
                                {
                                    strPMValue = "0";
                                }

                                parametersOut["payment_method"] += strPMValue;

                                parametersOut["payment_method"] += "</pm>";
                            }
                            parametersOut["payment_method"] += "</st>";
                        }

                        string sLicenseTermsVersion = "";
                        string sLicenseTermsUrl = "";
                        string sConditionsUrl = "";
                        parametersOut["legalterms"] = (customersRepository.NeedDisplayLicenseTerms(null, strCulture, out sLicenseTermsVersion, out sLicenseTermsUrl, out sConditionsUrl) ? "1" : "0");
                        parametersOut["legaltermsver"] = sLicenseTermsVersion;
                        parametersOut["url1"] = sLicenseTermsUrl;
                        parametersOut["url2"] = sConditionsUrl;

                        xmlOut = GenerateXMLOuput(parametersOut, new List<string> { "subscription_type", "payment_method" });

                        if (xmlOut.Length == 0)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                            Logger_AddLogMessage(string.Format("GetSubPayOptions::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            Logger_AddLogMessage(string.Format("GetSubPayOptions: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                        }
                    }
                    
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("GetSubPayOptions::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                }
                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("GetSubPayOptions::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
            }

            return xmlOut;
        }


        [WebMethod]
        public string GetSubPayOptionsJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("GetSubPayOptionsJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = GetSubPayOptions(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("GetSubPayOptionsJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("GetSubPayOptionsJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }


        [WebMethod]
        public string DeleteLicensePlate(string xmlIn)
        {
            string xmlOut = "";
            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("DeleteLicensePlate: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {
                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["license"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("DeleteLicensePlate::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {

                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("DeleteLicensePlate::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {

                            USER oUser = null;
                            rt = GetUserData(ref oUser, parametersIn);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("DeleteLicensePlate::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            bool bRet = customersRepository.DeletePlate(ref oUser, parametersIn["license"].ToString());
                            
                            parametersOut = new SortedList();
                            if (bRet)
                                parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();
                            else
                                parametersOut["r"] = "0";

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("DeleteLicensePlate::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("DeleteLicensePlate: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                            oUser = null;
                        }
                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("DeleteLicensePlate::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                }
                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("DeleteLicensePlate::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
            }

            return xmlOut;
        }


        [WebMethod]
        public string DeleteLicensePlateJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("DeleteLicensePlateJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = DeleteLicensePlate(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("DeleteLicensePlateJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("DeleteLicensePlateJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }

        [WebMethod]
        public string AddLicensePlate(string xmlIn)
        {
            string xmlOut = "";
            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("AddLicensePlate: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {
                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["license"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("AddLicensePlate::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {

                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("AddLicensePlate::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {

                            USER oUser = null;
                            rt = GetUserData(ref oUser, parametersIn);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("AddLicensePlate::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }


                            string strPlate = NormalizePlate(parametersIn["license"].ToString());
                          

                            if (strPlate.Length > 0)
                            {
                                string strPlateSharing = infraestructureRepository.GetParameterValue("PlateSharing");
                                bool bPlateSharing = true;

                                if (!string.IsNullOrEmpty(strPlateSharing))
                                {
                                    bPlateSharing = (strPlateSharing != "0");
                                }

                                if (!customersRepository.IsPlateOfUser(ref oUser, strPlate))
                                {
                                    if (bPlateSharing || !customersRepository.IsPlateAssignedToAnotherUser(ref oUser, strPlate))
                                    {
                                        if (!customersRepository.AddPlateToUser(ref oUser, strPlate))
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                            Logger_AddLogMessage(string.Format("AddLicensePlate::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }
                                    }
                                    else
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Plate_Is_Assigned_To_Another_User);
                                        Logger_AddLogMessage(string.Format("AddLicensePlate::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;

                                    }
                                }                             
                            }
                            else
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("AddLicensePlate::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }


                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("AddLicensePlate::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("AddLicensePlate: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                            oUser = null;
                        }
                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("AddLicensePlate::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                }
                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("AddLicensePlate::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
            }

            return xmlOut;
        }


        [WebMethod]
        public string AddLicensePlateJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("AddLicensePlateJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = AddLicensePlate(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("AddLicensePlateJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("AddLicensePlateJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }
        


        [WebMethod]
        public string GetListOfCities(string xmlIn)
        {
            string xmlOut = "";
            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("GetListOfCities: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {
                    string strCalculatedHash = CalculateHash(strHashString, strHash);

                    if (strCalculatedHash != strHash)
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                        Logger_AddLogMessage(string.Format("GetListOfCities::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {

                        decimal? dLatitude = null;
                        decimal? dLongitude = null;

                        NumberFormatInfo numberFormatProvider = new NumberFormatInfo();
                        numberFormatProvider.NumberDecimalSeparator = ".";

                        string sValue = "";

                        try
                        {
                            sValue = parametersIn["gps_lat"].ToString();
                            if (sValue.IndexOf(",") > 0) numberFormatProvider.NumberDecimalSeparator = ",";
                            decimal dTryLatitude = Convert.ToDecimal(parametersIn["gps_lat"].ToString(), numberFormatProvider);
                            dLatitude = dTryLatitude;
                        }
                        catch
                        {
                            dLatitude = null;
                        }

                        try
                        {
                            sValue = parametersIn["gps_long"].ToString();
                            if (sValue.IndexOf(",") > 0) numberFormatProvider.NumberDecimalSeparator = ",";
                            decimal dTryLongitude = Convert.ToDecimal(parametersIn["gps_long"].ToString(), numberFormatProvider);
                            dLongitude = dTryLongitude;
                        }
                        catch
                        {
                            dLongitude = null;
                        }

                        var installations = geograficAndTariffsRepository.getInstallationsList();
                        INSTALLATION oGpsInstallation = null;
                        DateTime? dInsDatetime = null;
                        if (!geograficAndTariffsRepository.getInstallation(null, dLatitude, dLongitude, ref oGpsInstallation, ref dInsDatetime))
                        {
                            oGpsInstallation = null;
                        }
                        else
                        {
                            Logger_AddLogMessage(string.Format("GetListOfCities::GPS Installation Found: {0}", oGpsInstallation.INS_DESCRIPTION), LogLevels.logDEBUG);
                        }

                        parametersOut = new SortedList();
                        parametersOut["r"] = (int)ResultType.Result_OK;

                        parametersOut["cities"] = "";
                        foreach (INSTALLATION oInstallation in installations)
                        {
                            parametersOut["cities"] += string.Format("<city json:Array='true' id=\"{0}\">{1}</city>", Convert.ToInt64(oInstallation.INS_ID), oInstallation.INS_DESCRIPTION);
                        }

                        parametersOut["gpscity"] = (oGpsInstallation != null ? Convert.ToInt64(oGpsInstallation.INS_ID).ToString() : "-1");
                        parametersOut["ccode"] = (oGpsInstallation != null ? Convert.ToInt64(oGpsInstallation.COUNTRy.COU_ID).ToString() : "-1");
                        //parametersOut["gpscity"] = "-1";

                        string strIsGPSMandatory = infraestructureRepository.GetParameterValue("GetListOfCities_isGPSMandatory");
                        string strLoginAccuracy = infraestructureRepository.GetParameterValue("GetListOfCities_LoginAccuracy");
                        string strGPSLoginTimeout = infraestructureRepository.GetParameterValue("GetListOfCities_GPSLoginTimeout");
                        string strComboCityCrit = infraestructureRepository.GetParameterValue("GetListOfCities_ComboCityCrit");


                        if (!string.IsNullOrEmpty(strIsGPSMandatory))
                            parametersOut["isGPSMandatory"] = strIsGPSMandatory;
                        if (!string.IsNullOrEmpty(strLoginAccuracy))
                            parametersOut["LoginAccuracy"] = strLoginAccuracy;
                        if (!string.IsNullOrEmpty(strGPSLoginTimeout))
                            parametersOut["GPSLoginTimeout"] = strGPSLoginTimeout;
                        if (!string.IsNullOrEmpty(strComboCityCrit))
                            parametersOut["ComboCityCrit"] = strComboCityCrit;

                        xmlOut = GenerateXMLOuput(parametersOut, new List<string> {"cities"});

                        if (xmlOut.Length == 0)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                            Logger_AddLogMessage(string.Format("GetListOfCities::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            Logger_AddLogMessage(string.Format("GetListOfCities: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                        }
                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("GetListOfCities::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                }
                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }


            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("GetListOfCities::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
            }

            return xmlOut;
        }

        [WebMethod]
        public string GetListOfCitiesJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("GetListOfCitiesJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = GetListOfCities(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("GetListOfCitiesJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("GetListOfCitiesJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }



        [WebMethod]
        public string ChangeSubscriptionType(string xmlIn)
        {
            string xmlOut = "";
            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("ChangeSubscriptionType: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {
                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["subscription_type"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("ChangeSubscriptionType::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {

                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("ChangeSubscriptionType::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {

                            USER oUser = null;
                            rt = GetUserData(ref oUser, parametersIn);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("ChangeSubscriptionType::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }


                            PaymentSuscryptionType? suscriptionType = (PaymentSuscryptionType?)oUser.USR_SUSCRIPTION_TYPE;
                            string sSuscriptionType = "";
                            RefundBalanceType eRefundBalType = RefundBalanceType.rbtAmount;
                            customersRepository.GetUserPossibleSuscriptionTypes(ref oUser, infraestructureRepository, out sSuscriptionType, out eRefundBalType);


                            try
                            {
                                if (((int)PaymentSuscryptionType.pstPrepay).ToString() == sSuscriptionType)
                                {
                                    suscriptionType = PaymentSuscryptionType.pstPrepay;
                                }
                                else if (((int)PaymentSuscryptionType.pstPerTransaction).ToString() == sSuscriptionType)
                                {
                                    suscriptionType = PaymentSuscryptionType.pstPerTransaction;
                                }
                                else
                                {

                                    string sSuscType = parametersIn["subscription_type"] != null ? parametersIn["subscription_type"].ToString() : "";
                                    int iSuscType = -1;

                                    try
                                    {
                                        if (!string.IsNullOrEmpty(sSuscType))
                                        {
                                            iSuscType = Convert.ToInt32(sSuscType);
                                        }
                                    }
                                    catch
                                    {
                                    }

                                    if (iSuscType != -1)
                                    {
                                        suscriptionType = (PaymentSuscryptionType)iSuscType;
                                    }
                                }

                            }
                            catch
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("ChangeSubscriptionType::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            

                            bool bRet = true;
                            if ((PaymentSuscryptionType?)oUser.USR_SUSCRIPTION_TYPE != suscriptionType)
                            {
                                bRet = customersRepository.SetUserSuscriptionType(ref oUser, suscriptionType.Value);
                            }

                            
                            parametersOut = new SortedList();
                            if (bRet)
                                parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();
                            else
                                parametersOut["r"] = "0";

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("ChangeSubscriptionType::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("ChangeSubscriptionType: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                            oUser = null;
                        }
                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("ChangeSubscriptionType::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                }
                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("ChangeSubscriptionType::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
            }

            return xmlOut;
        }


        [WebMethod]
        public string ChangeSubscriptionTypeJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("ChangeSubscriptionTypeJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = ChangeSubscriptionType(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("ChangeSubscriptionTypeJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("ChangeSubscriptionTypeJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }



        [WebMethod]
        public string GetSplashCarrousel(string xmlIn)
        {
            string xmlOut = "";
            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("GetSplashCarrousel: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {
                    string strCalculatedHash = CalculateHash(strHashString, strHash);

                    if (strCalculatedHash != strHash)
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                        Logger_AddLogMessage(string.Format("GetSplashCarrousel::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {

                        int? ikeynotevers = null;
                        int? ilang = null;

                        NumberFormatInfo numberFormatProvider = new NumberFormatInfo();
                        numberFormatProvider.NumberDecimalSeparator = ".";

                        string sValue = "";

                        try
                        {
                            sValue = parametersIn["keynoteVers"].ToString();
                            if (sValue.IndexOf(",") > 0) numberFormatProvider.NumberDecimalSeparator = ",";
                            int iTrykeynotevers = Convert.ToInt32(parametersIn["keynoteVers"].ToString(), numberFormatProvider);
                            ikeynotevers = iTrykeynotevers;
                        }
                        catch
                        {
                            ikeynotevers = 0;
                        }

                        try
                        {
                            sValue = parametersIn["lang"].ToString();
                            if (sValue.IndexOf(",") > 0) numberFormatProvider.NumberDecimalSeparator = ",";
                            int iTrylang = Convert.ToInt32(parametersIn["lang"].ToString(), numberFormatProvider);
                            ilang = iTrylang;
                            string strCulture = "";
                            if (ilang <= UserDeviceLangs.Length)
                            {
                                strCulture = UserDeviceLangs[ilang.Value - 1];
                            }

                        }
                        catch
                        {
                            ilang = 1;
                        }


                        decimal? dLatitude = null;
                        decimal? dLongitude = null;

                        try
                        {
                            sValue = parametersIn["gps_lat"].ToString();
                            if (sValue.IndexOf(",") > 0) numberFormatProvider.NumberDecimalSeparator = ",";
                            decimal dTryLatitude = Convert.ToDecimal(parametersIn["gps_lat"].ToString(), numberFormatProvider);
                            dLatitude = dTryLatitude;
                        }
                        catch
                        {
                            dLatitude = null;
                        }

                        try
                        {
                            sValue = parametersIn["gps_long"].ToString();
                            if (sValue.IndexOf(",") > 0) numberFormatProvider.NumberDecimalSeparator = ",";
                            decimal dTryLongitude = Convert.ToDecimal(parametersIn["gps_long"].ToString(), numberFormatProvider);
                            dLongitude = dTryLongitude;
                        }
                        catch
                        {
                            dLongitude = null;
                        }


                        CARROUSEL_SCREEN_VERSION oCarrouselVersion = null;
   
                        if (infraestructureRepository.getCarrouselVersion(ikeynotevers.Value, ilang.Value, out oCarrouselVersion))
                        {

                            parametersOut = new SortedList();

                            var installations = geograficAndTariffsRepository.getInstallationsList();
                            INSTALLATION oGpsInstallation = null;
                            DateTime? dInsDatetime = null;
                            if (!geograficAndTariffsRepository.getInstallation(null, dLatitude, dLongitude, ref oGpsInstallation, ref dInsDatetime))
                            {
                                oGpsInstallation = null;
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("GetSplashCarrousel::GPS Installation Found: {0}", oGpsInstallation.INS_DESCRIPTION), LogLevels.logDEBUG);
                            }

                            parametersOut["gpscity"] = (oGpsInstallation != null ? Convert.ToInt64(oGpsInstallation.INS_ID).ToString() : "-1");
                            parametersOut["ccode"] = (oGpsInstallation != null ? Convert.ToInt64(oGpsInstallation.COUNTRy.COU_ID).ToString() : "-1");                            
                                                                                                              
                            parametersOut["r"] = (int)ResultType.Result_OK;
                            parametersOut["keynoteVers"] = ikeynotevers;

                            if (oCarrouselVersion!=null)
                            {
                                parametersOut["keynoteVers"] = oCarrouselVersion.CASCV_VERSION_NUMBER;
                                parametersOut["delay"] = oCarrouselVersion.CASCV_DELAY_BETWEEN_IMAGES;
                                parametersOut["images"] = "";


                                foreach (CARRAUSEL_SCREEN oImage in oCarrouselVersion.CARRAUSEL_SCREENs.OrderBy(r=>r.CASCR_ORDER))
                                {
                                    parametersOut["images"] += "<image json:Array='true'>";
                                    parametersOut["images"] += string.Format("<url>{0}</url>", oImage.CASCR_URL);
                                    parametersOut["images"] += string.Format("<title>{0}</title>", oImage.CASCR_TITLE);
                                    parametersOut["images"] += string.Format("<text>{0}</text>", oImage.CASCR_TEXT);
                                    parametersOut["images"] += string.Format("<bgColorDown>{0}</bgColorDown>", oImage.CASCR_BGCOLORDOWN);
                                    parametersOut["images"] += string.Format("<bgColorUp>{0}</bgColorUp>", oImage.CASCR_BGCOLORUP);
                                    parametersOut["images"] += "</image>";
                                }

                                
                            }


                            xmlOut = GenerateXMLOuput(parametersOut, new List<string> {"images"});

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("GetSplashCarrousel::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("GetSplashCarrousel: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }


                        }
                        else
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                            Logger_AddLogMessage(string.Format("GetSplashCarrousel::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }

                                                
                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("GetSplashCarrousel::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                }
                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }


            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("GetSplashCarrousel::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
            }

            return xmlOut;
        }

        [WebMethod]
        public string GetSplashCarrouselJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("GetSplashCarrouselJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = GetSplashCarrousel(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("GetSplashCarrouselJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("GetSplashCarrouselJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }
        
        
        
        [WebMethod]
        public string QueryOccupation(string xmlIn)
        {
            string xmlOut = "";
            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("QueryOccupation: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {
                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["cityID"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("DeleteLicensePlate::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {

                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("QueryOccupation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {

                            USER oUser = null;
                            rt = GetUserData(ref oUser, parametersIn);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("QueryOccupation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            decimal? dInstallationId = null;

                            try
                            {
                                decimal dTryInstallationId = Convert.ToDecimal(parametersIn["cityID"].ToString());
                                dInstallationId = dTryInstallationId;
                            }
                            catch
                            {
                                dInstallationId = null;
                            }

                            IEnumerable<stZone> zones = null;
                            if (dInstallationId.HasValue)
                                zones = geograficAndTariffsRepository.getInstallationGroupHierarchy(dInstallationId.Value);



                            parametersOut = new SortedList();
                            parametersOut["r"] = (int)ResultType.Result_OK;

                            parametersOut["ZoneOcup"] = GetOccupationXml(zones, "zone");

                            xmlOut = GenerateXMLOuput(parametersOut, new List<string> { "ZoneOcup" });

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("QueryOccupation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("QueryOccupation: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                            oUser = null;
                        }
                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("QueryOccupation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }


            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("QueryOccupation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
            }

            return xmlOut;
        }

        [WebMethod]
        public string QueryOccupationJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("QueryOccupationJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = QueryOccupation(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("QueryOccupationJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("QueryOccupationJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }

        [WebMethod]
        public string QueryStreetSectionsOccupation(string xmlIn)
        {
            string xmlOut = "";
            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("QueryStreetSectionsOccupation: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {
                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["cityID"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("QueryStreetSectionsOccupation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {

                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("QueryStreetSectionsOccupation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {

                            USER oUser = null;
                            rt = GetUserData(ref oUser, parametersIn);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("QueryStreetSectionsOccupation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            decimal? dInstallationId = null;

                            try
                            {
                                decimal dTryInstallationId = Convert.ToDecimal(parametersIn["cityID"].ToString());
                                dInstallationId = dTryInstallationId;
                            }
                            catch
                            {
                                dInstallationId = null;
                            }

                            INSTALLATION oInstallation = null;
                            if (dInstallationId.HasValue)
                            {
                                DateTime? dtinstDateTime = null;
                                decimal? dInsLatitude = null;
                                decimal? dInsLongitude = null;

                                if (!geograficAndTariffsRepository.getInstallation(dInstallationId,
                                                                                   dInsLatitude,
                                                                                   dInsLongitude,
                                                                                   ref oInstallation,
                                                                                   ref dtinstDateTime))
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_City);
                                    Logger_AddLogMessage(string.Format("QueryStreetSectionsOccupation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                            }
                            else
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_City);
                                Logger_AddLogMessage(string.Format("QueryStreetSectionsOccupation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            List<STREET_SECTIONS_OCCUPANCY> oLstStrSeOccupancy=null;


                            geograficAndTariffsRepository.GetStreetSectionsOccupancy(dInstallationId.Value, out oLstStrSeOccupancy);                            


                            parametersOut = new SortedList();
                            parametersOut["r"] = (int)ResultType.Result_OK;
                            parametersOut["cl1"] = infraestructureRepository.GetParameterValue("Occupancy_Level1_Colour");
                            parametersOut["cl2"] = infraestructureRepository.GetParameterValue("Occupancy_Level2_Colour");
                            parametersOut["cl3"] = infraestructureRepository.GetParameterValue("Occupancy_Level3_Colour");
                            parametersOut["pl1"] = infraestructureRepository.GetParameterValue("Occupancy_Level1_Perc");
                            parametersOut["pl2"] = infraestructureRepository.GetParameterValue("Occupancy_Level2_Perc");

                            StringBuilder strOccup = new StringBuilder();
                            int i = 0;

                            foreach (STREET_SECTIONS_OCCUPANCY oReg in oLstStrSeOccupancy)
                            {
                                if (i > 0)
                                {
                                    strOccup.Append("|");
                                }
                                strOccup.Append(string.Format("{0};{1};{2}",oReg.STRSEOC_STRSE_ID, oReg.STRSEOC_TOTAL_NUM_PLACES, oReg.STRSEOC_OCC_NUM_PLACES));
                                i++;
                            }

                             parametersOut["o"] = strOccup.ToString();
                            

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("QueryStreetSectionsOccupation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("QueryStreetSectionsOccupation: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                            oUser = null;
                        }
                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("QueryStreetSectionsOccupation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }


            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("QueryStreetSectionsOccupation::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
            }

            return xmlOut;
        }

        [WebMethod]
        public string QueryStreetSectionsOccupationJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("QueryOccupationJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = QueryStreetSectionsOccupation(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("QueryOccupationJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("QueryStreetSectionsOccupationJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }

   

        [WebMethod]
        public string ModifyCCData(string xmlIn)
        {
            string xmlOut = "";
            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("ModifyCCData: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    PaymentMeanCreditCardProviderType CCProvider;

                    try
                    {
                        int iCCProvider = Convert.ToInt32(parametersIn["ccprovider"].ToString());
                        CCProvider = (PaymentMeanCreditCardProviderType)iCCProvider;
                    }
                    catch
                    {
                        Logger_AddLogMessage(string.Format("ModifyCCData::Invalid ccprovider. Setting to 1(Credit Call)"), LogLevels.logDEBUG); ;
                        CCProvider = PaymentMeanCreditCardProviderType.pmccpCreditCall;
                    }
                 
                   
                    if (((CCProvider == PaymentMeanCreditCardProviderType.pmccpCreditCall) &&
                                ((parametersIn["ekashu_transaction_id"] == null))) ||
                        ((CCProvider == PaymentMeanCreditCardProviderType.pmccpIECISA) &&
                                ((parametersIn["iecisa_CF_TicketNumber"] == null) ||
                                (parametersIn["iecisa_CF_AuthCode"] == null) ||
                                (parametersIn["iecisa_CF_Result"] == null) ||
                                (parametersIn["iecisa_CF_TransactionID"] == null) ||
                                (parametersIn["iecisa_TransactionID"] == null) ||                                
                                (parametersIn["iecisa_CF_Token"] == null) ||
                                (parametersIn["iecisa_CF_PAN"] == null) ||
                                (parametersIn["iecisa_GatewayDate"] == null) ||
                                (parametersIn["iecisa_CF_ExpirationDate"] == null))) ||
                        ((CCProvider == PaymentMeanCreditCardProviderType.pmccpStripe) &&
                                ((parametersIn["stripe_customer_id"] == null) ||
                                (parametersIn["stripe_card_reference"] == null) ||
                                (parametersIn["stripe_card_scheme"] == null) ||
                                (parametersIn["stripe_masked_card_number"] == null) ||
                                (parametersIn["stripe_expires_end_month"] == null) ||
                                (parametersIn["stripe_expires_end_year"] == null) ||
                                (parametersIn["stripe_transaction_id"] == null) ||
                                (parametersIn["stripe_date_time_utc"] == null))) ||
                        (parametersIn["ccchargedquantity"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("ModifyCCData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("ModifyCCData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {

                            USER oUser = null;
                            decimal? dInsId = null;
                            string strCulture = "";
                            string strAppVersion = "";

                            rt = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("ModifyCCData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            PaymentSuscryptionType? suscriptionType = (PaymentSuscryptionType?)oUser.USR_SUSCRIPTION_TYPE;
                           
                            string sSuscriptionType = "";
                            RefundBalanceType eRefundBalType = RefundBalanceType.rbtAmount;
                            customersRepository.GetUserPossibleSuscriptionTypes(ref oUser, infraestructureRepository, out sSuscriptionType, out eRefundBalType);

                            try
                            {

                                if (((int)PaymentSuscryptionType.pstPrepay).ToString() == sSuscriptionType)
                                {
                                    suscriptionType = PaymentSuscryptionType.pstPrepay;
                                }
                                else if (((int)PaymentSuscryptionType.pstPerTransaction).ToString() == sSuscriptionType)
                                {
                                    suscriptionType = PaymentSuscryptionType.pstPerTransaction;
                                }
                                else
                                {

                                    string sSuscType = parametersIn["subscription_type"] != null ? parametersIn["subscription_type"].ToString() : "";                      
                                    int iSuscType = -1;

                                    try
                                    {
                                        if (!string.IsNullOrEmpty(sSuscType))
                                        {
                                            iSuscType = Convert.ToInt32(sSuscType);
                                        }
                                    }
                                    catch
                                    {
                                    }

                                    if (iSuscType != -1)
                                    {
                                        suscriptionType = (PaymentSuscryptionType)iSuscType;
                                    }
                                }

                            }
                            catch
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("ModifyCCData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            if (!suscriptionType.HasValue)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_User_Has_no_Suscription_Type);
                                Logger_AddLogMessage(string.Format("ModifyCCData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            xmlOut = ModifyCCData(xmlIn, parametersIn, CCProvider, PaymentMeanRechargeCreationType.pmrctChangePaymentMeanRecharge,  suscriptionType, ref oUser, ref parametersOut);

                        }

                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("ModifyCCData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("ModifyCCData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;
        }


        [WebMethod]
        public string ModifyCCDataJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = ModifyCCData(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("ModifyCCDataJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }


        [WebMethod]
        public string ModifyCCDataNewUser(string xmlIn)
        {
            string xmlOut = "";
            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("ModifyCCDataNewUser: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    PaymentMeanCreditCardProviderType CCProvider;

                    try
                    {
                        int iCCProvider = Convert.ToInt32(parametersIn["ccprovider"].ToString());
                        CCProvider = (PaymentMeanCreditCardProviderType)iCCProvider;
                    }
                    catch
                    {
                        Logger_AddLogMessage(string.Format("ModifyCCDataNewUser::Invalid ccprovider. Setting to 1(Credit Call)"), LogLevels.logDEBUG); ;
                        CCProvider = PaymentMeanCreditCardProviderType.pmccpCreditCall;
                    }
              

                    if (((CCProvider == PaymentMeanCreditCardProviderType.pmccpCreditCall) &&
                                ((parametersIn["ekashu_transaction_id"] == null))) ||
                        ((CCProvider == PaymentMeanCreditCardProviderType.pmccpIECISA) &&
                                ((parametersIn["iecisa_CF_TicketNumber"] == null) ||
                                (parametersIn["iecisa_CF_AuthCode"] == null) ||
                                (parametersIn["iecisa_CF_Result"] == null) ||
                                (parametersIn["iecisa_CF_TransactionID"] == null) ||
                                (parametersIn["iecisa_TransactionID"] == null) ||                                
                                (parametersIn["iecisa_CF_Token"] == null) ||
                                (parametersIn["iecisa_CF_PAN"] == null) ||
                                (parametersIn["iecisa_GatewayDate"] == null) ||
                                (parametersIn["iecisa_CF_ExpirationDate"] == null))) ||
                        ((CCProvider == PaymentMeanCreditCardProviderType.pmccpStripe) &&
                                ((parametersIn["stripe_customer_id"] == null) ||
                                (parametersIn["stripe_card_reference"] == null) ||
                                (parametersIn["stripe_card_scheme"] == null) ||
                                (parametersIn["stripe_masked_card_number"] == null) ||
                                (parametersIn["stripe_expires_end_month"] == null) ||
                                (parametersIn["stripe_expires_end_year"] == null) ||
                                (parametersIn["stripe_transaction_id"] == null) ||
                                (parametersIn["stripe_date_time_utc"] == null))) ||
                                (parametersIn["signup_guid"] == null) ||
                                (parametersIn["u"] == null) ||
                                (parametersIn["ccchargedquantity"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("ModifyCCDataNewUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("ModifyCCDataNewUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {


                                USER oUser = null;

                                if (customersRepository.GetUserData(ref oUser, parametersIn["u"].ToString()))
                                {
                                    if (oUser != null)
                                    {
                                        if (oUser.USR_SIGNUP_GUID==parametersIn["signup_guid"].ToString())
                                        {

                                            PaymentSuscryptionType? suscriptionType = (PaymentSuscryptionType?)oUser.USR_SUSCRIPTION_TYPE;
                                            string sSuscriptionType = "";
                                            RefundBalanceType eRefundBalType = RefundBalanceType.rbtAmount;

                                            customersRepository.GetUserPossibleSuscriptionTypes(ref oUser, infraestructureRepository, out sSuscriptionType, out eRefundBalType);

                                            try
                                            {
                                                if (((int)PaymentSuscryptionType.pstPrepay).ToString() == sSuscriptionType)
                                                {
                                                    suscriptionType = PaymentSuscryptionType.pstPrepay;
                                                }
                                                else if (((int)PaymentSuscryptionType.pstPerTransaction).ToString() == sSuscriptionType)
                                                {
                                                    suscriptionType = PaymentSuscryptionType.pstPerTransaction;
                                                }
                                                else
                                                {

                                                    string sSuscType = parametersIn["subscription_type"] != null ? parametersIn["subscription_type"].ToString() : "";
                                                    int iSuscType = -1;

                                                    try
                                                    {
                                                        if (!string.IsNullOrEmpty(sSuscType))
                                                        {
                                                            iSuscType = Convert.ToInt32(sSuscType);
                                                        }
                                                    }
                                                    catch
                                                    {
                                                    }

                                                    if (iSuscType != -1)
                                                    {
                                                        suscriptionType = (PaymentSuscryptionType)iSuscType;
                                                    }
                                                }

                                            }
                                            catch
                                            {
                                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                                Logger_AddLogMessage(string.Format("ModifyCCDataNewUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                return xmlOut;
                                            }

                                            if (!suscriptionType.HasValue)
                                            {
                                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_User_Has_no_Suscription_Type);
                                                Logger_AddLogMessage(string.Format("ModifyCCDataNewUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                                return xmlOut;
                                            }

                                            xmlOut = ModifyCCData(xmlIn, parametersIn, CCProvider, PaymentMeanRechargeCreationType.pmrctUserCreationRecharge , suscriptionType, ref oUser, ref parametersOut);
                                            oUser = null;
                                        }
                                        else
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthentication);
                                            Logger_AddLogMessage(string.Format("ModifyCCDataNewUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        }                                        
                                    }
                                    else
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_User);
                                        Logger_AddLogMessage(string.Format("ModifyCCDataNewUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    }
                                }
                                else
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_User);
                                    Logger_AddLogMessage(string.Format("ModifyCCDataNewUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                }

                                                       
                        }

                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("ModifyCCDataNewUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("ModifyCCDataNewUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;
        }


        [WebMethod]
        public string ModifyCCDataNewUserJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("ModifyCCDataNewUserJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = ModifyCCDataNewUser(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("ModifyCCDataNewUserSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("ModifyCCDataNewUserJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }



        [WebMethod]
        public string GetUserBalance(string xmlIn)
        {
            string xmlOut = "";
            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("GetUserBalance: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {
                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("GetUserBalance::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {

                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("GetUserBalance::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {

                            USER oUser = null;
                            rt = GetUserData(ref oUser, parametersIn);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("GetUserBalance::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }


                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();
                            parametersOut["sessiontimeout"] = ConfigurationManager.AppSettings["SessionTimeoutInMinutes"].ToString();
                            parametersOut["cur"] = oUser.CURRENCy.CUR_ISO_CODE;
                            parametersOut["bal"] = oUser.USR_BALANCE.ToString();
                            parametersOut["time_bal"] = oUser.USR_TIME_BALANCE.ToString();
                            parametersOut["curid"] = oUser.CURRENCy.CUR_ID;


                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("GetUserBalance::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("GetUserBalance: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                            oUser = null;
                        }
                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("GetUserBalance::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                }
                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("GetUserBalance::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
            }

            return xmlOut;
        }


        [WebMethod]
        public string GetUserBalanceJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("GetUserBalanceJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = GetUserBalance(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("GetUserBalanceJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("GetUserBalanceJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }


        [WebMethod]
        public string DeleteUser(string xmlIn)
        {
            string xmlOut = "";
            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("DeleteUser: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {
                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null))
                       
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("DeleteUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {

                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("DeleteUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {

                            USER oUser = null;
                            rt = GetUserData(ref oUser, parametersIn);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("DeleteUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                               
                            if (!customersRepository.DeleteUser(ref oUser))
                            {
                                       
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("DeleteUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }
                            FormAuthMemberShip.MembershipService.DeleteUser(oUser.USR_USERNAME);

                            if (!string.IsNullOrEmpty(ResourceExtension.GetLiteral("DeleteUserEmail_Body")))
                            {
                                string culture = oUser.USR_CULTURE_LANG;
                                CultureInfo ci = new CultureInfo(culture);
                                Thread.CurrentThread.CurrentUICulture = ci;
                                Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(ci.Name);

                                infraestructureRepository.SendEmailTo(oUser.USR_EMAIL, ResourceExtension.GetLiteral("DeleteUserEmail_Subject"),
                                                                        string.Format(ResourceExtension.GetLiteral("DeleteUserEmail_Body"),oUser.USR_EMAIL,
                                                                            GetEmailFooter(ref oUser)));

                              
                            }

                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("DeleteUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("DeleteUser: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                            oUser = null;
                        }
                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("DeleteUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                }
                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("DeleteUser::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
            }

            return xmlOut;
        }


        [WebMethod]
        public string DeleteUserJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("DeleteUserJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = DeleteUser(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("DeleteUserJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("DeleteUserJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }


        [WebMethod]
        public int HealthCheck()
        {
            int iRes = -1;
            try
            {
                iRes = customersRepository.HealthCheck();
                Logger_AddLogMessage(string.Format("HealthCheck({0}): iRes = {1}, ", _ipsString, iRes), LogLevels.logINFO);
            }
            catch (Exception e)
            {
                iRes = -1;
                Logger_AddLogException(e, string.Format("HealthCheck({0})::Error: {1}", _ipsString, e.Message), LogLevels.logERROR);
            }

            return iRes;
        }

        [WebMethod]
        public int HealthCheckDisc(string strDisc)
        {
            int iRes = -1;
            try
            {
                iRes = customersRepository.HealthCheck();
                Logger_AddLogMessage(string.Format("HealthCheck({2}-{0}): iRes = {1}, ", _ipsString, iRes, strDisc), LogLevels.logINFO);
            }
            catch (Exception e)
            {
                iRes = -1;
                Logger_AddLogException(e, string.Format("HealthCheck({2}-{0})::Error: {1}", _ipsString, e.Message, strDisc), LogLevels.logERROR);
            }

            return iRes;
        }

        //[WebMethod]
        public string CalculateMessageWithHash(string xmlIn)
        {
            string xmlOut = "";
            try
            {
                SortedList parametersIn = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("CalculateMessageWithHash: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                        string strCalculatedHash = CalculateHash(strHashString, strHash);
                        XmlDocument xmldoc = new XmlDocument();
                        xmldoc.LoadXml(xmlIn);


                        XmlNodeList Nodes = xmldoc.SelectNodes("//" + _xmlTagName + IN_SUFIX);
                        XmlElement node = xmldoc.CreateElement("ah");
                        node.InnerXml = strCalculatedHash;
                        Nodes[0].AppendChild(node);

                        xmlOut = xmldoc.OuterXml;
                       

                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("CalculateMessageWithHash::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("CalculateMessageWithHash::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;

        }
        //[WebMethod]
        public string CalculateMessageWithHashJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("CalculateMessageWithHashJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = CalculateMessageWithHash(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("CalculateMessageWithHashJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("CalculateMessageWithHashJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);


            }

            return jsonOut;
        }

        //[WebMethod]
        public string CalculateHash(string strInput,string strHash)
        {
            string strRes = "";
            try
            {
                if ((ConfigurationManager.AppSettings["CheckSessionAndHash"].ToString() == "0")&&(strHash.Length>0))
                {
                    strRes = strHash;
                }
                else
                {

                    byte[] inputBytes = System.Text.Encoding.UTF8.GetBytes(strInput);
                    byte[] hash = null;

                    MACTripleDES _mac3des = null;
                    HMACSHA256 _hmacsha256 = null;

                    if (ConfigurationManager.AppSettings["AuthHashAlgorithmMobile"].ToString() == "HMACSHA256")
                    {
                        _hmacsha256 = new HMACSHA256(_normKey);
                    }
                    else if (ConfigurationManager.AppSettings["AuthHashAlgorithmMobile"].ToString() == "MACTripleDES")
                    {
                        _mac3des = new MACTripleDES(_normKey);
                    }

                    if (_mac3des != null)
                    {
                        hash = _mac3des.ComputeHash(inputBytes);

                    }
                    else if (_hmacsha256 != null)
                    {
                        hash = _hmacsha256.ComputeHash(inputBytes);
                    }


                    if (hash.Length >= 8)
                    {
                        StringBuilder sb = new StringBuilder();
                        for (int i = hash.Length - 8; i < hash.Length; i++)
                        {
                            sb.Append(hash[i].ToString("X2"));
                        }
                        strRes = sb.ToString();
                    }
                }
                
            }
            catch (Exception e)
            {
                Logger_AddLogException(e, "CalculateHash::Exception", LogLevels.logERROR);
                
            }


            return strRes;
        }

        /*
         *  QueryCarExitforPayment
         *
        <ipark_in>
            <u>user login </u>
            <IMEI> imei or null if it’s a device without modem </IMEI>  -- optional or null able
            <WIFIMAC> wifi mac </WIFIMAC>		                --  optional or nullable   
            <SessionID>dc952a84d38c9df22844897d8c2e5df25a0748168560b4f2</SessionID>   
            <g> off street zone identification </g>
            <ope_id> Operation unique ID: number/barcode/ticket ID </ope_id>
            <ope_id_type> 1: MEYPAR id, 2: I@ id QR </ope_id_type>
            <p>plate</p>
            <d>Current date (in format hh24missddMMYY) </d>
        <ipark_in>
         * 
         * 
        <ipark_out>
	        <r>Result of the method</r>
            <g> off street zone identification </g>
            <ope_id> Operation unique ID: number/barcode/ticket ID </ope_id>
            <ope_id_type> 1: MEYPAR id, 2: I@ id QR </ope_id_type>
            <p>plate</p>
            <op> 1: there is an overpayment because user did not leave in the courtesy time/ 0: first payment >/op>
            <q>Amount of money paid in Cents</q>
	     	<cur> installation/city currency</cur>	
            <t>Time in minutes obtained paying <q> cents</t>
            <bd>Initial date (in format hh24missddMMYY) of the parking:  exacty is the <d> tag value provided in NotifyCarEntry method</bd>  Mandotory
            <ed>End date (in format hh24missddMMYY) </ed> Mandatory
            <tar_id> tariff id that could be different from the entry one because user parked in  another place</tar_id>
            <med> maximum exit date for leaving the parking once has been paid  </med>
            <vers> 1.0 </vers>				-- Web Service Version
            <ah>authentication hash</ah>
        </ipark_out>
         * 
         * 
        Result of the method:
            a)	-38: Operation not found.
            b)	1: Operation Successful  the payment was made
            c)	-9: Generic Error (for example database or execution error.)
            d)	-19 Invalid Input Parameter 
            e)	-20 Missing Input Parameter 
            f)	-39: Operation already closed
         *
         */
        [WebMethod]
        public string QueryCarExitforPayment(string xmlIn)
        {
            string xmlOut = "";
            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("QueryCarExitforPayment: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["g"] == null) ||
                        (parametersIn["ope_id"] == null) ||
                        //(parametersIn["ope_id_type"] == null) ||
                        (parametersIn["p"] == null) ||
                        (parametersIn["d"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("QueryCarExitforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("QueryCarExitforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {

                            USER oUser = null;
                            rt = GetUserData(ref oUser, parametersIn);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("QueryCarExitforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            decimal? dGroupId = null;                            
                            DateTime? dtgroupDateTime = null;
                            try
                            {
                                decimal dTryGroupId = Convert.ToDecimal(parametersIn["g"].ToString());
                                dGroupId = dTryGroupId;
                            }
                            catch
                            {
                                dGroupId = null;
                            }

                            GROUPS_OFFSTREET_WS_CONFIGURATION oOffstreetWsConfiguration = null;
                            if (!geograficAndTariffsRepository.getOffStreetConfiguration(dGroupId, null, null, ref oOffstreetWsConfiguration, ref dtgroupDateTime))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("QueryCarExitforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            GROUP oGroup = null;
                            DateTime? dtinstDateTime = null;
                            if (!geograficAndTariffsRepository.getGroup(dGroupId,
                                                                        ref oGroup,
                                                                        ref dtinstDateTime))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("QueryCarExitforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }
                            if (oGroup.GRP_TYPE != (int)GroupType.OffStreet)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("QueryCarExitforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            string sOpeId = parametersIn["ope_id"].ToString();
                            OffstreetOperationIdType oOpeType = OffstreetOperationIdType.MeyparId;
                            if (parametersIn.ContainsKey("ope_id_type") && parametersIn["ope_id_type"] != "")
                            {
                                try
                                {
                                    oOpeType = (OffstreetOperationIdType)Convert.ToInt32(parametersIn["ope_id_type"].ToString());
                                }
                                catch
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("QueryCarExitforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                            }

                            string sPlate = NormalizePlate(parametersIn["p"].ToString());

                            if (sPlate.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("QueryCarExitforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;

                            }

                            string strPlateSharing = infraestructureRepository.GetParameterValue("PlateSharing");
                            bool bPlateSharing = true;

                            if (!string.IsNullOrEmpty(strPlateSharing))
                            {
                                bPlateSharing = (strPlateSharing != "0");
                            }

                            if (!customersRepository.IsPlateOfUser(ref oUser, sPlate))
                            {
                                if (bPlateSharing || !customersRepository.IsPlateAssignedToAnotherUser(ref oUser, sPlate))
                                {
                                    if (!customersRepository.AddPlateToUser(ref oUser, sPlate))
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                        Logger_AddLogMessage(string.Format("QueryCarExitforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }
                                }
                                else
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Plate_Is_Assigned_To_Another_User);
                                    Logger_AddLogMessage(string.Format("QueryCarExitforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;

                                }
                            }


                            DateTime dtCurrentDateTime;
                            try
                            {
                                dtCurrentDateTime = DateTime.ParseExact(parametersIn["d"].ToString(), "HHmmssddMMyy", CultureInfo.InvariantCulture);
                            }
                            catch
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("QueryCarExitforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            parametersOut = new SortedList();
                            rt = ResultType.Result_OK;

                            // Get last offstreet operation with the same group id and logical id (<g> and <ope_id>)
                            OPERATIONS_OFFSTREET oLastParkOp = null;
                            if (!customersRepository.GetLastOperationOffstreetData(oGroup.GRP_ID, sOpeId, out oLastParkOp))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("QueryCarExitforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            if (oLastParkOp != null && (oLastParkOp.OPEOFF_TYPE == (int)OffstreetOperationType.Exit || oLastParkOp.OPEOFF_TYPE == (int)OffstreetOperationType.OverduePayment) &&
                                                       oLastParkOp.OPEOFF_EXIT_LIMIT_DATE.HasValue && oLastParkOp.OPEOFF_EXIT_LIMIT_DATE.Value >= dtgroupDateTime.Value)
                            {
                                //xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_OperationAlreadyClosed);
                                parametersOut = new SortedList();                                
                                parametersOut["r"] = Convert.ToInt32(ResultType.Result_Error_OperationAlreadyClosed).ToString();
                                parametersOut["med"] = oLastParkOp.OPEOFF_EXIT_LIMIT_DATE.Value.ToString("HHmmssddMMyy");
                                xmlOut = GenerateXMLOuput(parametersOut);
                                Logger_AddLogMessage(string.Format("QueryCarExitforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            if (oLastParkOp != null && (oLastParkOp.OPEOFF_TYPE == (int)OffstreetOperationType.Exit || oLastParkOp.OPEOFF_TYPE == (int)OffstreetOperationType.OverduePayment) &&
                                                       oLastParkOp.USER_PLATE.USRP_PLATE != sPlate)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Plate);
                                Logger_AddLogMessage(string.Format("QueryCarExitforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            int iOp = 0;
                            int iTotalAmount = 0;
                            decimal dVAT = 0;                            
                            string sCurIsoCode = oOffstreetWsConfiguration.GROUP.INSTALLATION.CURRENCy.CUR_ISO_CODE;
                            int iTime = 0;
                            DateTime dtEntryDate = DateTime.Now;
                            DateTime dtEndDate = DateTime.Now;
                            DateTime dtMaxExitDate = DateTime.Now;
                            string sTariff = "";
                            long lEllapsedTime;

                            ThirdPartyOffstreet oThirdPartyOffstreet = new ThirdPartyOffstreet();

                            switch ((QueryExitOffstreetWSSignatureType)oOffstreetWsConfiguration.GOWC_QUERY_EXIT_WS_SIGNATURE_TYPE)
                            {
                                case QueryExitOffstreetWSSignatureType.test:
                                    {
                                        if (oLastParkOp != null && oLastParkOp.OPEOFF_TYPE != (int)OffstreetOperationType.Entry)
                                            iOp = 1;
                                        else
                                            iOp = 0;
                                        dVAT = oOffstreetWsConfiguration.GROUP.INSTALLATION.INS_PERC_VAT1;
                                        iTotalAmount = 500;
                                        iTime = 60;
                                        dtEntryDate = dtgroupDateTime.Value.AddHours(-1);
                                        dtEndDate = dtgroupDateTime.Value;
                                        sTariff = "Tarifa Normal";
                                        dtMaxExitDate = dtgroupDateTime.Value.AddMinutes(20);
                                        lEllapsedTime = 0;
                                        parametersOut["op"] = iOp;
                                        parametersOut["q"] = iTotalAmount;
                                        parametersOut["cur"] = sCurIsoCode;
                                        parametersOut["t"] = iTime;
                                        parametersOut["bd"] = dtEntryDate.ToString("HHmmssddMMyy");
                                        parametersOut["ed"] = dtEndDate.ToString("HHmmssddMMyy");
                                        parametersOut["tar_id"] = sTariff;
                                        parametersOut["med"] = dtMaxExitDate.ToString("HHmmssddMMyy");
                                        parametersOut["parking_id"] = 1;
                                        sOpeId = dtEndDate.ToString("yyyyMMddHHmmssffff");
                                        parametersOut["ope_id"] = sOpeId;
                                        oOpeType=OffstreetOperationIdType.MeyparId;
                                        parametersOut["ope_id_type"] = (int)oOpeType;
                                        sPlate = oUser.USER_PLATEs.Where(r => r.USRP_ENABLED == 1).Count() > 0 ? oUser.USER_PLATEs.Where(r => r.USRP_ENABLED == 1).First().USRP_PLATE : "1111AAA";
                                        parametersOut["plate"] = sPlate;
                                        rt = ResultType.Result_OK;
                                    }
                                    break;

                                case QueryExitOffstreetWSSignatureType.meypar:
                                    {
                                        rt = oThirdPartyOffstreet.MeyparQueryCarExitforPayment(oOffstreetWsConfiguration, sOpeId, oOpeType, sPlate, dtgroupDateTime.Value /*dtCurrentDateTime*/, 
                                                                                               ref parametersOut, out iOp, out iTotalAmount, out dVAT, out sCurIsoCode, out iTime, 
                                                                                               out dtEntryDate, out dtEndDate, out sTariff, out dtMaxExitDate, out lEllapsedTime);


                                        if (rt != ResultType.Result_OK)
                                        {
                                            xmlOut = GenerateXMLErrorResult(rt);
                                            Logger_AddLogMessage(string.Format("QueryCarExitforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }

                                    }
                                    break;

                                default:
                                    rt = ResultType.Result_Error_Generic;
                                    break;

                            }


                            if (rt == ResultType.Result_OK)
                            {
                                OffstreetOperationType operationType = (iOp == 0 ? OffstreetOperationType.Exit : OffstreetOperationType.OverduePayment);

                                double dChangeToApply = 1.0;

                                if (sCurIsoCode.ToUpper() != oOffstreetWsConfiguration.GROUP.INSTALLATION.CURRENCy.CUR_ISO_CODE)
                                {
                                    // ...
                                }
                                
                                DateTime? dtUTCDateTime = geograficAndTariffsRepository.ConvertInstallationDateTimeToUTC(oOffstreetWsConfiguration.GROUP.INSTALLATION.INS_ID, dtgroupDateTime.Value);
                                DateTime? dtUTCEntryDate = geograficAndTariffsRepository.ConvertInstallationDateTimeToUTC(oOffstreetWsConfiguration.GROUP.INSTALLATION.INS_ID, dtEntryDate);
                                DateTime? dtUTCEndDate = geograficAndTariffsRepository.ConvertInstallationDateTimeToUTC(oOffstreetWsConfiguration.GROUP.INSTALLATION.INS_ID, dtEndDate);
                                DateTime? dtMaxExitUTCDate = geograficAndTariffsRepository.ConvertInstallationDateTimeToUTC(oOffstreetWsConfiguration.GROUP.INSTALLATION.INS_ID, dtMaxExitDate);

                                int iAmount;
                                decimal dVAT1;
                                decimal dVAT2;
                                decimal dPercFEE;
                                int iPercFEETopped;
                                int iFixedFEE;
                                int iPartialVAT1;
                                int iPartialPercFEE;
                                int iPartialFixedFEE;
                                int iPartialPercFEEVAT;
                                int iPartialFixedFEEVAT;
                                int? iPaymentTypeId = null;
                                int? iPaymentSubtypeId = null;
                                if (oUser.CUSTOMER_PAYMENT_MEAN != null)
                                {
                                    iPaymentTypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAT_ID;
                                    iPaymentSubtypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAST_ID;
                                }

                                if (dVAT != 0)
                                    iAmount = customersRepository.CalculateFEEReverse(iTotalAmount, dVAT, 0, 0, 0, 0, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE);
                                else
                                    iAmount = iTotalAmount;

                                if (!customersRepository.GetFinantialParams(oUser, oGroup, (PaymentSuscryptionType)oUser.USR_SUSCRIPTION_TYPE, iPaymentTypeId, iPaymentSubtypeId,
                                                                            out dVAT1, out dVAT2, out dPercFEE, out iPercFEETopped, out iFixedFEE))
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("QueryCarExitforPayment::Error getting installation FEE parameters: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }

                                dVAT1 = dVAT;
                                iPartialVAT1 = iTotalAmount - iAmount;                              

                                int iQFEE = 0;
                                int iQFEEChange = 0;
                                decimal dQVAT = 0;
                                int iQTotal = 0;
                                int iQTotalChange = 0;
                                int iQSubTotal = 0;
                                int iQSubTotalChange = 0;

                                iQTotal = customersRepository.CalculateFEE(iAmount, dVAT1, dVAT2, dPercFEE, iPercFEETopped, iFixedFEE,
                                                                           iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE,
                                                                           out iPartialPercFEEVAT, out iPartialFixedFEEVAT);
                                iQFEE = Convert.ToInt32(Math.Round(iAmount * dPercFEE, MidpointRounding.AwayFromZero));
                                if (iPercFEETopped > 0 && iQFEE > iPercFEETopped) iQFEE = iPercFEETopped;
                                iQFEE += iFixedFEE;
                                dQVAT = iPartialVAT1 + iPartialPercFEEVAT + iPartialFixedFEEVAT;
                                iQSubTotal = iAmount + iQFEE;

                                if (oOffstreetWsConfiguration.GROUP.INSTALLATION.CURRENCy.CUR_ISO_CODE != oUser.CURRENCy.CUR_ISO_CODE)
                                {
                                    dChangeToApply = GetChangeToApplyFromInstallationCurToUserCur(oOffstreetWsConfiguration.GROUP.INSTALLATION, oUser);
                                    if (dChangeToApply < 0)
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                        Logger_AddLogMessage(string.Format("QueryCarExitforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }

                                    NumberFormatInfo numberFormatProvider = new NumberFormatInfo();
                                    numberFormatProvider.NumberDecimalSeparator = ".";
                                    parametersOut["chng"] = dChangeToApply.ToString(numberFormatProvider);

                                    double dChangeFee = 0;
                                    int iQChange = ChangeQuantityFromInstallationCurToUserCur(iAmount,
                                                                                              dChangeToApply, oOffstreetWsConfiguration.GROUP.INSTALLATION, oUser, out dChangeFee);

                                    iQFEEChange = ChangeQuantityFromInstallationCurToUserCur(iQFEE, dChangeToApply, oGroup.INSTALLATION, oUser, out dChangeFee);
                                    iQSubTotalChange = ChangeQuantityFromInstallationCurToUserCur(iQSubTotal, dChangeToApply, oGroup.INSTALLATION, oUser, out dChangeFee);
                                    iQTotalChange = ChangeQuantityFromInstallationCurToUserCur(iQTotal, dChangeToApply, oGroup.INSTALLATION, oUser, out dChangeFee);

                                    parametersOut["qch"] = iQChange.ToString();
                                    parametersOut["qch_fee"] = iQFEEChange.ToString();
                                    parametersOut["qch_subtotal"] = iQSubTotalChange.ToString();
                                    parametersOut["qch_total"] = iQTotalChange.ToString();
                                    parametersOut["q"] = iAmount.ToString();
                                    parametersOut["q_fee"] = iQFEE.ToString();
                                    parametersOut["q_vat"] = dQVAT.ToString();
                                    parametersOut["q_subtotal"] = iQSubTotal.ToString();
                                    parametersOut["q_total"] = iQTotal.ToString();
                                }
                                else
                                {
                                    parametersOut["q"] = iAmount.ToString();
                                    parametersOut["q_fee"] = iQFEE.ToString();
                                    parametersOut["q_vat"] = dQVAT.ToString();
                                    parametersOut["q_subtotal"] = iQSubTotal.ToString();
                                    parametersOut["q_total"] = iQTotal.ToString();
                                }


                                if (!customersRepository.AddSessionOperationOffstreetInfo(ref oUser, parametersIn["SessionID"].ToString(), operationType, sOpeId, sPlate, oGroup.GRP_ID, sTariff,
                                                                                                                   iAmount, iPartialVAT1, iTime, dtUTCDateTime.Value, dtUTCEntryDate.Value, dtUTCEndDate.Value, dtMaxExitUTCDate.Value, dtgroupDateTime.Value, dChangeToApply,
                                                                                                                   dVAT1, dVAT2, dPercFEE, iPercFEETopped, iFixedFEE, null))
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("QueryCarExitforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }

                            }

                            if (rt == ResultType.Result_OK && iTotalAmount == 0)
                            {
                                rt = ResultType.Result_Error_Offstreet_OperationInFreePass;
                            }

                            parametersOut["r"] = Convert.ToInt32(rt).ToString();
                            parametersOut["g"] = oGroup.GRP_ID.ToString();
                            parametersOut["ope_id"] = sOpeId;
                            parametersOut["ope_id_type"] = (int)oOpeType;
                            parametersOut["p"] = sPlate;
                            parametersOut["layout"] = oOffstreetWsConfiguration.GOWC_FEE_LAYOUT;

                           

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("QueryCarExitforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("QueryCarExitforPayment: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }


                        }
                    }

                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("QueryCarExitforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("QueryCarExitforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

            }

            return xmlOut;
        }

        [WebMethod]
        public string QueryCarExitforPaymentJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("QueryCarExitforPaymentJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = QueryCarExitforPayment(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);

                //Logger_AddLogMessage(string.Format("QueryCarExitforPaymentJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("QueryCarExitforPaymentJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }

        /*
         *  ConfirmCarPayment 
         *  
        <ipark_in>
            <u>user login or generated user id for anonymous operations</u>
            <SessionID>dc952a84d38c9df22844897d8c2e5df25a0748168560b4f2</SessionID>
            <g> off street zone identification </g>
            <ope_id> Operation unique ID: number/barcode/ticket ID </ope_id>
            <ope_id_type> 1: MEYPAR id, 2: I@ id QR </ope_id_type>
            <vers> 1.0 </vers>				-- Web Service Version
            <ah>authentication hash</ah>
        </ ipark _in>
         *      
        <ipark_out>
	        <r>Result of the method</r>
            <opnum> operation number </opnum>
        </ipark_out>
         * 
        Result of the method:
         a.	Result: is an integer containing a Boolean value. 0 if an error has occurred
         * saving the operation or 1 if the operation has been stored correctly.      
         *
         */
        [WebMethod]
        public string ConfirmCarPayment(string xmlIn)
        {
            string xmlOut = "";
            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("ConfirmCarPayment: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["g"] == null) ||
                        (parametersIn["ope_id"] == null) ||
                        (parametersIn["ope_id_type"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("ConfirmCarPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("ConfirmCarPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            USER oUser = null;                            
                            string strAppVersion = "";
                            rt = GetUserData(ref oUser, parametersIn, out strAppVersion);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("ConfirmCarPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            decimal? dGroupId = null;                            
                            try
                            {
                                decimal dTryGroupId = Convert.ToDecimal(parametersIn["g"].ToString());
                                dGroupId = dTryGroupId;
                            }
                            catch
                            {
                                dGroupId = null;
                            }

                            GROUPS_OFFSTREET_WS_CONFIGURATION oParkingConfiguration = null;
                            DateTime? dtgroupDateTime = null;
                            if (!geograficAndTariffsRepository.getOffStreetConfiguration(dGroupId, null, null, ref oParkingConfiguration, ref dtgroupDateTime))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("ConfirmCarPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            GROUP oGroup = null;
                            DateTime? dtinstDateTime = null;
                            if (!geograficAndTariffsRepository.getGroup(dGroupId,
                                                                        ref oGroup,
                                                                        ref dtinstDateTime))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("ConfirmCarPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }
                            if (oGroup.GRP_TYPE != (int)GroupType.OffStreet)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("ConfirmCarPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }


                            string sOpeId = parametersIn["ope_id"].ToString();
                            OffstreetOperationIdType oOpeIdType = OffstreetOperationIdType.MeyparId;
                            try
                            {
                                oOpeIdType = (OffstreetOperationIdType)Convert.ToInt32(parametersIn["ope_id_type"].ToString());
                            }
                            catch
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("ConfirmCarPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }
                            
                            string sPlate = "";
                            int iAmount;
                            string sCurIsoCode = oParkingConfiguration.GROUP.INSTALLATION.CURRENCy.CUR_ISO_CODE;
                            int iTime;
                            string sTariff;
                            string sGate = "";
                            double dChangeToApply = 1.0;
                            DateTime dtSavedInstallationTime = DateTime.UtcNow;
                            OffstreetOperationType operationType = OffstreetOperationType.Exit;
                            DateTime dtUTCEntryDate = DateTime.UtcNow;
                            DateTime dtUTCEndDate = DateTime.UtcNow;
                            DateTime dtUTCExitLimitDate = DateTime.UtcNow;
                            decimal dPercVAT1;
                            decimal dPercVAT2;
                            decimal dPercFEE;
                            int iPercFEETopped;
                            int iFixedFEE;
                            int iPartialVAT1;
                            int iPartialPercFEE;
                            int iPartialFixedFEE;
                            int iPartialPercFEEVAT;
                            int iPartialFixedFEEVAT;
                            int iTotalQuantity;
                            string sDiscounts;
                            DateTime dtSessionUTCDate;

                            if (!customersRepository.CheckSessionOperationOffstreetInfo(ref oUser, parametersIn["SessionID"].ToString(), dGroupId.Value, sOpeId, out sPlate, out dtSavedInstallationTime, out operationType, out iAmount, out iPartialVAT1, out iTime, out sTariff, out dChangeToApply, out dtSessionUTCDate, out dtUTCEntryDate, out dtUTCEndDate, out dtUTCExitLimitDate,
                                                                                        out dPercVAT1, out dPercVAT2, out dPercFEE, out iPercFEETopped, out iFixedFEE,
                                                                                        out sDiscounts))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_OperationExpired);
                                Logger_AddLogMessage(string.Format("ConfirmCarPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            decimal? dLatitude = null;
                            decimal? dLongitude = null;
                            GetLatLon(parametersIn, out dLatitude, out dLongitude);



                            string strPlateSharing = infraestructureRepository.GetParameterValue("PlateSharing");
                            bool bPlateSharing = true;

                            if (!string.IsNullOrEmpty(strPlateSharing))
                            {
                                bPlateSharing = (strPlateSharing != "0");
                            }

                            if (!customersRepository.IsPlateOfUser(ref oUser, sPlate))
                            {
                                if (bPlateSharing || !customersRepository.IsPlateAssignedToAnotherUser(ref oUser, sPlate))
                                {
                                    if (!customersRepository.AddPlateToUser(ref oUser, sPlate))
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                        Logger_AddLogMessage(string.Format("ConfirmCarPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }
                                }
                                else
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Plate_Is_Assigned_To_Another_User);
                                    Logger_AddLogMessage(string.Format("ConfirmCarPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;

                                }
                            }

                            var session = oUser.MOBILE_SESSIONs.Where(r => r.MOSE_SESSIONID == parametersIn["SessionID"].ToString()
                                                              && r.MOSE_USR_ID == oUser.USR_ID).First();

                            iTotalQuantity = customersRepository.CalculateFEE(iAmount, dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE, 
                                                                              iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE,
                                                                              out iPartialPercFEEVAT, out iPartialFixedFEEVAT);

                            //int iQT = (iPartialPercFEE - iPartialPercFEEVAT) + (iPartialFixedFEE - iPartialFixedFEEVAT);                            
                            //int iIVA = iPartialPercFEEVAT + iPartialFixedFEEVAT;

                            DateTime? dtEntryDate = geograficAndTariffsRepository.ConvertUTCToInstallationDateTime(oParkingConfiguration.GROUP.GRP_INS_ID, dtUTCEntryDate);
                            DateTime dtPaymentDate = dtSavedInstallationTime;
                            DateTime? dtEndDate = geograficAndTariffsRepository.ConvertUTCToInstallationDateTime(oParkingConfiguration.GROUP.GRP_INS_ID, dtUTCEndDate);
                            DateTime? dtExitLimitDate = geograficAndTariffsRepository.ConvertUTCToInstallationDateTime(oParkingConfiguration.GROUP.GRP_INS_ID, dtUTCExitLimitDate);

                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();

                            integraMobile.WS.integraCommonService oCommonService = CommonService();

                            rt = oCommonService.ConfirmCarPayment(oParkingConfiguration, oGroup, oUser,
                                                                  sOpeId, oOpeIdType, sPlate, sTariff, sGate,
                                                                  operationType, iAmount, iTime, dChangeToApply, sCurIsoCode,
                                                                  dtEntryDate.Value, dtPaymentDate, dtEndDate.Value, dtExitLimitDate.Value,
                                                                  session.MOSE_OS.Value, session.MOSE_ID, dLatitude, dLongitude, strAppVersion,
                                                                  dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE,
                                                                  iPartialVAT1, iPartialPercFEE, iPartialFixedFEE, iTotalQuantity,
                                                                  sDiscounts,
                                                                  ref parametersOut);
                            if (rt == ResultType.Result_OK)
                            {
                                customersRepository.DeleteSessionOperationOffstreetInfo(ref oUser, parametersIn["SessionID"].ToString());
                            }
                            else
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("ConfirmCarPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("ConfirmCarPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("ConfirmCarPayment: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }


                        }                        
                    }

                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("ConfirmCarPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("ConfirmCarPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;

        }

        [WebMethod]
        public string ConfirmCarPaymentJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("ConfirmCarPaymentJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = ConfirmCarPayment(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);

                //Logger_AddLogMessage(string.Format("ConfirmCarPaymentJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("NotifyCarPaymentJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);


            }

            return jsonOut;
        }

        [WebMethod]
        public string QueryCarDiscountforPayment(string xmlIn)
        {
            string xmlOut = "";
            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("QueryCarDiscountforPayment: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["g"] == null) ||
                        (parametersIn["ope_id"] == null) ||
                        (parametersIn["ope_id_type"] == null) ||
                        (parametersIn["dc_id"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("QueryCarDiscountforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("QueryCarDiscountforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {

                            USER oUser = null;
                            rt = GetUserData(ref oUser, parametersIn);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("QueryCarDiscountforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            decimal? dGroupId = null;
                            DateTime? dtgroupDateTime = null;
                            try
                            {
                                decimal dTryGroupId = Convert.ToDecimal(parametersIn["g"].ToString());
                                dGroupId = dTryGroupId;
                            }
                            catch
                            {
                                dGroupId = null;
                            }

                            GROUPS_OFFSTREET_WS_CONFIGURATION oOffstreetWsConfiguration = null;
                            if (!geograficAndTariffsRepository.getOffStreetConfiguration(dGroupId, null, null, ref oOffstreetWsConfiguration, ref dtgroupDateTime))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("QueryCarDiscountforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            GROUP oGroup = null;
                            DateTime? dtinstDateTime = null;
                            if (!geograficAndTariffsRepository.getGroup(dGroupId,
                                                                        ref oGroup,
                                                                        ref dtinstDateTime))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("QueryCarDiscountforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }
                            if (oGroup.GRP_TYPE != (int)GroupType.OffStreet)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("QueryCarDiscountforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            string sOpeId = parametersIn["ope_id"].ToString();
                            OffstreetOperationIdType oOpeType = OffstreetOperationIdType.MeyparId;
                            if (parametersIn.ContainsKey("ope_id_type") && parametersIn["ope_id_type"] != null)
                            {
                                try
                                {
                                    oOpeType = (OffstreetOperationIdType)Convert.ToInt32(parametersIn["ope_id_type"].ToString());
                                }
                                catch
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("QueryCarDiscountforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                            }

                            string sDiscId = parametersIn["dc_id"].ToString();

                            string sPlate = "";
                            int iInitialAmount;
                            int iFinalAmount;
                            string sCurIsoCode = oOffstreetWsConfiguration.GROUP.INSTALLATION.CURRENCy.CUR_ISO_CODE;
                            int iTime;
                            string sTariff;
                            string sGate = "";
                            double dChangeToApply = 1.0;
                            DateTime dtSavedInstallationTime = DateTime.UtcNow;
                            OffstreetOperationType operationType = OffstreetOperationType.Exit;
                            DateTime dtUTCEntryDate = DateTime.UtcNow;
                            DateTime dtUTCEndDate = DateTime.UtcNow;
                            DateTime dtUTCExitLimitDate = DateTime.UtcNow;
                            decimal dPercVAT1;
                            decimal dPercVAT2;
                            decimal dPercFEE;
                            int iPercFEETopped;
                            int iFixedFEE;
                            int iPartialVAT1;
                            int iPartialPercFEE;
                            int iPartialFixedFEE;
                            int iPartialPercFEEVAT;
                            int iPartialFixedFEEVAT;                            
                            string sDiscounts;
                            DateTime dtSessionUTCDate;

                            if (!customersRepository.CheckSessionOperationOffstreetInfo(ref oUser, parametersIn["SessionID"].ToString(), dGroupId.Value, sOpeId, out sPlate, out dtSavedInstallationTime, out operationType, out iFinalAmount, out iPartialVAT1, out iTime, out sTariff, out dChangeToApply, out dtSessionUTCDate, out dtUTCEntryDate, out dtUTCEndDate, out dtUTCExitLimitDate,
                                                                                        out dPercVAT1, out dPercVAT2, out dPercFEE, out iPercFEETopped, out iFixedFEE,
                                                                                        out sDiscounts))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_OperationExpired);
                                Logger_AddLogMessage(string.Format("QueryCarDiscountforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }






                            parametersOut = new SortedList();
                            rt = ResultType.Result_OK;

                            // Get last offstreet operation with the same group id and logical id (<g> and <ope_id>)
                            OPERATIONS_OFFSTREET oLastParkOp = null;
                            if (!customersRepository.GetLastOperationOffstreetData(oGroup.GRP_ID, sOpeId, out oLastParkOp))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("QueryCarDiscountforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            if (oLastParkOp != null && (oLastParkOp.OPEOFF_TYPE == (int)OffstreetOperationType.Exit || oLastParkOp.OPEOFF_TYPE == (int)OffstreetOperationType.OverduePayment) &&
                                                       oLastParkOp.OPEOFF_EXIT_LIMIT_DATE.HasValue && oLastParkOp.OPEOFF_EXIT_LIMIT_DATE.Value >= dtgroupDateTime.Value)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_OperationAlreadyClosed);
                                Logger_AddLogMessage(string.Format("QueryCarDiscountforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            int iOp = 0;
                            int iInitialTotalAmount = 0;
                            int iFinalTotalAmount = 0;
                            decimal dVAT = 0;
                            DateTime dtEntryDate = DateTime.Now;
                            DateTime dtEndDate = DateTime.Now;
                            DateTime dtMaxExitDate = DateTime.Now;
                            long lEllapsedTime;

                            ThirdPartyOffstreet oThirdPartyOffstreet = new ThirdPartyOffstreet();

                            switch ((QueryExitOffstreetWSSignatureType)oOffstreetWsConfiguration.GOWC_QUERY_EXIT_WS_SIGNATURE_TYPE)
                            {
                                case QueryExitOffstreetWSSignatureType.test:
                                    {
                                        //DateTime? dtEntryDateIns = geograficAndTariffsRepository.ConvertUTCToInstallationDateTime(oOffstreetWsConfiguration.GROUP.GRP_INS_ID, dtUTCEntryDate);
                                        //DateTime? dtEndDateIns = geograficAndTariffsRepository.ConvertUTCToInstallationDateTime(oOffstreetWsConfiguration.GROUP.GRP_INS_ID, dtUTCEndDate);

                                        if (oLastParkOp != null && oLastParkOp.OPEOFF_TYPE != (int)OffstreetOperationType.Entry)
                                            iOp = 1;
                                        else
                                            iOp = 0;
                                        dVAT = oOffstreetWsConfiguration.GROUP.INSTALLATION.INS_PERC_VAT1;
                                        iInitialTotalAmount = iFinalAmount + Convert.ToInt32(Math.Round(iFinalAmount * dVAT, MidpointRounding.AwayFromZero));
                                        iFinalTotalAmount = iInitialTotalAmount - 10;
                                        if (iFinalTotalAmount < 0)
                                            iFinalTotalAmount = 0;

                                        iInitialTotalAmount = 500;

                                        lEllapsedTime = 0;
                                        parametersOut["op"] = iOp;                                       
                                        parametersOut["cur"] = sCurIsoCode;

                                        parametersOut["parking_id"] = 1;
                                        parametersOut["ope_id"] = sOpeId;
                                        oOpeType = OffstreetOperationIdType.MeyparId;
                                        parametersOut["ope_id_type"] = (int)oOpeType;
                                        rt = ResultType.Result_OK;

                                    }
                                    break;

                                case QueryExitOffstreetWSSignatureType.meypar:
                                    {
                                        rt = oThirdPartyOffstreet.MeyparQueryCarDiscountforPayment(oOffstreetWsConfiguration, sOpeId, oOpeType, sDiscId, dtgroupDateTime.Value /*dtCurrentDateTime*/,
                                                                                               ref parametersOut, out iOp, out iInitialTotalAmount, out iFinalTotalAmount, out dVAT, out sCurIsoCode, /*out iTime,
                                                                                               out dtEntryDate, out dtEndDate, out sTariff, out dtMaxExitDate,*/ out lEllapsedTime);


                                        if (rt != ResultType.Result_OK)
                                        {
                                            xmlOut = GenerateXMLErrorResult(rt);
                                            Logger_AddLogMessage(string.Format("QueryCarDiscountforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }

                                    }
                                    break;

                                default:
                                    rt = ResultType.Result_Error_Generic;
                                    break;

                            }


                            if (rt == ResultType.Result_OK)
                            {

                                if (sCurIsoCode.ToUpper() != oOffstreetWsConfiguration.GROUP.INSTALLATION.CURRENCy.CUR_ISO_CODE)
                                {
                                    // ...
                                }

                                int? iPaymentTypeId = null;
                                int? iPaymentSubtypeId = null;
                                if (oUser.CUSTOMER_PAYMENT_MEAN != null)
                                {
                                    iPaymentTypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAT_ID;
                                    iPaymentSubtypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAST_ID;
                                }

                                if (dVAT != 0)
                                {
                                    iInitialAmount = customersRepository.CalculateFEEReverse(iInitialTotalAmount, dVAT, 0, 0, 0, 0, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE);
                                    iFinalAmount = customersRepository.CalculateFEEReverse(iFinalTotalAmount, dVAT, 0, 0, 0, 0, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE);
                                }
                                else
                                {
                                    iInitialAmount = iInitialTotalAmount;
                                    iFinalAmount = iFinalTotalAmount;
                                }

                                if (!customersRepository.GetFinantialParams(oUser, oGroup, (PaymentSuscryptionType)oUser.USR_SUSCRIPTION_TYPE, iPaymentTypeId, iPaymentSubtypeId, 
                                                                            out dPercVAT1, out dPercVAT2, out dPercFEE, out iPercFEETopped, out iFixedFEE))
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("QueryCarDiscountforPayment::Error getting installation FEE parameters: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }

                                dPercVAT1 = dVAT;
                                iPartialVAT1 = iFinalTotalAmount - iFinalAmount;

                                if (!string.IsNullOrEmpty(sDiscounts))
                                    sDiscounts += ";";
                                sDiscounts += sDiscId;

                               

                                int iQFEE = 0;
                                int iQFEEChange = 0;
                                decimal dQVAT = 0;
                                int iQTotal = 0;
                                int iQTotalChange = 0;
                                int iQSubTotal = 0;
                                int iQSubTotalChange = 0;

                                iQTotal = customersRepository.CalculateFEE(iFinalAmount, dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE,
                                                                           iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE,
                                                                           out iPartialPercFEEVAT, out iPartialFixedFEEVAT);
                                iQFEE = Convert.ToInt32(Math.Round(iFinalAmount * dPercFEE, MidpointRounding.AwayFromZero));
                                if (iPercFEETopped > 0 && iQFEE > iPercFEETopped) iQFEE = iPercFEETopped;
                                iQFEE += iFixedFEE;
                                dQVAT = iPartialVAT1 + iPartialPercFEEVAT + iPartialFixedFEEVAT;
                                iQSubTotal = iFinalAmount + iQFEE;

                                if (oOffstreetWsConfiguration.GROUP.INSTALLATION.CURRENCy.CUR_ISO_CODE != oUser.CURRENCy.CUR_ISO_CODE)
                                {
                                    if (dChangeToApply < 0)
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                        Logger_AddLogMessage(string.Format("QueryCarDiscountforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }

                                    NumberFormatInfo numberFormatProvider = new NumberFormatInfo();
                                    numberFormatProvider.NumberDecimalSeparator = ".";
                                    parametersOut["chng"] = dChangeToApply.ToString(numberFormatProvider);

                                    double dChangeFee = 0;
                                    int iQChange = ChangeQuantityFromInstallationCurToUserCur(iInitialAmount,
                                                                                              dChangeToApply, oOffstreetWsConfiguration.GROUP.INSTALLATION, oUser, out dChangeFee);

                                    parametersOut["qi"] = iInitialAmount.ToString();
                                    parametersOut["qich"] = iQChange.ToString();

                                    iQChange = ChangeQuantityFromInstallationCurToUserCur(iFinalAmount,
                                                                                          dChangeToApply, oOffstreetWsConfiguration.GROUP.INSTALLATION, oUser, out dChangeFee);

                                    iQFEEChange = ChangeQuantityFromInstallationCurToUserCur(iQFEE, dChangeToApply, oGroup.INSTALLATION, oUser, out dChangeFee);
                                    iQSubTotalChange = ChangeQuantityFromInstallationCurToUserCur(iQSubTotal, dChangeToApply, oGroup.INSTALLATION, oUser, out dChangeFee);
                                    iQTotalChange = ChangeQuantityFromInstallationCurToUserCur(iQTotal, dChangeToApply, oGroup.INSTALLATION, oUser, out dChangeFee);

                                    parametersOut["qfch"] = iQChange.ToString();
                                    parametersOut["qfch_fee"] = iQFEEChange.ToString();
                                    parametersOut["qfch_subtotal"] = iQSubTotalChange.ToString();
                                    parametersOut["qfch_total"] = iQTotalChange.ToString();
                                    parametersOut["qf"] = iFinalAmount.ToString();
                                    parametersOut["qf_fee"] = iQFEE.ToString();
                                    parametersOut["qf_vat"] = dQVAT.ToString();
                                    parametersOut["qf_subtotal"] = iQSubTotal.ToString();
                                    parametersOut["qf_total"] = iQTotal.ToString();
                                }
                                else
                                {
                                    parametersOut["qi"] = iInitialAmount.ToString();
                                    parametersOut["qf"] = iFinalAmount.ToString();
                                    parametersOut["qf_fee"] = iQFEE.ToString();
                                    parametersOut["qf_vat"] = dQVAT.ToString();
                                    parametersOut["qf_subtotal"] = iQSubTotal.ToString();
                                    parametersOut["qf_total"] = iQTotal.ToString();
                                }


                                if (!customersRepository.AddSessionOperationOffstreetInfo(ref oUser, parametersIn["SessionID"].ToString(), operationType, sOpeId, sPlate, oGroup.GRP_ID, sTariff,
                                                                                         iFinalAmount, iPartialVAT1, iTime, dtSessionUTCDate, dtUTCEntryDate, dtUTCEndDate, dtUTCExitLimitDate, dtSavedInstallationTime, dChangeToApply,
                                                                                         dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE, sDiscounts))
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                    Logger_AddLogMessage(string.Format("QueryCarDiscountforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                            }


                            parametersOut["r"] = Convert.ToInt32(rt).ToString();
                            parametersOut["g"] = oGroup.GRP_ID.ToString();
                            parametersOut["ope_id"] = sOpeId;
                            parametersOut["ope_id_type"] = (int)oOpeType;
                            parametersOut["dc_id"] = sDiscId;

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("QueryCarDiscountforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("QueryCarDiscountforPayment: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }


                        }
                    }

                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("QueryCarDiscountforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("QueryCarDiscountforPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

            }

            return xmlOut;
        }

        [WebMethod]
        public string QueryCarDiscountforPaymentJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("QueryCarDiscountforPaymentJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = QueryCarDiscountforPayment(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);

                //Logger_AddLogMessage(string.Format("QueryCarDiscountforPaymentJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("QueryCarDiscountforPaymentJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }

        /*
         *  ConfirmCarEntryManual 
         *  
        <ipark_in>
            <u>user login or generated user id for anonymous operations</u>
            <SessionID>dc952a84d38c9df22844897d8c2e5df25a0748168560b4f2</SessionID>
            <g> off street zone identification </g>
            <ope_id> Operation unique ID: number/barcode/ticket ID </ope_id>
            <ope_id_type> 1: MEYPAR id, 2: I@ id QR </ope_id_type>
            <p> plate </p>
            <d> date entry of the car in format hh24missddMMYY </d> -- real information
            <gate_id> gate identification </gate_id> -- optional
            <tar_id> tariff </tar_id> -- optional
            <space_desc> space where user parked the car </space_desc>
            <vers> 1.0 </vers>				-- Web Service Version
            <ah>authentication hash</ah>
        </ ipark _in>
         *      
        <ipark_out>
	        <r>Result of the method</r>
            <dentry> real entry date for the user </dentry>
            <gate_id> gate identification </gate_id>
            <tar_id> tariff </tar_id>
        </ipark_out>
         * 
        Result of the method:
         a.	Result: is an integer containing a Boolean value. 0 if an error has occurred
         * saving the operation or 1 if the operation has been stored correctly.      
         *
         */
        [WebMethod]
        public string ConfirmCarEntryManual(string xmlIn)
        {
            string xmlOut = "";
            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("ConfirmCarEntryManual: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["g"] == null) ||
                        (parametersIn["ope_id"] == null) ||
                        (parametersIn["ope_id_type"] == null) ||
                        (parametersIn["p"] == null) ||
                        (parametersIn["d"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("ConfirmCarEntryManual::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("ConfirmCarEntryManual::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            USER oUser = null;
                            string strAppVersion = "";
                            rt = GetUserData(ref oUser, parametersIn, out strAppVersion);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("ConfirmCarEntryManual::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            decimal? dGroupId = null;
                            try
                            {
                                decimal dTryGroupId = Convert.ToDecimal(parametersIn["g"].ToString());
                                dGroupId = dTryGroupId;
                            }
                            catch
                            {
                                dGroupId = null;
                            }

                            GROUPS_OFFSTREET_WS_CONFIGURATION oParkingConfiguration = null;
                            DateTime? dtgroupDateTime = null;
                            if (!geograficAndTariffsRepository.getOffStreetConfiguration(dGroupId, null, null, ref oParkingConfiguration, ref dtgroupDateTime))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("ConfirmCarEntryManual::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            GROUP oGroup = null;
                            DateTime? dtinstDateTime = null;
                            if (!geograficAndTariffsRepository.getGroup(dGroupId,
                                                                        ref oGroup,
                                                                        ref dtinstDateTime))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("ConfirmCarEntryManual::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }
                            if (oGroup.GRP_TYPE != (int)GroupType.OffStreet)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("ConfirmCarEntryManual::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }


                            string sOpeId = parametersIn["ope_id"].ToString();
                            OffstreetOperationIdType oOpeType = OffstreetOperationIdType.MeyparId;
                            try
                            {
                                oOpeType = (OffstreetOperationIdType)Convert.ToInt32(parametersIn["ope_id_type"].ToString());
                            }
                            catch
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("ConfirmCarEntryManual::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            string sPlate = NormalizePlate(parametersIn["p"].ToString());

                            if (sPlate.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("ConfirmCarEntryManual::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;

                            }


                            string strPlateSharing = infraestructureRepository.GetParameterValue("PlateSharing");
                            bool bPlateSharing = true;

                            if (!string.IsNullOrEmpty(strPlateSharing))
                            {
                                bPlateSharing = (strPlateSharing != "0");
                            }

                            if (!customersRepository.IsPlateOfUser(ref oUser, sPlate))
                            {
                                if (bPlateSharing || !customersRepository.IsPlateAssignedToAnotherUser(ref oUser, sPlate))
                                {
                                    if (!customersRepository.AddPlateToUser(ref oUser, sPlate))
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                        Logger_AddLogMessage(string.Format("ConfirmCarEntryManual::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }
                                }
                                else
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Plate_Is_Assigned_To_Another_User);
                                    Logger_AddLogMessage(string.Format("ConfirmCarEntryManual::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;

                                }
                            }

                            DateTime dtCurrentDate;
                            try
                            {
                                dtCurrentDate = DateTime.ParseExact(parametersIn["d"].ToString(), "HHmmssddMMyy", CultureInfo.InvariantCulture);
                            }
                            catch
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("ConfirmCarEntryManual::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            string sTariff = (parametersIn["tar_id"] ?? "").ToString();
                            string sGate = (parametersIn["gate_id"] ?? "").ToString();
                            string sSpaceDesc = (parametersIn["space_desc"] ?? "").ToString();

                            decimal? dLatitude = null;
                            decimal? dLongitude = null;
                            GetLatLon(parametersIn, out dLatitude, out dLongitude);

                            int iAmount = 0;                            
                            int iTime = 0;
                                                        
                            double dChangeToApply = 1.0;

                            DateTime dtEntryDate = dtgroupDateTime.Value;
                            DateTime dtNotifyEntryDate = dtgroupDateTime.Value;
                            DateTime? dtPaymentDate = null;
                            DateTime? dtEndDate = null;
                            DateTime? dtExitLimitDate = null;
                            //DateTime? dtExitDate = null;

                            string sGateOut = "";
                            string sTariffOut = "";
                            
                            // Get last offstreet operation with the same group id and logical id (<g> and <ope_id>)
                            OPERATIONS_OFFSTREET oLastParkOp = null;
                            if (!customersRepository.GetLastOperationOffstreetData(oGroup.GRP_ID, sOpeId, out oLastParkOp))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("ConfirmCarEntryManual::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            if (oLastParkOp != null && oLastParkOp.OPEOFF_TYPE != (int)OffstreetOperationType.Entry)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_OperationAlreadyClosed);
                                Logger_AddLogMessage(string.Format("ConfirmCarEntryManual::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            // Check if entry operation already exists
                            bool bEntryExist = (oLastParkOp != null && oLastParkOp.OPEOFF_TYPE == (int)OffstreetOperationType.Entry);

                            parametersOut = new SortedList();
                            rt = ResultType.Result_OK;

                            if (!bEntryExist)
                            {

                                ThirdPartyOffstreet oThirdPartyOffstreet = null;
                                //long lEllapsedTime = -1;

                                oThirdPartyOffstreet = new ThirdPartyOffstreet();

                                switch ((ConfirmEntryOffstreetWSSignatureType)oParkingConfiguration.GOWC_ENTRY_WS_SIGNATURE_TYPE)
                                {
                                    case ConfirmEntryOffstreetWSSignatureType.test:
                                        {
                                            dtEntryDate = dtNotifyEntryDate;
                                            sGateOut = sGate;
                                            sTariffOut = sTariff;
                                            rt = ResultType.Result_OK;
                                        }
                                        break;

                                    case ConfirmEntryOffstreetWSSignatureType.meypar:
                                        {
                                            rt = oThirdPartyOffstreet.MeyparNotifyCarEntryManual(oParkingConfiguration.GOWC_GRP_ID, sOpeId, oOpeType, sPlate, dtNotifyEntryDate, sGate, sTariff,
                                                                                                    ref parametersOut, out dtEntryDate, out sGateOut, out sTariffOut);
                                        }
                                        break;

                                    case ConfirmEntryOffstreetWSSignatureType.no_call:
                                        rt = ResultType.Result_OK;
                                        break;

                                    default:
                                        rt = ResultType.Result_Error_Generic;
                                        break;
                                }

                                if (rt != ResultType.Result_OK)
                                {
                                    xmlOut = GenerateXMLErrorResult(rt);
                                    Logger_AddLogMessage(string.Format("ConfirmCarEntryManual::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                                else
                                {

                                    int iCurrencyChargedQuantity = 0;
                                    decimal dOperationID = -1;
                                    decimal? dRechargeId;
                                    bool bRestoreBalanceInCaseOfRefund = true;
                                    int? iBalanceAfterRecharge = null;

                                    var session = oUser.MOBILE_SESSIONs.Where(r => r.MOSE_SESSIONID == parametersIn["SessionID"].ToString()
                                                                      && r.MOSE_USR_ID == oUser.USR_ID).First();

                                    integraMobile.WS.integraCommonService oCommonService = CommonService();
                                    rt = oCommonService.ChargeOffstreetOperation(OffstreetOperationType.Entry, sPlate, dChangeToApply, iAmount, iTime,
                                                                  dtEntryDate, dtNotifyEntryDate, dtPaymentDate, dtEndDate, dtExitLimitDate,
                                                                  oParkingConfiguration, oGroup, sOpeId, sTariffOut, sGateOut, "", false,
                                                                  ref oUser, session.MOSE_OS.Value, session.MOSE_ID, dLatitude, dLongitude, strAppVersion,
                                                                  0, 0, 0, 0, 0, 
                                                                  0, 0, 0, 0,
                                                                  null,
                                                                  ref parametersOut, out iCurrencyChargedQuantity, out dOperationID,
                                                                  out dRechargeId, out iBalanceAfterRecharge, out bRestoreBalanceInCaseOfRefund);

                                    if (rt != ResultType.Result_OK)
                                    {
                                        xmlOut = GenerateXMLErrorResult(rt);
                                        Logger_AddLogMessage(string.Format("ConfirmCarEntryManual::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }

                                    parametersOut["utc_offset"] = geograficAndTariffsRepository.GetInstallationUTCOffSetInMinutes(oGroup.INSTALLATION.INS_ID);

                                }


                                if (Convert.ToInt32(parametersOut["r"]) == Convert.ToInt32(ResultType.Result_OK))
                                {
                                    try
                                    {
                                        /*OPERATIONS_OFFSTREET oParkOp = null;
                                        if (customersRepository.GetOperationOffstreetData(ref oUser, dOperationID, out oParkOp))
                                        {
                                            string culture = oUser.USR_CULTURE_LANG;
                                            CultureInfo ci = new CultureInfo(culture);
                                            Thread.CurrentThread.CurrentUICulture = ci;
                                            Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(ci.Name);

                                            string strParkingEmailSubject = ResourceExtension.GetLiteral("ConfirmOffstreet_EmailHeader;*/
                                        /*
                                            * ID: {0}<br>
                                            * Matr&iacute;cula: {1}<br>
                                            * Ciudad: {2}<br>
                                            * Zona: {3}<br>
                                            * Tarifa: {4}<br>
                                            * Fecha de emisi&ocuate;: {5:HH:mm:ss dd/MM/yyyy}<br>
                                            * Aparcamiento Comienza:  {6:HH:mm:ss dd/MM/yyyy}<br><b>
                                            * Aparcamiento Finaliza:  {7:HH:mm:ss dd/MM/yyyy}</b><br>
                                            * Cantidad Pagada: {8} 
                                            */
                                        /*string strParkingEmailBody = string.Format(ResourceExtension.GetLiteral("ConfirmOffstreet_EmailBody,
                                            oParkOp.OPEOFF_ID,
                                            oParkOp.USER_PLATE.USRP_PLATE,
                                            oParkOp.INSTALLATION.INS_DESCRIPTION,
                                            oParkOp.GROUP.GRP_DESCRIPTION,
                                            oParkOp.OPEOFF_TARIFF,
                                            oParkOp.OPEOFF_PAYMENT_DATE,
                                            oParkOp.OPEOFF_ENTRY_DATE,
                                            oParkOp.OPEOFF_EXIT_DATE,
                                            (oParkOp.OPEOFF_AMOUNT_CUR_ID == oParkOp.OPEOFF_BALANCE_CUR_ID ?
                                                string.Format("{0:0.00} {1}", Convert.ToDouble(oParkOp.OPEOFF_AMOUNT) / 100, oParkOp.CURRENCy.CUR_ISO_CODE) :
                                                string.Format("{0:0.00} {1} / {2:0.00} {3}", Convert.ToDouble(oParkOp.OPEOFF_AMOUNT) / 100, oParkOp.CURRENCy.CUR_ISO_CODE,
                                                                                            Convert.ToDouble(oParkOp.OPEOFF_FINAL_AMOUNT) / 100, oParkOp.CURRENCy1.CUR_ISO_CODE)),
                                            oParkOp.OPEOFF_SUSCRIPTION_TYPE == (int)PaymentSuscryptionType.pstPrepay ?
                                                    string.Format("{0} {1:0.00} {2}", ResourceExtension.GetLiteral("Confirm_EmailBody_Balance,
                                                                Convert.ToDouble(oUser.USR_BALANCE) / 100,
                                                                infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID))) : "",
                                            ConfigurationManager.AppSettings["EmailSignatureURL"],
                                            ConfigurationManager.AppSettings["EmailSignatureGraphic"]);


                                        SendEmail(ref oUser, strParkingEmailSubject, strParkingEmailBody);
                                    }*/
                                    }
                                    catch { }

                                }
                            }
                            else
                            {
                                dtEntryDate = oLastParkOp.OPEOFF_ENTRY_DATE;
                                sGateOut = oLastParkOp.OPEOFF_GATE ?? "";
                                sTariffOut = oLastParkOp.OPEOFF_TARIFF ?? "";
                                if (!string.IsNullOrWhiteSpace(sSpaceDesc) && string.IsNullOrWhiteSpace(oLastParkOp.OPEOFF_SPACE_DESCRIPTION))
                                {
                                    if (!customersRepository.UpdateOperationOffstreetSpaceData(oLastParkOp.OPEOFF_ID, sSpaceDesc, out oLastParkOp))
                                    {
                                        rt = ResultType.Result_Error_Generic;
                                    }
                                }
                                else
                                {
                                    rt = ResultType.Result_Error_OperationEntryAlreadyExists;
                                }
                            }

                            parametersOut["r"] = Convert.ToInt32(rt).ToString();
                            parametersOut["dentry"] = dtEntryDate.ToString("HHmmssddMMyy");
                            parametersOut["gate_id"] = sGateOut;
                            parametersOut["tar_id"] = sTariffOut;

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("ConfirmCarEntryManual::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("ConfirmCarEntryManual: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }


                        }
                    }

                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("ConfirmCarEntryManual::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("ConfirmCarEntryManual::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
            }

            return xmlOut;

        }

        [WebMethod]
        public string ConfirmCarEntryManualJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("ConfirmCarEntryManualJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = ConfirmCarEntryManual(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);

                //Logger_AddLogMessage(string.Format("ConfirmCarEntryManualJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("ConfirmCarEntryManualJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);


            }

            return jsonOut;
        }

        [WebMethod]
        public string ModifyPhone(string xmlIn)
        {
            string xmlOut = "";
            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("ModifyPhone: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["OSID"] == null) ||
                        (parametersIn["phone"] == null) ||
                        (parametersIn["email"] == null)
                        )
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("ModifyPhone::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("ModifyPhone::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            string strSignupScreenType = infraestructureRepository.GetParameterValue("SignUpScreenType");
                            SignupScreenType eSignupScreenType = SignupScreenType.Iparkme;

                            if (!string.IsNullOrEmpty(strSignupScreenType))
                            {
                                try
                                {
                                    eSignupScreenType = (SignupScreenType)Convert.ToInt32(strSignupScreenType);
                                }
                                catch { }
                            }


                            USER oUser = null;
                            decimal? dInsId = null;
                            string strCulture = "";
                            string strAppVersion = "";
                            rt = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("ModifyPhone::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            int iOSID = (int)MobileOS.Web;

                            if (parametersIn["OSID"] != null)
                            {
                                try
                                {
                                    iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());
                                }
                                catch { }
                            }

                            int iCountry = -1;
                            if (parametersIn.ContainsKey("ccode"))
                            {
                                try
                                {
                                    iCountry = Convert.ToInt32(parametersIn["ccode"].ToString());
                                    string strPrefix = infraestructureRepository.GetCountryTelephonePrefix(iCountry);
                                    if (strPrefix.Length == 0)
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Country_Code);
                                        Logger_AddLogMessage(string.Format("ModifyPhone::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }
                                }
                                catch
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Country_Code);
                                    Logger_AddLogMessage(string.Format("ModifyPhone::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                            }
                            else
                            {
                                iCountry = Convert.ToInt32(oUser.USR_MAIN_TEL_COUNTRY);
                            }

                            string sTelephone = parametersIn["phone"].ToString();
                            string sEmail = parametersIn["email"].ToString();

                            // Verificar phone
                            if ((oUser.USR_MAIN_TEL_COUNTRY != iCountry) ||
                                (oUser.USR_MAIN_TEL != sTelephone))
                            {
                                if (eSignupScreenType == SignupScreenType.Iparkme)
                                {
                                    if (customersRepository.ExistMainTelephone(iCountry, sTelephone))
                                    {

                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Mobile_Phone_Already_Exist);
                                        Logger_AddLogMessage(string.Format("ModifyPhone::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }
                                }
                            }

                            // Verificar email
                            // ...

                            bool bUsernameEqualsEmail = (ConfigurationManager.AppSettings["UsernameEqualsToEmail"].ToString() == "1");

                            bool bEmailHasChanged = (oUser.USR_EMAIL != sEmail);
                            string strOldUsername = oUser.USR_USERNAME;

                            if (!customersRepository.ModifyUserEmailOrTelephone(ref oUser, iCountry, sTelephone, sEmail  , bUsernameEqualsEmail))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("ModifyPhone::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);                                
                                return xmlOut;
                            }
                            else
                            {

                                if (bEmailHasChanged)
                                {

                                    if (bUsernameEqualsEmail)
                                    {
                                        string currentPassword = "";
                                        if (!FormAuthMemberShip.MembershipService.GetPassword(strOldUsername, ref currentPassword))
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                            Logger_AddLogMessage(string.Format("ModifyPhone::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }
                                        else
                                        {
                                            //FormAuthMemberShip.FormsService.SignOut();
                                            bool bDeleted = FormAuthMemberShip.MembershipService.DeleteUser(strOldUsername);

                                            if (bDeleted)
                                            {
                                                FormAuthMemberShip.MembershipService.CreateUser(sEmail, currentPassword, sEmail);
                                            }
                                        }

                                    }
                                    else
                                    {
                                        FormAuthMemberShip.MembershipService.ChangeEmail(oUser.USR_USERNAME, sEmail);
                                    }

                                }


                            }

                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("ModifyPhone::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("ModifyPhone: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                        }

                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("ModifyPhone::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("ModifyPhone::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;
        }


        [WebMethod]
        public string ModifyPhoneJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = ModifyPhone(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("ModifyPhoneJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }

        [WebMethod]
        public string GetPhone(string xmlIn)
        {
            string xmlOut = "";
            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("GetPhone: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["OSID"] == null)
                        )
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("GetPhone::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("GetPhone::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            USER oUser = null;
                            decimal? dInsId = null;
                            string strCulture = "";
                            string strAppVersion = "";
                            rt = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("GetPhone::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            int iOSID = (int)MobileOS.Web;

                            if (parametersIn["OSID"] != null)
                            {
                                try
                                {
                                    iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());
                                }
                                catch { }
                            }

                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();
                            parametersOut["ccode"] = oUser.USR_MAIN_TEL_COUNTRY.ToString();
                            parametersOut["phone"] = oUser.USR_MAIN_TEL;

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("GetPhone::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("GetPhone: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                        }

                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("GetPhone::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("GetPhone::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;
        }


        [WebMethod]
        public string GetPhoneJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = GetPhone(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("GetPhoneJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }

        [WebMethod]
        public string ModifyEmail(string xmlIn)
        {
            string xmlOut = "";
            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("ModifyEmail: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["OSID"] == null) ||                        
                        (parametersIn["email"] == null) ||
                        (parametersIn["newemail"] == null)
                        )
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("ModifyEmail::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("ModifyEmail::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            USER oUser = null;
                            decimal? dInsId = null;
                            string strCulture = "";
                            string strAppVersion = "";
                            rt = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("ModifyEmail::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            int iOSID = (int)MobileOS.Web;

                            if (parametersIn["OSID"] != null)
                            {
                                try
                                {
                                    iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());
                                }
                                catch { }
                            }
                            
                            string sEmail = parametersIn["newemail"].ToString();

                            // Verify email
                            if (oUser.USR_EMAIL != sEmail)
                            {
                                if (customersRepository.ExistEmail(sEmail))
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Email_Already_Exist);
                                    Logger_AddLogMessage(string.Format("ModifyEmail::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;

                                }
                            }

                            bool bUsernameEqualsEmail = (ConfigurationManager.AppSettings["UsernameEqualsToEmail"].ToString() == "1");

                            bool bEmailHasChanged = (oUser.USR_EMAIL != sEmail);
                            string strOldUsername = oUser.USR_USERNAME;

                            if (!customersRepository.ModifyUserEmailOrTelephone(ref oUser, oUser.USR_MAIN_TEL_COUNTRY, oUser.USR_MAIN_TEL, sEmail, bUsernameEqualsEmail))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("ModifyEmail::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }
                            else
                            {

                                if (bEmailHasChanged)
                                {

                                    if (bUsernameEqualsEmail)
                                    {
                                        string currentPassword = "";
                                        if (!FormAuthMemberShip.MembershipService.GetPassword(strOldUsername, ref currentPassword))
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                            Logger_AddLogMessage(string.Format("ModifyEmail::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }
                                        else
                                        {
                                            //FormAuthMemberShip.FormsService.SignOut();
                                            bool bDeleted = FormAuthMemberShip.MembershipService.DeleteUser(strOldUsername);

                                            if (bDeleted)
                                            {
                                                FormAuthMemberShip.MembershipService.CreateUser(sEmail, currentPassword, sEmail);
                                            }
                                        }

                                    }
                                    else
                                    {
                                        FormAuthMemberShip.MembershipService.ChangeEmail(oUser.USR_USERNAME, sEmail);
                                    }

                                }


                            }

                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("ModifyEmail::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("ModifyEmail: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                        }

                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("ModifyEmail::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("ModifyEmail::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;
        }


        [WebMethod]
        public string ModifyEmailJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = ModifyEmail(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("ModifyEmailJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }

        [WebMethod]
        public string ModifyPassword(string xmlIn)
        {
            string xmlOut = "";
            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("ModifyPassword: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["OSID"] == null) ||
                        (parametersIn["oldpassw"] == null) ||
                        (parametersIn["newpassw"] == null)
                        )
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("ModifyPassword::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("ModifyPassword::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            USER oUser = null;
                            decimal? dInsId = null;
                            string strCulture = "";
                            string strAppVersion = "";
                            rt = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("ModifyPassword::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            int iOSID = (int)MobileOS.Web;

                            if (parametersIn["OSID"] != null)
                            {
                                try
                                {
                                    iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());
                                }
                                catch { }
                            }

                            string sOldPassword = parametersIn["oldpassw"].ToString();
                            string sNewPassword = parametersIn["newpassw"].ToString();

                            // Verify old password
                            string currentPassword = "";
                            if (!FormAuthMemberShip.MembershipService.GetPassword(oUser.USR_USERNAME, ref currentPassword))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("ModifyPassword::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }
                            else
                            {
                                if (currentPassword != sOldPassword && sOldPassword != sNewPassword)
                                {
                                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                    Logger_AddLogMessage(string.Format("ModifyPassword::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                            }



                            if (!FormAuthMemberShip.MembershipService.ChangePassword(oUser.USR_USERNAME, sOldPassword, sNewPassword))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("ModifyPassword::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("ModifyPassword::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("ModifyPassword: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                        }

                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("ModifyPassword::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("ModifyPassword::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;
        }


        [WebMethod]
        public string ModifyPasswordJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = ModifyPassword(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("ModifyPasswordJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }

        [WebMethod]
        public string ModifyBillingInfo(string xmlIn)
        {
            string xmlOut = "";
            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("ModifyBillingInfo: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["OSID"] == null) ||
                        (parametersIn["coname"] == null) ||
                        (parametersIn["coaddr"] == null) ||
                        (parametersIn["coaddrno"] == null) ||
                        (parametersIn["coaddrpcode"] == null) || 
                        (parametersIn["coaddrcity"] == null) ||
                        (parametersIn["coaddrvat"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("ModifyBillingInfo::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("ModifyBillingInfo::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            USER oUser = null;
                            decimal? dInsId = null;
                            string strCulture = "";
                            string strAppVersion = "";
                            rt = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("ModifyBillingInfo::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            int iOSID = (int)MobileOS.Web;

                            if (parametersIn["OSID"] != null)
                            {
                                try
                                {
                                    iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());
                                }
                                catch { }
                            }

                            string sConame = parametersIn["coname"].ToString();
                            string sCoaddr = parametersIn["coaddr"].ToString();

                            int iCoaddrno = 0;
                            if (parametersIn["coaddrno"] != null)
                            {
                                try
                                {
                                    iCoaddrno = Convert.ToInt32(parametersIn["coaddrno"].ToString());
                                }
                                catch { }
                            }

                            string sCoaddrpcode = parametersIn["coaddrpcode"].ToString();
                            string sCoaddrcity = parametersIn["coaddrcity"].ToString();
                            string sCoaddrvat = parametersIn["coaddrvat"].ToString();

                            if (!customersRepository.ModifyUserBillingInfo(ref oUser, sConame, sCoaddr, iCoaddrno, sCoaddrpcode, sCoaddrcity, sCoaddrvat))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("ModifyBillingInfo::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("ModifyBillingInfo::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("ModifyBillingInfo: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                        }

                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("ModifyBillingInfo::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("ModifyBillingInfo::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;
        }


        [WebMethod]
        public string ModifyBillingInfoJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = ModifyBillingInfo(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("ModifyBillingInfoJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }

        [WebMethod]
        public string GetBillingInfo(string xmlIn)
        {
            string xmlOut = "";
            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("GetBillingInfo: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["OSID"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("GetBillingInfo::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("GetBillingInfo::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            USER oUser = null;
                            decimal? dInsId = null;
                            string strCulture = "";
                            string strAppVersion = "";
                            rt = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("GetBillingInfo::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            int iOSID = (int)MobileOS.Web;

                            if (parametersIn["OSID"] != null)
                            {
                                try
                                {
                                    iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());
                                }
                                catch { }
                            }

                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();
                             
                            parametersOut["coname"] = oUser.CUSTOMER.CUS_NAME;
                            parametersOut["coaddr"] = oUser.CUSTOMER.CUS_STREET;
                            parametersOut["coaddrno"] = oUser.CUSTOMER.CUS_STREE_NUMBER.ToString();
                            parametersOut["coaddrpcode"] = oUser.CUSTOMER.CUS_ZIPCODE;
                            parametersOut["coaddrcity"] = oUser.CUSTOMER.CUS_CITY;
                            parametersOut["coaddrvat"] = oUser.CUSTOMER.CUS_DOC_ID;

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("GetBillingInfo::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("GetBillingInfo: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                        }

                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("GetBillingInfo::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("GetBillingInfo::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;
        }


        [WebMethod]
        public string GetBillingInfoJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = GetBillingInfo(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("GetBillingInfoJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }

        [WebMethod]
        public string GetUserInfo(string xmlIn)
        {
            string xmlOut = "";
            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("GetUserInfo: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["OSID"] == null))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("GetUserInfo::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("GetUserInfo::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            USER oUser = null;
                            decimal? dInsId = null;
                            string strCulture = "";
                            string strAppVersion = "";
                            rt = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("GetUserInfo::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            int iOSID = (int)MobileOS.Web;

                            if (parametersIn["OSID"] != null)
                            {
                                try
                                {
                                    iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());
                                }
                                catch { }
                            }

                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();

                            parametersOut["ccode"] = oUser.USR_MAIN_TEL_COUNTRY.ToString();
                            parametersOut["phone"] = oUser.USR_MAIN_TEL;
                            parametersOut["coname"] = oUser.CUSTOMER.CUS_NAME;
                            parametersOut["coaddr"] = oUser.CUSTOMER.CUS_STREET;
                            parametersOut["coaddrno"] = oUser.CUSTOMER.CUS_STREE_NUMBER.ToString();
                            parametersOut["coaddrpcode"] = oUser.CUSTOMER.CUS_ZIPCODE;
                            parametersOut["coaddrcity"] = oUser.CUSTOMER.CUS_CITY;
                            parametersOut["coaddrvat"] = oUser.CUSTOMER.CUS_DOC_ID;

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("GetUserInfo::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("GetUserInfo: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                        }

                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("GetUserInfo::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("GetUserInfo::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;
        }


        [WebMethod]
        public string GetUserInfoJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = GetUserInfo(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("GetUserInfoJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }

        [WebMethod]
        public string InviteFriend(string xmlIn)
        {
            string xmlOut = "";
            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("InviteFriend: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["OSID"] == null) ||
                        (parametersIn["friendemail"] == null)
                        )
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("InviteFriend::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("InviteFriend::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            USER oUser = null;
                            decimal? dInsId = null;
                            string strCulture = "";
                            string strAppVersion = "";
                            rt = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("InviteFriend::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            int iOSID = (int)MobileOS.Web;

                            if (parametersIn["OSID"] != null)
                            {
                                try
                                {
                                    iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());
                                }
                                catch { }
                            }

                            string sFriendEmail = parametersIn["friendemail"].ToString().ToLower().Trim();

                            string sFriendMessage = "";
                            if (parametersIn[""] != null)
                            {
                                try
                                {
                                    sFriendMessage = parametersIn["friendmsg"].ToString();
                                }
                                catch { }
                            }

                            if (customersRepository.ExistEmail(sFriendEmail))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Email_Already_Exist);
                                Logger_AddLogMessage(string.Format("InviteFriend::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            string culture = oUser.USR_CULTURE_LANG;
                            CultureInfo ci = new CultureInfo(culture);
                            Thread.CurrentThread.CurrentUICulture = ci;
                            Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(ci.Name);


                            long lSenderId = infraestructureRepository.SendEmailTo(sFriendEmail, ResourceExtension.GetLiteral("InviteFriend_Email_Subject"),
                                                                           string.Format(ResourceExtension.GetLiteral("InviteFriend_Email_Body"),
                                                                           ConfigurationManager.AppSettings["InviteFriend_WebBaseURL"] ?? "#",
                                                                           oUser.USR_USERNAME, oUser.USR_EMAIL, sFriendMessage,
                                                                           GetEmailFooter(ref oUser)));
                            if (lSenderId <= 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("InviteFriend::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;

                            }

                            if (!customersRepository.InsertUserFriend(ref oUser, sFriendEmail, lSenderId))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("InviteFriend::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }
                            

                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(rt).ToString();

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("InviteFriend::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("InviteFriend: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                        }

                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("InviteFriend::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("InviteFriend::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;
        }


        [WebMethod]
        public string InviteFriendJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = InviteFriend(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("InviteFriendJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }

        [WebMethod]
        public string GetFavouritesAreas(string xmlIn)
        {
            string xmlOut = "";
            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("GetFavouritesAreas: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["OSID"] == null)
                        )
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("GetFavouritesAreas::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("GetFavouritesAreas::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            USER oUser = null;
                            decimal? dInsId = null;
                            string strCulture = "";
                            string strAppVersion = "";
                            rt = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("GetFavouritesAreas::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            int iOSID = (int)MobileOS.Web;

                            if (parametersIn["OSID"] != null)
                            {
                                try
                                {
                                    iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());
                                }
                                catch { }
                            }
                            
                            List<USERS_FAVOURITES_AREA> oFavouriteAreas = null;
                            if (!customersRepository.GetFavouriteAreasFromUser(ref oUser, null, out oFavouriteAreas))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("GetFavouritesAreas::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(rt).ToString();

                            string sFavAreas = "";
                            foreach (var oFavArea in oFavouriteAreas)
                            {                                
                                sFavAreas += string.Format("<favarea><city>{0}</city><sector>{1}</sector><rate>{2}</rate></favarea>", oFavArea.USRA_INS_ID, oFavArea.USRA_GRP_ID, oFavArea.USRA_TAR_ID);
                                parametersOut["favareas"] = string.Format("<favarea><city>{0}</city><sector>{1}</sector><rate>{2}</rate></favarea>", oFavArea.USRA_INS_ID, oFavArea.USRA_GRP_ID, oFavArea.USRA_TAR_ID);
                            }                            

                            //parametersOut = new SortedList();
                            //parametersOut["r"] = Convert.ToInt32(rt).ToString();

                            //parametersOut["favareas"] = sFavAreas;

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("GetFavouritesAreas::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("GetFavouritesAreas: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                        }

                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("GetFavouritesAreas::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("GetFavouritesAreas::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;
        }


        [WebMethod]
        public string GetFavouritesAreasJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = GetFavouritesAreas(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("GetFavouritesAreasJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }

        [WebMethod]
        public string SetFavouritesAreas(string xmlIn)
        {
            string xmlOut = "";
            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("SetFavouritesAreas: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters2(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["OSID"] == null)
                        )
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("SetFavouritesAreas::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("SetFavouritesAreas::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            USER oUser = null;
                            decimal? dInsId = null;
                            string strCulture = "";
                            string strAppVersion = "";
                            rt = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("SetFavouritesAreas::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            int iOSID = (int)MobileOS.Web;

                            if (parametersIn["OSID"] != null)
                            {
                                try
                                {
                                    iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());
                                }
                                catch { }
                            }
                            
                            List<USERS_FAVOURITES_AREA> oFavouriteAreas = new List<USERS_FAVOURITES_AREA>();

                            string sSufix = "";
                            SortedList oParameters = null;
                            while (parametersIn.ContainsKey("favareas_favarea" + sSufix))
                            {
                                rt = FindParameters(parametersIn["favareas_favarea" + sSufix].ToString(), out oParameters);
                                if (rt == ResultType.Result_OK)
                                {
                                    oFavouriteAreas.Add(new USERS_FAVOURITES_AREA()
                                    {
                                        USRA_USR_ID = oUser.USR_ID,
                                        USRA_INS_ID = Convert.ToDecimal(oParameters["city"]),
                                        USRA_GRP_ID = Convert.ToDecimal(oParameters["sector"]),
                                        USRA_TAR_ID = Convert.ToDecimal(oParameters["rate"])
                                    });
                                    sSufix = (sSufix == "" ? "1" : Convert.ToString(Convert.ToInt32(sSufix) + 1));
                                }
                                else
                                {
                                    xmlOut = GenerateXMLErrorResult(rt);
                                    Logger_AddLogMessage(string.Format("SetFavouritesAreas::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                            }

                            if (!customersRepository.SetFavouriteAreasFromUser(ref oUser, oFavouriteAreas))
                            {
                                rt = ResultType.Result_Error_Generic;
                            }

                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(rt).ToString();

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("SetFavouritesAreas::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("SetFavouritesAreas: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                        }

                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("SetFavouritesAreas::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("SetFavouritesAreas::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;
        }


        [WebMethod]
        public string SetFavouritesAreasJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = SetFavouritesAreas(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("SetFavouritesAreasJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }

        [WebMethod]
        public string GetPreferredPlates(string xmlIn)
        {
            string xmlOut = "";
            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("GetPreferredPlates: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["OSID"] == null)
                        )
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("GetPreferredPlates::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("GetPreferredPlates::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            USER oUser = null;
                            decimal? dInsId = null;
                            string strCulture = "";
                            string strAppVersion = "";
                            rt = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("GetPreferredPlates::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            int iOSID = (int)MobileOS.Web;

                            if (parametersIn["OSID"] != null)
                            {
                                try
                                {
                                    iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());
                                }
                                catch { }
                            }

                            List<USERS_PREFERRED_PLATE> oPreferredPlates = null;
                            if (!customersRepository.GetPreferredPlatesFromUser(ref oUser, null, out oPreferredPlates))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("GetPreferredPlates::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            string sPrefPlates = "";
                            foreach (var oPrefPlate in oPreferredPlates)
                            {
                                sPrefPlates += string.Format("<prefplate><city>{0}</city><lp>{1}</lp></prefplate>", oPrefPlate.USRL_INS_ID, oPrefPlate.USER_PLATE.USRP_PLATE);
                            }                            

                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(rt).ToString();

                            parametersOut["prefplates"] = sPrefPlates;

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("GetPreferredPlates::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("GetPreferredPlates: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                        }

                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("GetPreferredPlates::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("GetPreferredPlates::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;
        }


        [WebMethod]
        public string GetPreferredPlatesJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = GetPreferredPlates(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("GetPreferredPlatesJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }

        [WebMethod]
        public string SetPreferredPlates(string xmlIn)
        {
            string xmlOut = "";
            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("SetPreferredPlates: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters2(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["OSID"] == null)
                        )
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("SetPreferredPlates::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("SetPreferredPlates::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            USER oUser = null;
                            decimal? dInsId = null;
                            string strCulture = "";
                            string strAppVersion = "";
                            rt = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("SetPreferredPlates::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            int iOSID = (int)MobileOS.Web;

                            if (parametersIn["OSID"] != null)
                            {
                                try
                                {
                                    iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());
                                }
                                catch { }
                            }

                            List<USERS_PREFERRED_PLATE> oPreferredPlates = new List<USERS_PREFERRED_PLATE>();

                            string sSufix = "";
                            SortedList oParameters = null;
                            while (parametersIn.ContainsKey("prefplates_prefplate" + sSufix))
                            {
                                rt = FindParameters(parametersIn["prefplates_prefplate" + sSufix].ToString(), out oParameters);
                                if (rt == ResultType.Result_OK)
                                {
                                    USER_PLATE oUserPlate = null;
                                    if (customersRepository.GetPlateFromUser(ref oUser, oParameters["lp"].ToString(), out oUserPlate))
                                    {
                                        oPreferredPlates.Add(new USERS_PREFERRED_PLATE()
                                        {
                                            USRL_USR_ID = oUser.USR_ID,
                                            USRL_INS_ID = Convert.ToDecimal(oParameters["city"]),
                                            USRL_USRP_ID = oUserPlate.USRP_ID
                                        });
                                        sSufix = (sSufix == "" ? "1" : Convert.ToString(Convert.ToInt32(sSufix) + 1));
                                    }
                                    else
                                        rt = ResultType.Result_Error_Invalid_Input_Parameter;
                                }

                                if (rt != ResultType.Result_OK)
                                {
                                    xmlOut = GenerateXMLErrorResult(rt);
                                    Logger_AddLogMessage(string.Format("SetFavouritesAreas::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                    return xmlOut;
                                }
                            }

                            if (!customersRepository.SetPreferredPlatesFromUser(ref oUser, oPreferredPlates))
                            {
                                rt = ResultType.Result_Error_Generic;
                            }

                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(rt).ToString();

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("SetPreferredPlates::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("SetPreferredPlates: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                        }

                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("SetPreferredPlates::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("SetPreferredPlates::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;
        }


        [WebMethod]
        public string SetPreferredPlatesJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = SetPreferredPlates(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("SetPreferredPlatesJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }

        [WebMethod]
        public string PAGQueryLogin(string xmlIn)
        {
            string xmlOut = "";
            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("PAGQueryLogin: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["OSID"] == null) ||
                        (parametersIn["upagatelia"] == null) ||
                        (parametersIn["paswpagatelia"] == null) ||
                        (parametersIn["d"] == null)
                        )
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("PAGQueryLogin::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("PAGQueryLogin::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            USER oUser = null;
                            decimal? dInsId = null;
                            string strCulture = "";
                            string strAppVersion = "";
                            rt = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("PAGQueryLogin::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            int iOSID = (int)MobileOS.Web;

                            if (parametersIn["OSID"] != null)
                            {
                                try
                                {
                                    iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());
                                }
                                catch { }
                            }

                            DateTime dtQuery;
                            try
                            {
                                dtQuery = DateTime.ParseExact(parametersIn["d"].ToString(), "HHmmssddMMyy",
                                                              CultureInfo.InvariantCulture);
                            }
                            catch
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                Logger_AddLogMessage(string.Format("PAGQueryLogin::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            string sPagateliaUser = parametersIn["upagatelia"].ToString();
                            string sPagateliaPwd = parametersIn["paswpagatelia"].ToString();

                            decimal? dLatitude = null;
                            decimal? dLongitude = null;
                            GetLatLon(parametersIn, out dLatitude, out dLongitude);

                            // ***
                            string sPagateliaSessionID; // = GenerateNewGuid();
                            decimal? dPagateliaBalance;
                            string sPagateliaCurIsoCode;
                            //int iPagateliaBalance = GetRandomNumber(20, 60);

                            // External ws 3rdPAGQueryLogin
                            ThirdPartyPagatelia oThirdPartyPagatelia = new ThirdPartyPagatelia();

                            rt = oThirdPartyPagatelia.QueryLogin(sPagateliaUser, sPagateliaPwd, dtQuery, dLatitude, dLongitude, out sPagateliaSessionID, out dPagateliaBalance, out sPagateliaCurIsoCode);
                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("PAGQueryLogin::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            // save pagatelia user/pwd to oUser
                            if (!customersRepository.SetUserPagateliaLastCredentials(ref oUser, sPagateliaUser, sPagateliaPwd))
                            {                                
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("PAGQueryLogin::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }                            

                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(rt).ToString();

                            parametersOut["PagateliaSessionID"] = sPagateliaSessionID;
                            if (dPagateliaBalance.HasValue) parametersOut["pagatelia_balance"] = Convert.ToInt32(Math.Round(dPagateliaBalance.Value * 100, MidpointRounding.AwayFromZero));
                            parametersOut["cur"] = sPagateliaCurIsoCode;

                            string sXmlRechPagValues = "";
                            foreach (CURRENCY_RECHARGE_VALUE oRechargeValue in infraestructureRepository
                                                .Currencies
                                                .Where(r => r.CUR_ISO_CODE == sPagateliaCurIsoCode.ToUpper())
                                                .First().CURRENCY_RECHARGE_VALUEs
                                                .Where(s => s.CURV_VALUE_TYPE == (int)RechargeValuesTypes.rvt_RechargePagatelia)
                                                .OrderBy(s => s.CURV_VALUE))
                            {
                                sXmlRechPagValues += string.Format("<value>{0}</value>", oRechargeValue.CURV_VALUE);
                            }
                            parametersOut["rechpagvalues"] = sXmlRechPagValues;                            

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("PAGQueryLogin::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("PAGQueryLogin: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                        }

                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("PAGQueryLogin::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("PAGQueryLogin::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;
        }


        [WebMethod]
        public string PAGQueryLoginJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonIn={0}", PrettyJSON(jsonIn)), LogLevels.logINFO);

                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = PAGQueryLogin(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

                //Logger_AddLogMessage(string.Format("ModifyCCDataJSON: jsonOut={0}", PrettyJSON(jsonOut)), LogLevels.logINFO);

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("PAGQueryLoginJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }

        [WebMethod]
        public string UpdateNBlockBalanceforToll(string xmlIn)
        {
            string xmlOut = "";
            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("UpdateNBlockBalanceforToll: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters2(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["OSID"] == null)
                        )
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("UpdateNBlockBalanceforToll::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("UpdateNBlockBalanceforToll::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            USER oUser = null;
                            decimal? dInsId = null;
                            string strCulture = "";
                            string strAppVersion = "";
                            rt = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("UpdateNBlockBalanceforToll::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            int iOSID = (int)MobileOS.Web;

                            if (parametersIn["OSID"] != null)
                            {
                                try
                                {
                                    iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());
                                }
                                catch { }
                            }

                            decimal? dLatitude = null;
                            decimal? dLongitude = null;
                            GetLatLon(parametersIn, out dLatitude, out dLongitude);

                            string sQr = null;
                            if (parametersIn["qr"] != null) sQr = parametersIn["qr"].ToString();

                            INSTALLATION oInstallation = null;
                            DateTime? dtinstDateTime = null;
                            if (!geograficAndTariffsRepository.getInstallation(dInsId,
                                                                               dLatitude,
                                                                               dLongitude,
                                                                               ref oInstallation,
                                                                               ref dtinstDateTime))
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("UpdateNBlockBalanceforToll::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }


                            parametersOut = new SortedList();
                            
                            decimal dMovementID = 0;
                            int iTollAmount;
                            int iTotalQuantity;
                            int iPartialVAT1;
                            int iPartialPercFEE;
                            int iPartialFixedFEE;
                            int iPartialPercFEEVAT;
                            int iPartialFixedFEEVAT;
                            int iPartialBonusFEE;
                            int iPartialBonusFEEVAT;
                            DateTime? dtOpeDateUTC = DateTime.UtcNow;

                            bool bExistTollMovement = false;
                            TOLL_MOVEMENT oTollMovement = null;
                            if (!string.IsNullOrEmpty(sQr))
                            {
                                oTollMovement = customersRepository.GetTollMovementsByQr(sQr)
                                                                   .OrderByDescending(t => t.TOLM_DATE)
                                                                   .FirstOrDefault();
                                bExistTollMovement = (oTollMovement != null);
                            }

                            if (!bExistTollMovement) 
                            {
                                DateTime dtOpeDate = dtinstDateTime.Value;
                                string sPlate = null;
                                string sTollTariff = null;
                                TOLL oToll = null;
                                string sExternalId = null;
                                bool bOnline = true;
                                iTollAmount = oInstallation.INS_TOLL_BLOCKING_AMOUNT ?? 0;

                                if (!string.IsNullOrEmpty(sQr))
                                {
                                    bOnline = false;
                                    integraMobile.Infrastructure.QrDecoder.QrTollData oQrData = null;
                                    if (integraMobile.Infrastructure.QrDecoder.QrDecoderUtil.QRDecode(sQr, out oQrData))
                                        sPlate = oQrData.Plate;
                                }

                                ResultType rtRes = ResultType.Result_OK;

                                double dChangeToApply = 1.0;
                                //DateTime dtSavedInstallationTime = DateTime.UtcNow;                            
                                decimal dVAT1;
                                decimal dVAT2;
                                decimal dPercFEE;
                                int iPercFEETopped;
                                int iFixedFEE;
                                decimal dPercBonus = 0;

                                int? iPaymentTypeId = null;
                                int? iPaymentSubtypeId = null;
                                if (oUser.CUSTOMER_PAYMENT_MEAN != null)
                                {
                                    iPaymentTypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAT_ID;
                                    iPaymentSubtypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAST_ID;
                                }

                                dVAT1 = 0;
                                dVAT2 = 0;
                                dPercFEE = 0;
                                iPercFEETopped = 0;
                                iFixedFEE = 0;

                                iPartialVAT1 = 0;
                                iPartialPercFEEVAT = 0;
                                iPartialFixedFEEVAT = 0;
                                iPartialBonusFEEVAT = 0;
                                iTotalQuantity = 0;
                                /*if (!customersRepository.GetFinantialParams(oUser, oToll, (PaymentSuscryptionType)oUser.USR_SUSCRIPTION_TYPE, iPaymentTypeId, iPaymentSubtypeId,
                                                                            out dVAT1, out dVAT2, out dPercFEE, out iPercFEETopped, out iFixedFEE))
                                {
                                    rtRes = ResultType.Result_Error_Generic;
                                    Logger_AddLogMessage("3rdPTryTollPayment::Error getting finantial parameters", LogLevels.logERROR);
                                }*/

                                if (rtRes == ResultType.Result_OK)
                                {

                                    int iCurrencyChargedQuantity = 0;
                                    decimal? dRechargeId;
                                    bool bRestoreBalanceInCaseOfRefund = true;
                                    int? iBalanceAfterRecharge = null;
                                    DateTime? dtUTCInsertionDate = null;


                                    iTotalQuantity = customersRepository.CalculateFEE(iTollAmount, dVAT1, dVAT2, dPercFEE, iPercFEETopped, iFixedFEE, dPercBonus,
                                                                                      out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE, out iPartialBonusFEE,
                                                                                      out iPartialPercFEEVAT, out iPartialFixedFEEVAT, out iPartialBonusFEEVAT);

                                    int iQT = (iPartialPercFEE - iPartialPercFEEVAT) + (iPartialFixedFEE - iPartialFixedFEEVAT);
                                    int iQC = iPartialBonusFEE - iPartialBonusFEEVAT;
                                    int iIVA = iPartialPercFEEVAT + iPartialFixedFEEVAT - iPartialBonusFEEVAT;

                                    integraMobile.WS.integraCommonService oCommonService = CommonService();

                                    integraMobile.ExternalWS.ResultType rtIntegraMobileWS =
                                        oCommonService.ChargeTollMovement(sPlate, dChangeToApply, iTollAmount, dtOpeDate, sTollTariff,
                                                                oInstallation, oToll, ref oUser, iOSID,
                                                                dVAT1, dVAT2, dPercFEE, iPercFEETopped, iFixedFEE,
                                                                iPartialVAT1, iPartialPercFEE, iPartialFixedFEE, iTotalQuantity,
                                                                sExternalId, bOnline, ChargeOperationsType.TollLock, sQr, null,
                                                                ref parametersOut,
                                                                out iCurrencyChargedQuantity, out dMovementID, out dtUTCInsertionDate, out dRechargeId, out iBalanceAfterRecharge,
                                                                out bRestoreBalanceInCaseOfRefund, out dtOpeDateUTC);

                                    rt = Convert_integraMobileExternalWSResultType_TO_ResultType(rtIntegraMobileWS);

                                    if (rt != ResultType.Result_OK)
                                    {
                                        xmlOut = GenerateXMLErrorResult(rt);
                                        Logger_AddLogMessage(string.Format("3rdPTryTollPayment::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }

                                }

                            }
                            else
                            {
                                dMovementID = oTollMovement.TOLM_ID;
                                iTollAmount = oTollMovement.TOLM_AMOUNT;
                                iTotalQuantity = customersRepository.CalculateFEE(iTollAmount, oTollMovement.TOLM_PERC_VAT1??0, oTollMovement.TOLM_PERC_VAT2??0, oTollMovement.TOLM_PERC_FEE??0, (int)(oTollMovement.TOLM_PERC_FEE_TOPPED??0), (int)(oTollMovement.TOLM_FIXED_FEE??0), 0,
                                                                                  out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE, out iPartialBonusFEE,
                                                                                  out iPartialPercFEEVAT, out iPartialFixedFEEVAT, out iPartialBonusFEEVAT);
                                dtOpeDateUTC = oTollMovement.TOLM_UTC_DATE;
                            }

                            parametersOut["r"] = Convert.ToInt32(rt).ToString();

                            parametersOut["balcur"] = oUser.USR_CUR_ID.ToString();
                            parametersOut["newbal"] = oUser.USR_BALANCE;
                            parametersOut["tollq"] = iTollAmount;
                            parametersOut["tollqvat"] = iPartialVAT1 + iPartialPercFEEVAT + iPartialFixedFEEVAT - iPartialBonusFEEVAT;
                            parametersOut["tollqtotal"] = iTotalQuantity;
                            parametersOut["block_id"] = dMovementID;
                            parametersOut["blockutcdate"] = dtOpeDateUTC.Value.ToString("HHmmssddMMyy");

                            xmlOut = GenerateXMLOuput(parametersOut);

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("UpdateNBlockBalanceforToll::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("UpdateNBlockBalanceforToll: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                        }

                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("UpdateNBlockBalanceforToll::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("UpdateNBlockBalanceforToll::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;
        }


        [WebMethod]
        public string UpdateNBlockBalanceforTollJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = UpdateNBlockBalanceforToll(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("UpdateNBlockBalanceforTollJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }


        [WebMethod]
        public string SyncTableData(string xmlIn)
        {
            string xmlOut = "";
            try
            {
                SortedList parametersIn = null;
                SortedList parametersOut = null;
                string strHash = "";
                string strHashString = "";

                Logger_AddLogMessage(string.Format("SyncTableData: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logINFO);

                ResultType rt = FindInputParameters(xmlIn, out parametersIn, out strHash, out strHashString);

                if (rt == ResultType.Result_OK)
                {

                    if ((parametersIn["u"] == null) ||
                        (parametersIn["SessionID"] == null) ||
                        (parametersIn["table"] == null) ||
                        (parametersIn["currVersion"] == null)
                        )
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                        Logger_AddLogMessage(string.Format("SyncTableData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    }
                    else
                    {
                        string strCalculatedHash = CalculateHash(strHashString, strHash);

                        if (strCalculatedHash != strHash)
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_InvalidAuthenticationHash);
                            Logger_AddLogMessage(string.Format("SyncTableData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        }
                        else
                        {
                            USER oUser = null;
                            decimal? dInsId = null;
                            string strCulture = "";
                            string strAppVersion = "";
                            rt = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion);

                            if (rt != ResultType.Result_OK)
                            {
                                xmlOut = GenerateXMLErrorResult(rt);
                                Logger_AddLogMessage(string.Format("SyncTableData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                            long lCurrVersion = -1;

                            if (parametersIn["currVersion"] != null)
                            {
                                try
                                {
                                    lCurrVersion = Convert.ToInt64(parametersIn["currVersion"].ToString());
                                }
                                catch { }
                            }

                            string sTable = parametersIn["table"].ToString();
                            StringBuilder strRegs = new StringBuilder();

                            string strMaxReturnRegistries = infraestructureRepository.GetParameterValue("Sync_" + sTable + "_MaxReturnRegistries");
                            int iMaxReturnRegistries = DEFAULT_SYNC_REGISTRIES;
                            if (!string.IsNullOrEmpty(strMaxReturnRegistries))
                            {
                                try
                                {
                                    iMaxReturnRegistries = Convert.ToInt32(strMaxReturnRegistries);
                                }
                                catch
                                {
                                    iMaxReturnRegistries = DEFAULT_SYNC_REGISTRIES;
                                }

                            }


                            switch (sTable)
                            {
                                case "streets":
                                    {


                                        STREETS_SYNC[] oArrSync;
                                        if (!infraestructureRepository.GetSyncStreets(lCurrVersion, iMaxReturnRegistries, out oArrSync))
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                            Logger_AddLogMessage(string.Format("SyncTableData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }

                                        if (oArrSync != null)
                                        {
                                            foreach (STREETS_SYNC oSync in oArrSync)
                                            {
                                                strRegs.Append("<reg json:Array='true'>");
                                                strRegs.Append(string.Format("<version>{0}</version>", oSync.STRSY_MOV_VERSION));
                                                strRegs.Append(string.Format("<movtype>{0}</movtype>", oSync.STRSY_MOV_TYPE));
                                                strRegs.Append(string.Format("<id>{0}</id>", oSync.STRSY_STR_ID));
                                                strRegs.Append(string.Format("<idext>{0}</idext>", oSync.STRSY_STR_ID_EXT));
                                                strRegs.Append(string.Format("<desc>{0}</desc>", oSync.STRSY_STR_DESCRIPTION));
                                                strRegs.Append("</reg>");
                                            }
                                        }
                                    }
                                    break;
                                case "streetSections":
                                    {
                                        STREET_SECTIONS_SYNC[] oArrSync;
                                        if (!infraestructureRepository.GetSyncStreetSections(lCurrVersion, iMaxReturnRegistries, out oArrSync))
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                            Logger_AddLogMessage(string.Format("SyncTableData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }

                                        if (oArrSync != null)
                                        {
                                            foreach (STREET_SECTIONS_SYNC oSync in oArrSync)
                                            {
                                                strRegs.Append("<reg json:Array='true'>");
                                                strRegs.Append(string.Format("<version>{0}</version>", oSync.STRSESY_MOV_VERSION));
                                                strRegs.Append(string.Format("<movtype>{0}</movtype>", oSync.STRSESY_MOV_TYPE));
                                                strRegs.Append(string.Format("<id>{0}</id>", oSync.STRSESY_STRSE_ID));
                                                strRegs.Append(string.Format("<idext>{0}</idext>", oSync.STRSESY_STRSE_ID_EXT));
                                                strRegs.Append(string.Format("<strid>{0}</strid>", oSync.STRSESY_STRSE_STR_ID));
                                                strRegs.Append(string.Format("<stridfrom>{0}</stridfrom>", oSync.STRSESY_STRSE_STR_ID_FROM));
                                                strRegs.Append(string.Format("<stridto>{0}</stridto>", oSync.STRSESY_STRSE_STR_ID_TO));
                                                strRegs.Append(string.Format("<grpid>{0}</grpid>", oSync.STRSESY_STRSE_GRP_ID));
                                                strRegs.Append(string.Format("<desc>{0}</desc>", oSync.STRSESY_STRSE_DESCRIPTION));
                                                strRegs.Append(string.Format("<colour>{0}</colour>", oSync.STRSESY_STRSE_COLOUR));
                                                strRegs.Append("</reg>");

                                            }
                                        }
                                    }
                                    break;
                                case "streetSectionsGeometry":
                                    {
                                        STREET_SECTIONS_GEOMETRY_SYNC[] oArrSync;
                                        if (!infraestructureRepository.GetSyncStreetSectionsGeometry(lCurrVersion, iMaxReturnRegistries, out oArrSync))
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                            Logger_AddLogMessage(string.Format("SyncTableData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }

                                        if (oArrSync != null)
                                        {
                                            foreach (STREET_SECTIONS_GEOMETRY_SYNC oSync in oArrSync)
                                            {
                                                strRegs.Append("<reg json:Array='true'>");
                                                strRegs.Append(string.Format("<version>{0}</version>", oSync.STRSEGESY_MOV_VERSION));
                                                strRegs.Append(string.Format("<movtype>{0}</movtype>", oSync.STRSEGESY_MOV_TYPE));
                                                strRegs.Append(string.Format("<id>{0}</id>", oSync.STRSEGESY_STRSEGE_ID));
                                                strRegs.Append(string.Format("<strseid>{0}</strseid>", oSync.STRSEGESY_STRSEGE_STRSE_ID));
                                                strRegs.Append(string.Format("<pol>{0}</pol>", oSync.STRSEGESY_STRSEGE_POL_NUMBER));
                                                strRegs.Append(string.Format("<order>{0}</order>", oSync.STRSEGESY_STRSEGE_ORDER));
                                                strRegs.Append(string.Format("<lat>{0}</lat>", oSync.STRSEGESY_STRSEGE_LATITUDE.ToString().Replace(",", ".")));
                                                strRegs.Append(string.Format("<lon>{0}</lon>", oSync.STRSEGESY_STRSEGE_LONGITUDE.ToString().Replace(",", ".")));
                                                strRegs.Append(string.Format("<appdatefrom>{0}</appdatefrom>", oSync.STRSEGESY_STRSEGE_INI_APPLY_DATE.HasValue ? oSync.STRSEGESY_STRSEGE_INI_APPLY_DATE.Value.ToString("HHmmssddMMyyyy"):""));
                                                strRegs.Append(string.Format("<appdateend>{0}</appdateend>", oSync.STRSEGESY_STRSEGE_END_APPLY_DATE.HasValue ? oSync.STRSEGESY_STRSEGE_END_APPLY_DATE.Value.ToString("HHmmssddMMyyyy") : ""));
                                                strRegs.Append("</reg>");

                                            }
                                        }
                                    }
                                    break;
                                case "streetSectionsGrid":
                                    {
                                        STREET_SECTIONS_GRID_SYNC[] oArrSync;
                                        if (!infraestructureRepository.GetSyncStreetSectionsGrid(lCurrVersion, iMaxReturnRegistries, out oArrSync))
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                            Logger_AddLogMessage(string.Format("SyncTableData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }

                                        if (oArrSync != null)
                                        {
                                            foreach (STREET_SECTIONS_GRID_SYNC oSync in oArrSync)
                                            {
                                                strRegs.Append("<reg json:Array='true'>");
                                                strRegs.Append(string.Format("<version>{0}</version>", oSync.STRSEGSY_MOV_VERSION));
                                                strRegs.Append(string.Format("<movtype>{0}</movtype>", oSync.STRSEGSY_MOV_TYPE));
                                                strRegs.Append(string.Format("<id>{0}</id>", oSync.STRSEGSY_STRSEG_ID));
                                                strRegs.Append(string.Format("<desc>{0}</desc>", oSync.STRSEGSY_STRSEG_DESCRIPTION));
                                                strRegs.Append(string.Format("<x>{0}</x>", oSync.STRSEGSY_STRSEG_X));
                                                strRegs.Append(string.Format("<y>{0}</y>", oSync.STRSEGSY_STRSEG_Y));
                                                strRegs.Append(string.Format("<max_x>{0}</max_x>", oSync.STRSEGSY_STRSEG_MAX_X));
                                                strRegs.Append(string.Format("<max_y>{0}</max_y>", oSync.STRSEGSY_STRSEG_MAX_Y));
                                                strRegs.Append("</reg>");

                                            }
                                        }
                                    }
                                    break;
                                case "streetSectionsGridGeometry":
                                    {
                                        STREET_SECTIONS_GRID_GEOMETRY_SYNC[] oArrSync;
                                        if (!infraestructureRepository.GetSyncStreetSectionsGridGeometry(lCurrVersion, iMaxReturnRegistries, out oArrSync))
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                            Logger_AddLogMessage(string.Format("SyncTableData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }

                                        if (oArrSync != null)
                                        {
                                            foreach (STREET_SECTIONS_GRID_GEOMETRY_SYNC oSync in oArrSync)
                                            {
                                                strRegs.Append("<reg json:Array='true'>");
                                                strRegs.Append(string.Format("<version>{0}</version>", oSync.STRSEGGSY_MOV_VERSION));
                                                strRegs.Append(string.Format("<movtype>{0}</movtype>", oSync.STRSEGGSY_MOV_TYPE));
                                                strRegs.Append(string.Format("<id>{0}</id>", oSync.STRSEGGSY_STRSEGG_ID));
                                                strRegs.Append(string.Format("<gridid>{0}</gridid>", oSync.STRSEGGSY_STRSEGG_STRSEG_ID));
                                                strRegs.Append(string.Format("<order>{0}</order>", oSync.STRSEGGSY_STRSEGG_ORDER));
                                                strRegs.Append(string.Format("<lat>{0}</lat>", oSync.STRSEGGSY_STRSEGG_LATITUDE.ToString().Replace(",", ".")));
                                                strRegs.Append(string.Format("<lon>{0}</lon>", oSync.STRSEGGSY_STRSEGG_LONGITUDE.ToString().Replace(",", ".")));
                                                strRegs.Append(string.Format("<appdatefrom>{0}</appdatefrom>", oSync.STRSEGGSY_STRSEGG_INI_APPLY_DATE.HasValue ? oSync.STRSEGGSY_STRSEGG_INI_APPLY_DATE.Value.ToString("HHmmssddMMyyyy") : ""));
                                                strRegs.Append(string.Format("<appdateend>{0}</appdateend>", oSync.STRSEGGSY_STRSEGG_END_APPLY_DATE.HasValue ? oSync.STRSEGGSY_STRSEGG_END_APPLY_DATE.Value.ToString("HHmmssddMMyyyy") : ""));
                                                strRegs.Append("</reg>");

                                            }
                                        }
                                    }
                                    break;
                                case "streetSectionsStreetSectionsGrid":
                                    {
                                        STREET_SECTIONS_STREET_SECTIONS_GRID_SYNC[] oArrSync;
                                        if (!infraestructureRepository.GetSyncStreetSectionsStreetSectionsGrid(lCurrVersion, iMaxReturnRegistries, out oArrSync))
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                            Logger_AddLogMessage(string.Format("SyncTableData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }

                                        if (oArrSync != null)
                                        {
                                            foreach (STREET_SECTIONS_STREET_SECTIONS_GRID_SYNC oSync in oArrSync)
                                            {
                                                strRegs.Append("<reg json:Array='true'>");
                                                strRegs.Append(string.Format("<version>{0}</version>", oSync.STRSESSGSY_MOV_VERSION));
                                                strRegs.Append(string.Format("<movtype>{0}</movtype>", oSync.STRSESSGSY_MOV_TYPE));
                                                strRegs.Append(string.Format("<id>{0}</id>", oSync.STRSESSGSY_STRSESSG_ID));
                                                strRegs.Append(string.Format("<strseid>{0}</strseid>", oSync.STRSESSGSY_STRSESSG_STRSE_ID));
                                                strRegs.Append(string.Format("<gridid>{0}</gridid>", oSync.STRSESSGSY_STRSESSG_STRSEG_ID));
                                                strRegs.Append("</reg>");

                                            }
                                        }
                                    }
                                    break;
                                case "streetSectionsTariffs":
                                    {
                                        TARIFF_IN_STREETS_SECTIONS_COMPILED_SYNC[] oArrSync;
                                        if (!infraestructureRepository.GetSyncTariffsInStreetSections(lCurrVersion, iMaxReturnRegistries, out oArrSync))
                                        {
                                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                            Logger_AddLogMessage(string.Format("SyncTableData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                            return xmlOut;
                                        }

                                        if (oArrSync != null)
                                        {
                                            foreach (TARIFF_IN_STREETS_SECTIONS_COMPILED_SYNC oSync in oArrSync)
                                            {
                                                strRegs.Append("<reg json:Array='true'>");
                                                strRegs.Append(string.Format("<version>{0}</version>", oSync.TARSTRSECSY_MOV_VERSION));
                                                strRegs.Append(string.Format("<movtype>{0}</movtype>", oSync.TARSTRSECSY_MOV_TYPE));
                                                strRegs.Append(string.Format("<id>{0}</id>", oSync.TARSTRSECSY_TARSTRSEC_ID));
                                                strRegs.Append(string.Format("<strseid>{0}</strseid>", oSync.TARSTRSECSY_TARSTRSEC_STRSE_ID));
                                                strRegs.Append(string.Format("<tarid>{0}</tarid>", oSync.TARSTRSECSY_TARSTRSEC_TAR_ID));
                                                strRegs.Append("</reg>");

                                            }
                                        }
                                    }
                                    break;
                                default:   
                                    {
                                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                                        Logger_AddLogMessage(string.Format("SyncTableData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                        return xmlOut;
                                    }
                                    break;

                            }


                            parametersOut = new SortedList();
                            parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK);
                            parametersOut["regs"] = strRegs.ToString();

                            xmlOut = GenerateXMLOuput(parametersOut, new List<string> { "regs" });

                            if (xmlOut.Length == 0)
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                                Logger_AddLogMessage(string.Format("SyncTableData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            }
                            else
                            {
                                Logger_AddLogMessage(string.Format("SyncTableData: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                            }
                        }

                    }
                }
                else
                {
                    xmlOut = GenerateXMLErrorResult(rt);
                    Logger_AddLogMessage(string.Format("SyncTableData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);

                }

                if (parametersIn != null)
                {
                    parametersIn.Clear();
                    parametersIn = null;
                }

                if (parametersOut != null)
                {
                    parametersOut.Clear();
                    parametersOut = null;
                }

            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("SyncTableData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;
        }

        [WebMethod]
        public string SyncTableDataJSON(string jsonIn)
        {
            string jsonOut = "";
            try
            {
                XmlDocument xmlIn = (XmlDocument)JsonConvert.DeserializeXmlNode(jsonIn);

                string strXmlOut = SyncTableData(xmlIn.OuterXml);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

            }
            catch (Exception e)
            {
                jsonOut = GenerateJSONErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                Logger_AddLogException(e, string.Format("SyncTableDataJSON::Error: jsonIn={0}, jsonOut={1}", PrettyJSON(jsonIn), PrettyJSON(jsonOut)), LogLevels.logERROR);

            }

            return jsonOut;
        }


        #endregion

        #region Private methods

        private static void InitializeStatic()
        {

            _ipsString = GetListOfIPS();

            int iKeyLength=24;

            if (_hMacKey == null)
            {
                _hMacKey = ConfigurationManager.AppSettings["AuthHashKeyMobile"].ToString();
            }


            if (ConfigurationManager.AppSettings["AuthHashAlgorithmMobile"].ToString() == "HMACSHA256")
            {
                iKeyLength = 64;
            }
            else if (ConfigurationManager.AppSettings["AuthHashAlgorithmMobile"].ToString() == "MACTripleDES")
            {
                iKeyLength = 24;
            }



            if (_normKey == null)
            {
                byte[] keyBytes = System.Text.Encoding.UTF8.GetBytes(_hMacKey);
                _normKey = new byte[iKeyLength];
                int iSum = 0;

                for (int i = 0; i < iKeyLength; i++)
                {
                    if (i < keyBytes.Length)
                    {
                        iSum += keyBytes[i];
                    }
                    else
                    {
                        iSum += i;
                    }
                    _normKey[i] = Convert.ToByte((iSum * BIG_PRIME_NUMBER) % (Byte.MaxValue + 1));

                }
            }
         
        }


        private static string GetListOfIPS()
        {
            string strRes = "";
            try
            {

                int nIP = 0;

                foreach (NetworkInterface ni in NetworkInterface.GetAllNetworkInterfaces())
                {
                    if (ni.NetworkInterfaceType == NetworkInterfaceType.Wireless80211 || ni.NetworkInterfaceType == NetworkInterfaceType.Ethernet)
                    {

                        foreach (UnicastIPAddressInformation ip in ni.GetIPProperties().UnicastAddresses)
                        {
                            if (ip.Address.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork)
                            {
                                if (nIP == 0)
                                    strRes = ip.Address.ToString();
                                else
                                    strRes += string.Format(" ({0})", ip.Address.ToString());

                                nIP++;
                            }
                        }
                    }
                }
            }
            catch (Exception e)
            {
                strRes = "";
                Logger_AddLogException(e, "FindInputParameters::GetListOfIPS", LogLevels.logERROR);
                // ...
            }

            return strRes;
        }

        private ResultType FindInputParameters(string xmlIn, out SortedList parameters, out string strHash, out string strHashString)
        {
            ResultType rtRes = ResultType.Result_OK;
            parameters = new SortedList();
            strHash = "";
            strHashString = "";

            try
            {
                XmlDocument xmlInDoc = new XmlDocument();
                try
                {
                    xmlInDoc.LoadXml(xmlIn);
                    XmlNodeList Nodes = xmlInDoc.SelectNodes("//" + _xmlTagName + IN_SUFIX + "/*");
                    foreach (XmlNode Node in Nodes)
                    {
                        switch (Node.Name)
                        {
                            case "ah":
                                strHash = Node.InnerText;
                                break;
                            default:

                                if (Node.HasChildNodes)
                                {
                                    if (Node.ChildNodes[0].HasChildNodes)
                                    {
                                        foreach (XmlNode ChildNode in Node.ChildNodes)
                                        {
                                            strHashString += ChildNode.InnerText;
                                            parameters[Node.Name + "_"+ ChildNode.Name] = ChildNode.InnerText.Trim();

                                        }
                                    }
                                    else
                                    {
                                        strHashString += Node.InnerText;
                                        parameters[Node.Name] = Node.InnerText.Trim();
                                    }
                                }
                                else
                                {
                                    parameters[Node.Name] = null;
                                }

                                break;

                        }

                    }

                    if (Nodes.Count == 0)
                    {
                        Logger_AddLogMessage(string.Format("FindInputParameters: Bad Input XML: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logERROR);
                        rtRes = ResultType.Result_Error_Invalid_Input_Parameter;

                    }


                }
                catch
                {
                    Logger_AddLogMessage(string.Format("FindInputParameters: Bad Input XML: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logERROR);
                    rtRes = ResultType.Result_Error_Invalid_Input_Parameter;
                }

            }
            catch (Exception e)
            {
                Logger_AddLogException(e, "FindInputParameters::Exception", LogLevels.logERROR);
                
            }


            return rtRes;
        }

        private ResultType FindInputParameters2(string xmlIn, out SortedList parameters, out string strHash, out string strHashString)
        {
            ResultType rtRes = ResultType.Result_OK;
            parameters = new SortedList();
            strHash = "";
            strHashString = "";

            try
            {
                XmlDocument xmlInDoc = new XmlDocument();
                try
                {
                    xmlInDoc.LoadXml(xmlIn);
                    XmlNodeList Nodes = xmlInDoc.SelectNodes("//" + _xmlTagName + IN_SUFIX + "/*");
                    foreach (XmlNode Node in Nodes)
                    {
                        switch (Node.Name)
                        {
                            case "ah":
                                strHash = Node.InnerText;
                                break;
                            default:

                                if (Node.HasChildNodes)
                                {
                                    if (Node.ChildNodes[0].HasChildNodes)
                                    {
                                        foreach (XmlNode ChildNode in Node.ChildNodes)
                                        {
                                            strHashString += ChildNode.InnerText;
                                            string sValue = "";
                                            if (ChildNode.HasChildNodes)
                                                sValue = ChildNode.InnerXml.Trim();
                                            else
                                                sValue = ChildNode.InnerText.Trim();

                                            string sSufix = "";
                                            while (parameters.ContainsKey(Node.Name + "_" + ChildNode.Name + sSufix))
                                            {
                                                if (sSufix == "")
                                                    sSufix = "1";
                                                else
                                                    sSufix = Convert.ToString(Convert.ToInt32(sSufix) + 1);
                                            }                                            
                                            parameters[Node.Name + "_" + ChildNode.Name + sSufix] = sValue;
                                        }
                                    }
                                    else
                                    {
                                        strHashString += Node.InnerText;
                                        parameters[Node.Name] = Node.InnerText.Trim();
                                    }
                                }
                                else
                                {
                                    parameters[Node.Name] = null;
                                }

                                break;

                        }

                    }

                    if (Nodes.Count == 0)
                    {
                        Logger_AddLogMessage(string.Format("FindInputParameters2: Bad Input XML: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logERROR);
                        rtRes = ResultType.Result_Error_Invalid_Input_Parameter;

                    }


                }
                catch
                {
                    Logger_AddLogMessage(string.Format("FindInputParameters2: Bad Input XML: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logERROR);
                    rtRes = ResultType.Result_Error_Invalid_Input_Parameter;
                }

            }
            catch (Exception e)
            {
                Logger_AddLogException(e, "FindInputParameters2::Exception", LogLevels.logERROR);

            }


            return rtRes;
        }

        private ResultType FindParameters(string xmlIn, out SortedList parameters)
        {
            ResultType rtRes = ResultType.Result_OK;
            parameters = new SortedList();

            try
            {
                xmlIn = "<root>" + xmlIn + "</root>";
                XmlDocument xmlInDoc = new XmlDocument();
                try
                {
                    xmlInDoc.LoadXml(xmlIn);
                    XmlNodeList Nodes = xmlInDoc.SelectNodes("//root/*");
                    foreach (XmlNode Node in Nodes)
                    {
                        if (Node.HasChildNodes)
                        {
                            if (Node.ChildNodes[0].HasChildNodes)
                            {
                                foreach (XmlNode ChildNode in Node.ChildNodes)
                                {                                    
                                    string sValue = "";
                                    if (ChildNode.HasChildNodes)
                                        sValue = ChildNode.InnerXml.Trim();
                                    else
                                        sValue = ChildNode.InnerText.Trim();

                                    string sSufix = "";
                                    while (parameters.ContainsKey(Node.Name + "_" + ChildNode.Name + sSufix))
                                    {
                                        if (sSufix == "")
                                            sSufix = "1";
                                        else
                                            sSufix = Convert.ToString(Convert.ToInt32(sSufix) + 1);
                                    }
                                    parameters[Node.Name + "_" + ChildNode.Name + sSufix] = sValue;
                                }
                            }
                            else
                            {                                
                                parameters[Node.Name] = Node.InnerText.Trim();
                            }
                        }
                        else
                        {
                            parameters[Node.Name] = null;
                        }
                    }

                    if (Nodes.Count == 0)
                    {
                        Logger_AddLogMessage(string.Format("FindParameters: Bad Input XML: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logERROR);
                        rtRes = ResultType.Result_Error_Invalid_Input_Parameter;

                    }


                }
                catch
                {
                    Logger_AddLogMessage(string.Format("FindParameters: Bad Input XML: xmlIn={0}", PrettyXml(xmlIn)), LogLevels.logERROR);
                    rtRes = ResultType.Result_Error_Invalid_Input_Parameter;
                }

            }
            catch (Exception e)
            {
                Logger_AddLogException(e, "FindParameters::Exception", LogLevels.logERROR);

            }


            return rtRes;
        }

        private string GenerateXMLOuput(SortedList parametersOut)
        {
            string strRes = "";
            try
            {
                XmlDocument xmlOutDoc = new XmlDocument();

                XmlDeclaration xmldecl;
                xmldecl = xmlOutDoc.CreateXmlDeclaration("1.0", null, null);
                xmldecl.Encoding = "UTF-8";
                xmlOutDoc.AppendChild(xmldecl);

                XmlElement root = xmlOutDoc.CreateElement(_xmlTagName + OUT_SUFIX);
                xmlOutDoc.AppendChild(root);
                XmlNode rootNode = xmlOutDoc.SelectSingleNode(_xmlTagName + OUT_SUFIX);

                foreach (DictionaryEntry item in parametersOut)                
                {
                    try
                    {
                        XmlElement node = xmlOutDoc.CreateElement(item.Key.ToString());
                        node.InnerXml = item.Value.ToString().Trim();
                        rootNode.AppendChild(node);
                    }
                    catch (Exception)
                    {
                        //Logger_AddLogException(e, "GenerateXMLOuput::Exception", LogLevels.logERROR);
                    }
                }

                strRes = xmlOutDoc.OuterXml;

                if (parametersOut["r"] != null)
                {
                    try
                    {
                        int ir = Convert.ToInt32(parametersOut["r"].ToString());
                        ResultType rt = (ResultType)ir;

                        if (ir<0)
                        {
                            Logger_AddLogMessage(string.Format("Error = {0}", rt.ToString()), LogLevels.logERROR);
                        }
                    }
                    catch
                    {

                    }


                }

            }
            catch (Exception e)
            {
                Logger_AddLogException(e, "GenerateXMLOuput::Exception", LogLevels.logERROR);
                
            }


            return strRes;
        }


        private string GenerateXMLOuput(SortedList parametersOut, List<string> lstArrayNodes = null)
        {
            string strRes = "";
            try
            {
                XmlDocument xmlOutDoc = new XmlDocument();

                XmlDeclaration xmldecl;
                xmldecl = xmlOutDoc.CreateXmlDeclaration("1.0", null, null);
                xmldecl.Encoding = "UTF-8";
                xmlOutDoc.AppendChild(xmldecl);

                XmlElement root = xmlOutDoc.CreateElement(_xmlTagName + OUT_SUFIX);

                XmlAttribute jsonNS = xmlOutDoc.CreateAttribute("xmlns", "json", "http://www.w3.org/2000/xmlns/");
                jsonNS.Value = "http://james.newtonking.com/projects/json";


                xmlOutDoc.AppendChild(root);
                root.Attributes.Append(jsonNS);
                XmlNode rootNode = xmlOutDoc.SelectSingleNode(_xmlTagName + OUT_SUFIX);

                foreach (DictionaryEntry item in parametersOut)
                {
                    try
                    {
                        XmlElement node = xmlOutDoc.CreateElement(item.Key.ToString());

                        if (lstArrayNodes != null)
                        {
                            if (lstArrayNodes.Contains(item.Key.ToString()))
                            {
                                //node.Attributes.Append(jsonNS);
                                node.SetAttribute("xmlns:json", @"http://james.newtonking.com/projects/json");
                            }
                           
                        }                       
                        
                        node.InnerXml = item.Value.ToString().Trim();

                        rootNode.AppendChild(node);
                    }
                    catch (Exception e)
                    {
                        Logger_AddLogException(e, string.Format("GenerateXMLOuput::Exception item={0}; value={1}", item.Key.ToString(), item.Value.ToString()), LogLevels.logERROR);
                    }
                }

                strRes = xmlOutDoc.OuterXml;

                if (parametersOut["r"] != null)
                {
                    try
                    {
                        int ir = Convert.ToInt32(parametersOut["r"].ToString());
                        ResultType rt = (ResultType)ir;

                        if (ir < 0)
                        {
                            Logger_AddLogMessage(string.Format("Error = {0}", rt.ToString()), LogLevels.logERROR);
                        }
                    }
                    catch
                    {

                    }


                }

            }
            catch (Exception e)
            {
                Logger_AddLogException(e, "GenerateXMLOuput::Exception", LogLevels.logERROR);

            }


            return strRes;
        }

        private string GenerateXMLErrorResult(ResultType rt)
        {
            string strRes = "";
            try
            {
                Logger_AddLogMessage(string.Format("Error = {0}",rt.ToString()), LogLevels.logERROR);

                XmlDocument xmlOutDoc = new XmlDocument();
                
                XmlDeclaration xmldecl;
                xmldecl = xmlOutDoc.CreateXmlDeclaration("1.0", null, null);
                xmldecl.Encoding = "UTF-8";
                xmlOutDoc.AppendChild(xmldecl);

                XmlElement root = xmlOutDoc.CreateElement(_xmlTagName + OUT_SUFIX);
                xmlOutDoc.AppendChild(root);
                XmlNode rootNode = xmlOutDoc.SelectSingleNode(_xmlTagName + OUT_SUFIX);
                XmlElement result = xmlOutDoc.CreateElement("r");
                result.InnerText = ((int)rt).ToString();
                rootNode.AppendChild(result);
                strRes = xmlOutDoc.OuterXml;

            }
            catch (Exception e)
            {
                Logger_AddLogException(e, "GenerateXMLErrorResult::Exception", LogLevels.logERROR);
                
            }


            return strRes;
        }


        private string GenerateJSONErrorResult(ResultType rt)
        {
            string jsonOut = "";
            try
            {

                string strXmlOut = GenerateXMLErrorResult(rt);

                XmlDocument xmlOut = new XmlDocument();
                xmlOut.LoadXml(strXmlOut);
                xmlOut.RemoveChild(xmlOut.FirstChild);
                jsonOut = JsonConvert.SerializeXmlNode(xmlOut);
                xmlOut = null;

            }
            catch (Exception e)
            {
                Logger_AddLogException(e, "GenerateJSONErrorResult::Exception", LogLevels.logERROR);
                
            }


            return jsonOut;
        }


        private ResultType GetQueryLoginData(ref USER oUser, SortedList parametersIn, out decimal? dInsId, ref SortedList parametersOut)
        {
            ResultType rt = ResultType.Result_OK;
            dInsId = null;

            try
            {
                if (oUser != null)
                {

                    parametersOut["sessiontimeout"] = ConfigurationManager.AppSettings["SessionTimeoutInMinutes"].ToString();
                    parametersOut["cur"] = oUser.CURRENCy.CUR_ISO_CODE;
                    parametersOut["bal"] = oUser.USR_BALANCE.ToString();
                    parametersOut["time_bal"] = oUser.USR_TIME_BALANCE.ToString();
                    parametersOut["refund_balance_type"] = oUser.USR_REFUND_BALANCE_TYPE.ToString();



                    decimal? dInstallationId = null;
                    decimal? dLatitude = null;
                    decimal? dLongitude = null;
                    
                    try
                    {
                        decimal dTryInstallationId = Convert.ToDecimal(parametersIn["cityID"].ToString());
                        dInstallationId = dTryInstallationId;
                    }
                    catch
                    {
                        dInstallationId = null;
                    }

                    NumberFormatInfo numberFormatProvider = new NumberFormatInfo();
                    numberFormatProvider.NumberDecimalSeparator = ".";

                    string sValue = "";

                    try
                    {
                        sValue = parametersIn["gps_lat"].ToString();
                        if (sValue.IndexOf(",") > 0) numberFormatProvider.NumberDecimalSeparator = ",";
                        decimal dTryLatitude = Convert.ToDecimal(parametersIn["gps_lat"].ToString(), numberFormatProvider);
                        dLatitude = dTryLatitude;
                    }
                    catch
                    {
                        dLatitude = null;
                    }

                    try
                    {
                        sValue = parametersIn["gps_long"].ToString();
                        if (sValue.IndexOf(",") > 0) numberFormatProvider.NumberDecimalSeparator = ",";
                        decimal dTryLongitude = Convert.ToDecimal(parametersIn["gps_long"].ToString(), numberFormatProvider);
                        dLongitude = dTryLongitude;
                    }
                    catch
                    {
                        dLongitude = null;
                    }


                    INSTALLATION oInstallation = null;
                    DateTime? dtinstDateTime = null;
                    if (!geograficAndTariffsRepository.getInstallation(dInstallationId,
                                                                 dLatitude,
                                                                 dLongitude,
                                                                 ref oInstallation,
                                                                 ref dtinstDateTime))
                    {
                        rt = ResultType.Result_Error_Invalid_City;

                        try
                        {
                            IEnumerable<INSTALLATION> insList = geograficAndTariffsRepository.getInstallationsList();
                            parametersOut["cities"] = "";
                            foreach (INSTALLATION inst in insList)
                            {
                                parametersOut["cities"] += string.Format("<city json:Array='true' id=\"{0}\">{1}</city>", inst.INS_ID, inst.INS_DESCRIPTION);
                            }
                        }
                        catch (Exception e)
                        {
                            Logger_AddLogException(e, string.Format("GetQueryLoginData::Error = {0}", rt.ToString()), LogLevels.logERROR);
                            parametersOut["cities"] = null;
                        }

                        Logger_AddLogMessage(string.Format("GetQueryLoginData::Error: {0}", rt.ToString()), LogLevels.logERROR);
                        return rt;
                    }




                    dInsId = oInstallation.INS_ID;
                    parametersOut["cityID"] = oInstallation.INS_ID.ToString();
                    parametersOut["cityShortDesc"] = oInstallation.INS_SHORTDESC;
                    parametersOut["cityDatetime"] = ((DateTime)dtinstDateTime).ToString("HHmmssddMMyy");
                    parametersOut["cityVERS"] = oInstallation.INS_VERSION.ToString();
                    parametersOut["tarVERS"] = oInstallation.INS_TAR_VERSION.ToString();
                    parametersOut["cur_city"] = oInstallation.CURRENCy.CUR_ISO_CODE;
                    parametersOut["utc_offset"] = geograficAndTariffsRepository.GetInstallationUTCOffSetInMinutes(oInstallation.INS_ID);

                    string strBckWSURL = infraestructureRepository.GetParameterValue("QueryLogin_BckWSURL");
                    if (!string.IsNullOrEmpty(strBckWSURL))
                        parametersOut["bckwsurl"] = strBckWSURL;

                    CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG oCreditCardConfig = oUser.CURRENCy.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIGs
                        .Where(r => r.CPTGC_ENABLED != 0 &&  r.CPTGC_PAT_ID == Convert.ToInt32(PaymentMeanType.pmtDebitCreditCard))
                        .FirstOrDefault();

                    if (oCreditCardConfig != null)
                    {
                        PaymentMeanCreditCardProviderType eProviderType = (PaymentMeanCreditCardProviderType)oCreditCardConfig.CPTGC_PROVIDER;
                        parametersOut["ccprovider"] = (int)eProviderType;

                        switch (eProviderType)
                        {
                            case PaymentMeanCreditCardProviderType.pmccpCreditCall:
                                parametersOut["merchantcode"] = oCreditCardConfig.CPTGC_CC_TERMINAL_ID;
                                parametersOut["merchantname"] = oCreditCardConfig.CPTGC_CC_SELLER_NAME;
                                parametersOut["get_token_url"] = oCreditCardConfig.CPTGC_CC_EKASHU_FORM_URL;
                                parametersOut["mac_key"] = oCreditCardConfig.CPTGC_CC_TRANSACTION_KEY.Substring(0, 8);
                                parametersOut["hash_key"] = string.IsNullOrEmpty(oCreditCardConfig.CPTGC_CC_HASH_KEY) ? "" : oCreditCardConfig.CPTGC_CC_HASH_KEY;
                                parametersOut["css_url"] = string.IsNullOrEmpty(oCreditCardConfig.CPTGC_CC_CSS_URL) ? "" : oCreditCardConfig.CPTGC_CC_CSS_URL;
                                break;

                            case PaymentMeanCreditCardProviderType.pmccpIECISA:
                                parametersOut["iecisa_token_url"] = oCreditCardConfig.CPTGC_STRIPE_FORM_URL;
                                parametersOut["iecisa_guid"] = oCreditCardConfig.IECISA_CONFIGURATION.IECCON_GUID;
                                parametersOut["iecisa_hash_seed_key"] = oCreditCardConfig.IECISA_CONFIGURATION.IECCON_HASH_SEED;
                                break;

                            case PaymentMeanCreditCardProviderType.pmccpStripe:
                                parametersOut["stripe_token_url"] = oCreditCardConfig.CPTGC_STRIPE_FORM_URL;
                                parametersOut["stripe_guid"] = oCreditCardConfig.STRIPE_CONFIGURATION.STRCON_GUID;
                                parametersOut["stripe_hash_seed_key"] = oCreditCardConfig.STRIPE_CONFIGURATION.STRCON_HASH_SEED;
                                break;


                            default:
                                break;
                        }
                       
                    }

                    CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG oPaypalConfig = oUser.CURRENCy.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIGs
                        .Where(r => r.CPTGC_ENABLED != 0 &&  r.CPTGC_PAT_ID == Convert.ToInt32(PaymentMeanType.pmtPaypal))
                        .FirstOrDefault();

                    if (oPaypalConfig != null)
                    {
                        parametersOut["Paypal_Client_id"] = oPaypalConfig.CPTGC_PP_RESTAPI_CLIENT_ID;
                        parametersOut["Paypal_Environment"] = oPaypalConfig.CPTGC_PP_RESTAPI_ENVIRONMENT;
                    }

                    parametersOut["ParkingsReportURL"] = infraestructureRepository.GetParameterValue("ParkingsReportURL");
                    parametersOut["ParkingOperationReceiptURL"] = infraestructureRepository.GetParameterValue("ParkingOperationReceiptURL");
                    parametersOut["ParkingFinePaymentReceiptURL"] = infraestructureRepository.GetParameterValue("ParkingFinePaymentReceiptURL");
                    parametersOut["StreetSectionsPackageURL"] = infraestructureRepository.GetParameterValue("StreetSectionsPackageURL");
                    decimal dLastStreetSectionPackage=-1;
                    infraestructureRepository.GetLastStreetSectionPackageId(oInstallation.INS_ID,out dLastStreetSectionPackage);
                    parametersOut["StreetSectionsPackageVersion"] = Convert.ToInt32(dLastStreetSectionPackage);


                    /*string strSyncVersions = "";
                    strSyncVersions += string.Format("<syncversion json:Array='true'><table>{0}</table><version>{1}</version></syncversion>", "streets", infraestructureRepository.GetMaxVersionStreets());
                    strSyncVersions += string.Format("<syncversion json:Array='true'><table>{0}</table><version>{1}</version></syncversion>", "streetSections", infraestructureRepository.GetMaxVersionStreetSections());
                    strSyncVersions += string.Format("<syncversion json:Array='true'><table>{0}</table><version>{1}</version></syncversion>", "streetSectionsGeometry", infraestructureRepository.GetMaxVersionStreetSectionsGeometry());
                    strSyncVersions += string.Format("<syncversion json:Array='true'><table>{0}</table><version>{1}</version></syncversion>", "streetSectionsGrid", infraestructureRepository.GetMaxVersionStreetSectionsGrid());
                    strSyncVersions += string.Format("<syncversion json:Array='true'><table>{0}</table><version>{1}</version></syncversion>", "streetSectionsGridGeometry", infraestructureRepository.GetMaxVersionStreetSectionsGridGeometry());
                    strSyncVersions += string.Format("<syncversion json:Array='true'><table>{0}</table><version>{1}</version></syncversion>", "streetSectionsStreetSectionsGrid", infraestructureRepository.GetMaxVersionStreetSectionsStreetSectionsGrid());
                    strSyncVersions += string.Format("<syncversion json:Array='true'><table>{0}</table><version>{1}</version></syncversion>", "streetSectionsTariffs", infraestructureRepository.GetMaxVersionTariffsInStreetSections());
                    parametersOut["syncDATA"] = strSyncVersions;*/


                    


                    //parametersOut["userMSG"] = "<usertick><f>1234567890</f><d>121406180213</d><lp>" + oUser.USER_PLATEs[0].USRP_PLATE + "</lp><q>300</q></usertick>";
                    if (!GetUserTicks(oUser,oInstallation,dtinstDateTime.Value,ref parametersOut))
                    {
                        Logger_AddLogMessage(string.Format("GetQueryLoginData::GetUserTicksError"), LogLevels.logERROR);
                    }


                    parametersOut["userDATA"] = "<userlp xmlns:json='http://james.newtonking.com/projects/json'>";
                    foreach (USER_PLATE oPlate in oUser.USER_PLATEs.OrderBy(t => t.USRP_PLATE))
                    {
                        if (oPlate.USRP_ENABLED == 1)
                        {
                            parametersOut["userDATA"] = parametersOut["userDATA"] + "<lp json:Array='true'>" + oPlate.USRP_PLATE + "</lp>";
                        }

                    }
                    parametersOut["userDATA"] = parametersOut["userDATA"] + "</userlp>";

                    parametersOut["userDATA"] = parametersOut["userDATA"] + "<confirmationtodelete>" + (ConfigurationManager.AppSettings["confirmationToDeleteUserPlate"] ?? "0") + "</confirmationtodelete>";

                    if (oUser.USR_SUSCRIPTION_TYPE == null)
                    {
                        parametersOut["userDATA"] = parametersOut["userDATA"] + "<paymeth>" +
                                       Convert.ToInt32(payMethods.Without_SuscriptionType).ToString() +
                                       "</paymeth><ccpan></ccpan>";
                    }
                    else
                    {
                        if (oUser.USR_SUSCRIPTION_TYPE == (int)PaymentSuscryptionType.pstPrepay)
                        {
                            if (oUser.CUSTOMER_PAYMENT_MEAN != null)
                            {

                                if ((oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_ENABLED == 1) && (oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_VALID == 1))
                                {
                                    if ((PaymentMeanType)oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAT_ID == PaymentMeanType.pmtDebitCreditCard)
                                    {
                                        if (oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AUTOMATIC_RECHARGE == 1)
                                        {
                                            parametersOut["userDATA"] = parametersOut["userDATA"] + "<paymeth>" +
                                                Convert.ToInt32(payMethods.Prepay_Credit_Card_Automatic).ToString() +
                                                "</paymeth><ccpan>" + oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_TOKEN_MASKED_CARD_NUMBER + "</ccpan>";

                                            parametersOut["userDATA"] = parametersOut["userDATA"] +
                                                string.Format("<autbelow>{0}</autbelow><autamo>{1}</autamo>",
                                                oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_RECHARGE_WHEN_AMOUNT_IS_LESS,
                                                oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AMOUNT_TO_RECHARGE);


                                        }
                                        else
                                        {
                                            parametersOut["userDATA"] = parametersOut["userDATA"] + "<paymeth>" +
                                                Convert.ToInt32(payMethods.Prepay_Credit_Card_Manual).ToString() +
                                                "</paymeth><ccpan>" + oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_TOKEN_MASKED_CARD_NUMBER + "</ccpan>";

                                        }
                                       
                                    }
                                    else if ((PaymentMeanType)oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAT_ID == PaymentMeanType.pmtPaypal)
                                    {
                                        if (oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AUTOMATIC_RECHARGE == 1)
                                        {
                                            parametersOut["userDATA"] = parametersOut["userDATA"] + "<paymeth>" +
                                                Convert.ToInt32(payMethods.Prepay_Paypal_Automatic).ToString() +
                                                "</paymeth><ccpan></ccpan>";

                                            parametersOut["userDATA"] = parametersOut["userDATA"] +
                                                string.Format("<autbelow>{0}</autbelow><autamo>{1}</autamo>",
                                                oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_RECHARGE_WHEN_AMOUNT_IS_LESS,
                                                oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AMOUNT_TO_RECHARGE);

                                        }
                                        else
                                        {
                                            parametersOut["userDATA"] = parametersOut["userDATA"] + "<paymeth>" +
                                                Convert.ToInt32(payMethods.Prepay_Paypal_Manual).ToString() +
                                                "</paymeth><ccpan></ccpan>";

                                        }

                                    }
                                }
                                else
                                {
                                    parametersOut["userDATA"] = parametersOut["userDATA"] + "<paymeth>" +
                                        Convert.ToInt32(payMethods.Prepay_Without_Paymethod_Currently).ToString() +
                                        "</paymeth><ccpan></ccpan>";

                                }



                            }
                            else
                            {
                                if (oUser.CUSTOMER.CUSTOMER_PAYMENT_MEANs.Count() > 0)
                                {
                                    parametersOut["userDATA"] = parametersOut["userDATA"] + "<paymeth>" +
                                        Convert.ToInt32(payMethods.Prepay_Without_Paymethod_Currently).ToString() +
                                        "</paymeth><ccpan></ccpan>";
                                }
                                else
                                {
                                    parametersOut["userDATA"] = parametersOut["userDATA"] + "<paymeth>" +
                                        Convert.ToInt32(payMethods.Prepay_New_User_Without_Paymethod_Currently).ToString() +
                                        "</paymeth><ccpan></ccpan>";
                                }
                            }
                        }
                        else if (oUser.USR_SUSCRIPTION_TYPE == (int)PaymentSuscryptionType.pstPerTransaction)
                        {
                            if (oUser.CUSTOMER_PAYMENT_MEAN != null)
                            {

                                if ((oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_ENABLED == 1) && (oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_VALID == 1))
                                {
                                    if ((PaymentMeanType)oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAT_ID == PaymentMeanType.pmtDebitCreditCard)
                                    {
                                        parametersOut["userDATA"] = parametersOut["userDATA"] + "<paymeth>" +
                                              Convert.ToInt32(payMethods.PayPerTransaction_Credit_Card).ToString() +
                                              "</paymeth><ccpan>" + oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_TOKEN_MASKED_CARD_NUMBER + "</ccpan>";
                                    }
                                    else if ((PaymentMeanType)oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAT_ID == PaymentMeanType.pmtPaypal)
                                    {
                                        parametersOut["userDATA"] = parametersOut["userDATA"] + "<paymeth>" +
                                              Convert.ToInt32(payMethods.PayPerTransaction_Paypal).ToString() +
                                              "</paymeth><ccpan></ccpan>";
                                    }
                                }
                                else
                                {
                                   
                                    if (oUser.CUSTOMER.CUSTOMER_PAYMENT_MEANs.Count() > 0)
                                    {
                                        parametersOut["userDATA"] = parametersOut["userDATA"] + "<paymeth>" +
                                                                           Convert.ToInt32(payMethods.PayPerTransaction_Without_Paymethod_Currently).ToString() +
                                                                           "</paymeth><ccpan></ccpan>";
                                    }
                                    else
                                    {
                                        parametersOut["userDATA"] = parametersOut["userDATA"] + "<paymeth>" +
                                            Convert.ToInt32(payMethods.PayPerTransaction_New_User_Without_Paymethod_Currently).ToString() +
                                            "</paymeth><ccpan></ccpan>";
                                    }

                                }                              

                            }
                            else
                            {
                                if (oUser.CUSTOMER.CUSTOMER_PAYMENT_MEANs.Count() > 0)
                                {
                                    parametersOut["userDATA"] = parametersOut["userDATA"] + "<paymeth>" +
                                        Convert.ToInt32(payMethods.PayPerTransaction_Without_Paymethod_Currently).ToString() +
                                        "</paymeth><ccpan></ccpan>";
                                }
                                else
                                {
                                    parametersOut["userDATA"] = parametersOut["userDATA"] + "<paymeth>" +
                                        Convert.ToInt32(payMethods.PayPerTransaction_New_User_Without_Paymethod_Currently).ToString() +
                                        "</paymeth><ccpan></ccpan>";

                                }
                            }


                        }
                    }

                    parametersOut["userDATA"] = parametersOut["userDATA"] + "<val_autbelow xmlns:json='http://james.newtonking.com/projects/json'>";

                    decimal dCurID = oUser.USR_CUR_ID;
                    foreach (CURRENCY_RECHARGE_VALUE oRechargeValue in infraestructureRepository
                                                       .Currencies
                                                       .Where(r => r.CUR_ID == dCurID)
                                                       .First().CURRENCY_RECHARGE_VALUEs
                                                       .Where(s => s.CURV_VALUE_TYPE == (int)RechargeValuesTypes.rvt_AutomaticRechargeBelow)
                                                       .OrderBy(s => s.CURV_VALUE))                    
                    {
                        parametersOut["userDATA"] = parametersOut["userDATA"] + string.Format("<value json:Array='true'>{0}</value>", oRechargeValue.CURV_VALUE);
                    }

                    parametersOut["userDATA"] = parametersOut["userDATA"] + "</val_autbelow>";
                    parametersOut["userDATA"] = parametersOut["userDATA"] + "<val_autamo xmlns:json='http://james.newtonking.com/projects/json'>";

                    foreach (CURRENCY_RECHARGE_VALUE oRechargeValue in infraestructureRepository
                                                       .Currencies
                                                       .Where(r => r.CUR_ID == dCurID)
                                                       .First().CURRENCY_RECHARGE_VALUEs
                                                       .Where(s => s.CURV_VALUE_TYPE == (int)RechargeValuesTypes.rvt_AutomaticRecharge)
                                                       .OrderBy(s => s.CURV_VALUE))
                    {
                        parametersOut["userDATA"] = parametersOut["userDATA"] + string.Format("<value json:Array='true'>{0}</value>", oRechargeValue.CURV_VALUE);
                    }

                    parametersOut["userDATA"] = parametersOut["userDATA"] + "</val_autamo>";

                    parametersOut["userDATA"] = parametersOut["userDATA"] + "<coname>" + XmlEscape(oUser.CUSTOMER.CUS_NAME) + "</coname>";
                    parametersOut["userDATA"] = parametersOut["userDATA"] + "<coaddr>" + XmlEscape(oUser.CUSTOMER.CUS_STREET) + "</coaddr>";
                    parametersOut["userDATA"] = parametersOut["userDATA"] + "<coaddrno>" + oUser.CUSTOMER.CUS_STREE_NUMBER.ToString() + "</coaddrno>";
                    parametersOut["userDATA"] = parametersOut["userDATA"] + "<coaddrpcode>" + XmlEscape(oUser.CUSTOMER.CUS_ZIPCODE) + "</coaddrpcode>";
                    parametersOut["userDATA"] = parametersOut["userDATA"] + "<coaddrcity>" + XmlEscape(oUser.CUSTOMER.CUS_CITY) + "</coaddrcity>";
                    parametersOut["userDATA"] = parametersOut["userDATA"] + "<coaddrvat>" + XmlEscape(oUser.CUSTOMER.CUS_DOC_ID) + "</coaddrvat>";
                    parametersOut["userDATA"] = parametersOut["userDATA"] + "<ccode>" + oUser.USR_MAIN_TEL_COUNTRY.ToString() + "</ccode>";
                    parametersOut["userDATA"] = parametersOut["userDATA"] + "<phone>" + XmlEscape(oUser.USR_MAIN_TEL) + "</phone>";

                    parametersOut["userDATA"] = parametersOut["userDATA"] + "<seextime>" + (ConfigurationManager.AppSettings["UserData_SeexTime"] ?? "600") + "</seextime>";

                    parametersOut["userDATA"] = parametersOut["userDATA"] +
                                       "<userparks xmlns:json='http://james.newtonking.com/projects/json'>";
                    try
                    {
                        int iNumRows = 0;
                        var oPlatesOperations = customersRepository.GetUserPlateLastOperation(ref oUser, out iNumRows);

                        if (iNumRows > 0)
                        {

                            foreach (OPERATION oper in oPlatesOperations)
                            {
                                if ((oper.OPE_DATE <= dtinstDateTime)
                                    && (oper.OPE_ENDDATE >= dtinstDateTime))
                                {
                                    parametersOut["userDATA"] = parametersOut["userDATA"] +
                                        "<userpark json:Array='true'>";
                                    parametersOut["userDATA"] = parametersOut["userDATA"] +
                                        string.Format("<p>{0}</p>", oper.USER_PLATE.USRP_PLATE);
                                    parametersOut["userDATA"] = parametersOut["userDATA"] +
                                        string.Format("<g>{0}</g>", oper.OPE_GRP_ID);
                                    parametersOut["userDATA"] = parametersOut["userDATA"] +
                                        string.Format("<ad>{0}</ad>", oper.OPE_TAR_ID);
                                    parametersOut["userDATA"] = parametersOut["userDATA"] +
                                        string.Format("<d>{0}</d>", oper.OPE_DATE.ToString("HHmmssddMMyy"));
                                    parametersOut["userDATA"] = parametersOut["userDATA"] +
                                        string.Format("<q>{0}</q>", oper.OPE_AMOUNT);
                                    parametersOut["userDATA"] = parametersOut["userDATA"] +
                                        string.Format("<t>{0}</t>", oper.OPE_TIME);
                                    parametersOut["userDATA"] = parametersOut["userDATA"] +
                                        string.Format("<sd>{0}</sd>", oper.OPE_INIDATE.ToString("HHmmssddMMyy"));
                                    parametersOut["userDATA"] = parametersOut["userDATA"] +
                                        string.Format("<ed>{0}</ed>", oper.OPE_ENDDATE.ToString("HHmmssddMMyy"));

                                    parametersOut["userDATA"] = parametersOut["userDATA"] +
                                        "</userpark>";

                                }

                            }

                        }

                    }
                    catch (Exception e)
                    {
                        Logger_AddLogException(e, "QueryLogin::Exception:", LogLevels.logERROR);

                    }

                    parametersOut["userDATA"] = parametersOut["userDATA"] +
                    "</userparks>";

                    parametersOut["userDATA"] = parametersOut["userDATA"] +
                                       "<useroffparks xmlns:json='http://james.newtonking.com/projects/json'>";
                    try
                    {
                        int iNumRows = 0;                       
                        var oPlatesOperationsOffstreet = customersRepository.GetUserPlateLastOperationOffstreet(ref oUser, out iNumRows);

                        if (iNumRows > 0)
                        {
                            foreach (OPERATIONS_OFFSTREET oper in oPlatesOperationsOffstreet)
                            {
                                if (oper.OPEOFF_TYPE == (int) OffstreetOperationType.Entry) {

                                    decimal? dGroupId = oper.OPEOFF_GRP_ID;
                                    DateTime? dtGroupDateTime = null;
                                    GROUPS_OFFSTREET_WS_CONFIGURATION oOffstreetWsConfiguration = null;
                                    if (geograficAndTariffsRepository.getOffStreetConfiguration(dGroupId, null, null, ref oOffstreetWsConfiguration, ref dtGroupDateTime))
                                    {

                                        parametersOut["userDATA"] = parametersOut["userDATA"] +
                                            "<useropenoffpark json:Array='true'>";
                                        parametersOut["userDATA"] = parametersOut["userDATA"] +
                                            string.Format("<parkid>{0}</parkid>", oOffstreetWsConfiguration.GOWC_GRP_ID);
                                        parametersOut["userDATA"] = parametersOut["userDATA"] +
                                            string.Format("<lp>{0}</lp>", oper.USER_PLATE.USRP_PLATE);
                                        parametersOut["userDATA"] = parametersOut["userDATA"] +
                                            string.Format("<d>{0}</d>", oper.OPEOFF_ENTRY_DATE.ToString("HHmmssddMMyy"));
                                        parametersOut["userDATA"] = parametersOut["userDATA"] +
                                            string.Format("<ope_id>{0}</ope_id>", oper.OPEOFF_LOGICAL_ID);
                                        //parametersOut["userDATA"] = parametersOut["userDATA"] +
                                        //    string.Format("<ope_id_type>{0}</ope_id_type>", (int) OffstreetOperationIdType.MeyparId);
                                        parametersOut["userDATA"] = parametersOut["userDATA"] +
                                            "</useropenoffpark>";
                                    }
                                }

                            }
                        }

                    }
                    catch (Exception e)
                    {
                        Logger_AddLogException(e, "QueryLogin::Exception:", LogLevels.logERROR);

                    }

                    parametersOut["userDATA"] = parametersOut["userDATA"] +
                    "</useroffparks>";

                    parametersOut["userDATA"] = parametersOut["userDATA"] +
                                       "<usertolls xmlns:json='http://james.newtonking.com/projects/json'>";
                    try
                    {
                        int iNumRows = 0;
                        var oPlatesTollMovements = customersRepository.GetUserPlateLastTollMovement(ref oUser, out iNumRows);

                        if (iNumRows > 0)
                        {

                            foreach (TOLL_MOVEMENT oper in oPlatesTollMovements)
                            {
                                parametersOut["userDATA"] = parametersOut["userDATA"] +
                                    "<usertoll json:Array='true'>";
                                parametersOut["userDATA"] = parametersOut["userDATA"] +
                                    string.Format("<p>{0}</p>", oper.USER_PLATE.USRP_PLATE);
                                parametersOut["userDATA"] = parametersOut["userDATA"] +
                                    string.Format("<ad>{0}</ad>", oper.TOLM_TOL_TARIFF);
                                parametersOut["userDATA"] = parametersOut["userDATA"] +
                                    string.Format("<d>{0}</d>", oper.TOLM_DATE.ToString("HHmmssddMMyy"));
                                parametersOut["userDATA"] = parametersOut["userDATA"] +
                                    string.Format("<q>{0}</q>", oper.TOLM_AMOUNT);

                                parametersOut["userDATA"] = parametersOut["userDATA"] +
                                    "</usertoll>";

                            }

                        }

                    }
                    catch (Exception e)
                    {
                        Logger_AddLogException(e, "QueryLogin::Exception:", LogLevels.logERROR);

                    }

                    parametersOut["userDATA"] = parametersOut["userDATA"] +
                    "</usertolls>";

                    List<USERS_PREFERRED_PLATE> oPreferredPlates = null;
                    if (!customersRepository.GetPreferredPlatesFromUser(ref oUser, null, out oPreferredPlates))
                    {
                        rt = ResultType.Result_Error_Generic;
                        Logger_AddLogMessage(string.Format("GetQueryLoginData::Error: {0}", rt.ToString()), LogLevels.logERROR);
                        return rt;
                    }
                    string sPrefPlates = "";
                    foreach (var oPrefPlate in oPreferredPlates)
                    {
                        sPrefPlates += string.Format("<prefplate json:Array='true'><city>{0}</city><lp>{1}</lp></prefplate>", oPrefPlate.USRL_INS_ID, oPrefPlate.USER_PLATE.USRP_PLATE);
                    }

                    List<USERS_FAVOURITES_AREA> oFavouriteAreas = null;
                    if (!customersRepository.GetFavouriteAreasFromUser(ref oUser, null, out oFavouriteAreas))
                    {
                        rt = ResultType.Result_Error_Generic;
                        Logger_AddLogMessage(string.Format("GetQueryLoginData::Error: {0}", rt.ToString()), LogLevels.logERROR);
                        return rt;
                    }
                    string sFavAreas = "";
                    foreach (var oFavArea in oFavouriteAreas)
                    {
                        sFavAreas += string.Format("<favarea json:Array='true'><city>{0}</city><sector>{1}</sector><rate>{2}</rate></favarea>", oFavArea.USRA_INS_ID, oFavArea.USRA_GRP_ID, oFavArea.USRA_TAR_ID);
                    }

                    parametersOut["userDATA"] = parametersOut["userDATA"] + "<userpreferences>";

                    parametersOut["userDATA"] = parametersOut["userDATA"] + "<prefplates xmlns:json='http://james.newtonking.com/projects/json'>" + sPrefPlates + "</prefplates>";
                    parametersOut["userDATA"] = parametersOut["userDATA"] + "<favareas xmlns:json='http://james.newtonking.com/projects/json'>" + sFavAreas + "</favareas>";

                    string strMostUsedPlate = "";
                    string strLastUsedPlate = "";
                    decimal? dMostUsedZone = null;
                    decimal? dLastUsedZone = null;
                    decimal? dMostUsedTariff = null;
                    decimal? dLastUsedTariff = null;

                    if (customersRepository.GetOperationsPlatesAndZonesStatistics(ref  oUser,
                                                                    out strMostUsedPlate,
                                                                    out strLastUsedPlate,
                                                                    out dMostUsedZone,
                                                                    out dLastUsedZone,
                                                                    out dMostUsedTariff,
                                                                    out dLastUsedTariff))
                    {

                        parametersOut["userDATA"] = parametersOut["userDATA"] +
                            string.Format("<lup>{0}</lup>", strLastUsedPlate);
                        parametersOut["userDATA"] = parametersOut["userDATA"] +
                            string.Format("<mup>{0}</mup>", strMostUsedPlate);
                        parametersOut["userDATA"] = parametersOut["userDATA"] +
                            string.Format("<luz>{0}</luz>", dLastUsedZone == null ? "" : dLastUsedZone.ToString());
                        parametersOut["userDATA"] = parametersOut["userDATA"] +
                            string.Format("<muz>{0}</muz>", dMostUsedZone == null ? "" : dMostUsedZone.ToString());
                        parametersOut["userDATA"] = parametersOut["userDATA"] +
                            string.Format("<tarifluz>{0}</tarifluz>", dLastUsedTariff == null ? "" : dLastUsedTariff.ToString());
                        parametersOut["userDATA"] = parametersOut["userDATA"] +
                            string.Format("<tarifmuz>{0}</tarifmuz>", dMostUsedTariff == null ? "" : dMostUsedTariff.ToString());

                    }

                    parametersOut["userDATA"] = parametersOut["userDATA"] + "</userpreferences>";

                }
                else
                {
                    rt = ResultType.Result_Error_Invalid_User;
                    Logger_AddLogMessage(string.Format("GetQueryLoginData::Error: {0}", rt.ToString()), LogLevels.logERROR);

                }
            }
            catch (Exception e)
            {
                rt = ResultType.Result_Error_Generic;
                Logger_AddLogException(e, string.Format("GetQueryLoginData::Error = {0}", rt.ToString()), LogLevels.logERROR);
                

            }

            return rt;

        }


        private bool GenerateCityOptXML(INSTALLATION oInstallation, USER oUser, ulong ulAppVersion, string strCulture, ref string  strXmlCityOpt)
        {
            bool bRes = true;
            strXmlCityOpt = "";
            try
            {

                CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG oCreditCardConfig = oUser.CURRENCy.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIGs
                       .Where(r => r.CPTGC_ENABLED != 0 && r.CPTGC_PAT_ID == Convert.ToInt32(PaymentMeanType.pmtDebitCreditCard))
                       .FirstOrDefault();

                CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG oPaypalConfig = oUser.CURRENCy.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIGs
                    .Where(r => r.CPTGC_ENABLED != 0 && r.CPTGC_PAT_ID == Convert.ToInt32(PaymentMeanType.pmtPaypal))
                    .FirstOrDefault();

                bool bMultiCoinBackwardsCompatibility = true;

                strXmlCityOpt+=string.Format("<parken>{0}</parken>",oInstallation.INS_OPT_PARK);
                strXmlCityOpt+=string.Format("<leaven>{0}</leaven>",oInstallation.INS_OPT_UNPARK);
                strXmlCityOpt+=string.Format("<ticken>{0}</ticken>",oInstallation.INS_OPT_TICKET);
                strXmlCityOpt+=string.Format("<rechen>{0}</rechen>",oInstallation.INS_OPT_RECHARGE);
                strXmlCityOpt+=string.Format("<moren>{0}</moren>",oInstallation.INS_OPT_MORE_FUNCTS);
                strXmlCityOpt += string.Format("<curopen>{0}</curopen>", oInstallation.INS_OPT_CUR_OPERS);
                strXmlCityOpt += string.Format("<hisopen>{0}</hisopen>", oInstallation.INS_OPT_HIS_OPERS);
                strXmlCityOpt += string.Format("<ocupen>{0}</ocupen>", oInstallation.INS_OPT_OCUP);
                strXmlCityOpt += string.Format("<offstparkentryen>{0}</offstparkentryen>", oInstallation.INS_OPT_OFFSTREET_PARK_ENTRY);
                strXmlCityOpt += string.Format("<offstparkexiten>{0}</offstparkexiten>", oInstallation.INS_OPT_OFFSTREET_PARK_EXIT);
                strXmlCityOpt += string.Format("<offstparkoccup>{0}</offstparkoccup>", oInstallation.INS_OPT_OFFSTREET_PARK_OCUP);
                strXmlCityOpt += string.Format("<tollen>{0}</tollen>", oInstallation.INS_OPT_TOLL);
                TollPaymentMode oPayMode = (TollPaymentMode)oInstallation.INS_TOLL_PAY_MODE; // Toll payment mode: 0 – only online allowed, 1 – offline allowed, 2 – offline conditioned to current balance > payment to be done, 3 – offline conditioned to average balance > payment to be done
                /*if (oPayMode != TollPaymentMode.Online )
                {
                    USER_AVERAGE_BALANCE oUserAvgBal = null;
                    if (customersRepository.GetUserAverageBalanceById(ref oUserAvgBal, oUser.USR_ID))                     
                    {
                        if (oUserAvgBal.USRB_AVERAGE_BALANCE < oInstallation.INS_TRUST_AVERAGE_BALANCE)
                            oPayMode = TollPaymentMode.Online;
                    }
                }*/
                strXmlCityOpt += string.Format("<tollpaymode>{0}</tollpaymode>", (int)oPayMode);
                strXmlCityOpt += string.Format("<tollpendingmsg>{0}</tollpendingmsg>", infraestructureRepository.GetLiteral(oInstallation.INS_TOLL_PENDING_MSG_LIT_ID ?? 0, strCulture));                
                strXmlCityOpt+=string.Format("<parkpbpen>{0}</parkpbpen>",oInstallation.INS_OPT_PARKBYPLATE);
                strXmlCityOpt+=string.Format("<parkpblist>{0}</parkpblist>",oInstallation.INS_OPT_PARKBYPLATELISTTYPE);
                strXmlCityOpt+=string.Format("<parkbyspaceen>{0}</parkbyspaceen>",oInstallation.INS_OPT_PARKBYSPACE);
                strXmlCityOpt+=string.Format("<parkbyzasen>{0}</parkbyzasen>",oInstallation.INS_OPT_PARKBYZONEANDSECTOR);
                strXmlCityOpt+=string.Format("<parkbyqren>{0}</parkbyqren>",oInstallation.INS_OPT_PARKBYQR);

                ParkByMapMode eParkmode = ParkByMapMode.Zone;

                try
                {
                    eParkmode=(ParkByMapMode)oInstallation.INS_OPT_PARKBYMAP;
                }
                catch
                {

                }

                strXmlCityOpt += string.Format("<parkbymapen>{0}</parkbymapen>", (int)eParkmode); 
                strXmlCityOpt+=string.Format("<parkbyspformen>{0}</parkbyspformen >",oInstallation.INS_OPT_PARKBYSPACEFORMAT);
                strXmlCityOpt+=string.Format("<parkbyspform>{0}</parkbyspform>",oInstallation.INS_OPT_PARKBYSPACEFORMAT_FORMAT);
                strXmlCityOpt+=string.Format("<parkbyzaszoneman>{0}</parkbyzaszoneman>",oInstallation.INS_OPT_PARKISZONEMANDATORY);
                strXmlCityOpt+=string.Format("<parkbyzassectorman>{0}</parkbyzassectorman>",oInstallation.INS_OPT_PARKISSECTORMANDATORY);
                strXmlCityOpt+=string.Format("<parkbyzascrit>{0}</parkbyzascrit>",oInstallation.INS_OPT_PARKZONECRIT);
                strXmlCityOpt+=string.Format("<parkbyqrforman>{0}</parkbyqrforman>",oInstallation.INS_OPT_PARKPAYBYQRFORMATMANDATORY);
                strXmlCityOpt+=string.Format("<parkbyqrform>{0}</parkbyqrform>",oInstallation.INS_OPT_PARKPAYBYQRFORMAT);
                strXmlCityOpt+=string.Format("<parkmultarifnum>{0}</parkmultarifnum>",oInstallation.INS_OPT_PARKMULTITARIFF_NUM);
                strXmlCityOpt += string.Format("<parkbycurrentlocen>{0}</parkbycurrentlocen>", oInstallation.INS_OPT_PARKBYCURRENTLOCEN);
                strXmlCityOpt += string.Format("<parkbycurrentlocaccuracy>{0}</parkbycurrentlocaccuracy>", oInstallation.INS_OPT_PARKBYCURRENTLOCACCURACY);
                strXmlCityOpt += string.Format("<parkbycurrentlocant>{0}</parkbycurrentlocant>", oInstallation.INS_OPT_PARKBYCURRENTLOCANT);
                strXmlCityOpt += string.Format("<parkbyfavlocen>{0}</parkbyfavlocen>", oInstallation.INS_OPT_PARKBYFAVLOCEN);
                
                strXmlCityOpt+=string.Format("<ticknumen>{0}</ticknumen>",oInstallation.INS_OPT_TICKET_NUM);
                strXmlCityOpt+=string.Format("<tickqren>{0}</tickqren>",oInstallation.INS_OPT_TICKET_QR);
                strXmlCityOpt+=string.Format("<rechqren>{0}</rechqren>",oInstallation.INS_OPT_RECHARGE_QR);
                strXmlCityOpt+=string.Format("<rechcoen>{0}</rechcoen>",oInstallation.INS_OPT_RECHARGE_CODE);

                strXmlCityOpt += string.Format("<rechsponen>{0}</rechsponen>", oInstallation.INS_OPT_RECHSPONEN);
                strXmlCityOpt += string.Format("<rechpaypal>{0}</rechpaypal>", ((oInstallation.INS_OPT_RECHARGE_PAYPAL ?? 0) == 1 && bMultiCoinBackwardsCompatibility && oPaypalConfig != null) ? 1 : 0);
                strXmlCityOpt += string.Format("<rechoxxo>{0}</rechoxxo>", (oInstallation.INS_OPT_RECHARGE_OXXO ?? 0));


                strXmlCityOpt += string.Format("<isGPSForParkingMandatory>{0}</isGPSForParkingMandatory>", oInstallation.INS_OPT_ISGPSFORPARKINGMANDATORY);
                strXmlCityOpt += string.Format("<GPSParktimeout>{0}</GPSParktimeout>", oInstallation.INS_OPT_GPSPARKTIMEOUT);
                if (!string.IsNullOrEmpty(oInstallation.INS_OPT_CONFIGMENU))
                    strXmlCityOpt += string.Format("<ConfigMenu>{0}</ConfigMenu>", oInstallation.INS_OPT_CONFIGMENU);
                                               

                strXmlCityOpt += string.Format("<rechdefen>{0}</rechdefen>", ((oInstallation.INS_OPT_RECHARGE_PAYMENT_MEAN) == 1 && bMultiCoinBackwardsCompatibility && oCreditCardConfig != null) ? 1 : 0);
                strXmlCityOpt += string.Format("<rechtransf>{0}</rechtransf>",oInstallation.INS_OPT_TRANSFER_BALANCE??0);
                strXmlCityOpt += string.Format("<rechmodif>{0}</rechmodif>", ((oInstallation.INS_OPT_MODIFY_P ?? 0) == 1 && bMultiCoinBackwardsCompatibility && oCreditCardConfig != null) ? 1 : 0);
                strXmlCityOpt += string.Format("<rechpagen>{0}</rechpagen>", oInstallation.INS_OPT_RECHARGE_PAGATELIA ?? 0);
                strXmlCityOpt += string.Format("<rechspoten>{0}</rechspoten>", oInstallation.INS_OPT_RECHARGE_SPOTYCOINS ?? 0);
                
                strXmlCityOpt += string.Format("<parkzoneqrformat>{0}</parkzoneqrformat>", oInstallation.INS_OPT_QRPARKZONEFORMAT);
                strXmlCityOpt += string.Format("<tickqrformat>{0}</tickqrformat>", oInstallation.INS_OPT_QRTICKETFORMAT);
                strXmlCityOpt += string.Format("<rechqrformat>{0}</rechqrformat >", oInstallation.INS_OPT_QRRECHARGEFORMAT);


                string strAllowNoPaymentMethod = infraestructureRepository.GetParameterValue("AllowNoPaymentMethod");
                strXmlCityOpt += string.Format("<allownopaymethod>{0}</allownopaymethod >", strAllowNoPaymentMethod=="1"?1:0);


                string sSuscriptionType = "";
                RefundBalanceType eRefundBalType = RefundBalanceType.rbtAmount;
                customersRepository.GetUserPossibleSuscriptionTypes(ref oUser, infraestructureRepository, out sSuscriptionType, out eRefundBalType);

                strXmlCityOpt += "<allowchangesubscriptiontype>" + (string.IsNullOrEmpty(sSuscriptionType) ? 1 : 0).ToString() + "</allowchangesubscriptiontype>";
                if (oCreditCardConfig != null)
                {
                    strXmlCityOpt += string.Format("<per_transaction_minimum_charge_amount>{0}</per_transaction_minimum_charge_amount >", oCreditCardConfig.CPTGC_MIN_CHARGE ?? 0);
                    strXmlCityOpt += string.Format("<per_transaction_minimum_charge_currency>{0}</per_transaction_minimum_charge_currency >", oUser.COUNTRy.CURRENCy.CUR_ISO_CODE);
                }

                string sXMKSubscriptionTypes = "";

                foreach (PaymentSuscryptionType oSuscriptionType in System.Enum.GetValues(typeof(PaymentSuscryptionType)))
                {
                    sXMKSubscriptionTypes += string.Format("<st json:Array='true' id= \"{0}\">", (int)oSuscriptionType);
                    if (sSuscriptionType != "")
                        sXMKSubscriptionTypes += (sSuscriptionType == (((int)oSuscriptionType).ToString()) ? "1" : "0");
                    else
                        sXMKSubscriptionTypes += "1";
                    sXMKSubscriptionTypes += "</st>";                    
                }

                strXmlCityOpt += "<subscription_type xmlns:json='http://james.newtonking.com/projects/json'>" + sXMKSubscriptionTypes + "</subscription_type >";

                int iFeeLayout = 0;
                OPERATOR oOperator = customersRepository.GetDefaultOperator();
                if (oOperator != null) iFeeLayout = oOperator.OPR_FEE_LAYOUT;
                strXmlCityOpt += string.Format("<layout>{0}</layout>", iFeeLayout);

                decimal dCurID = oUser.USR_CUR_ID;

                /*strXmlCityOpt += "<rechdefvalues>";

                foreach (CURRENCY_RECHARGE_VALUE oRechargeValue in infraestructureRepository
                                   .Currencies
                                   .Where(r => r.CUR_ID == dCurID)
                                   .First().CURRENCY_RECHARGE_VALUEs
                                   .Where(s => s.CURV_VALUE_TYPE == (int)RechargeValuesTypes.rvt_ManualRecharge))               
                {
                    strXmlCityOpt += string.Format("<value>{0}</value>", oRechargeValue.CURV_VALUE);
                }

                strXmlCityOpt += "</rechdefvalues>";*/

                //<userlp xmlns:json='http://james.newtonking.com/projects/json'>";
                //"<lp json:Array='true'>" + oPlate.USRP_PLATE + "</lp>";


                decimal dPercVAT1;
                decimal dPercVAT2;
                decimal dPercFEE;
                int iPercFEETopped;
                int iFixedFEE;
                int? iPaymentTypeId = null;
                int? iPaymentSubtypeId = null;

                int iQFEE = 0;
                int iQVAT = 0;
                int iQTotal = 0;
                int iPartialVAT1;
                int iPartialPercFEE;
                int iPartialFixedFEE;
                int iPartialPercFEEVAT;
                int iPartialFixedFEEVAT;
                int iQSubTotal = 0;
                int iPayPerTransactionAmount=0;

                    
                List<string> oPerTransactionParameters = new List<string>();

                oPerTransactionParameters = ConfigurationManager.AppSettings["SuscriptionType2_AddPayMethChargeValue"].ToString().Split(';').ToList();

                for (int i = 0; i < oPerTransactionParameters.Count; i++)
                {
                    if (oPerTransactionParameters[i] == oUser.CURRENCy.CUR_ISO_CODE)
                    {
                        iPayPerTransactionAmount = Convert.ToInt32(oPerTransactionParameters[i + 1]);                            
                        break;
                    }

                }

                

                strXmlCityOpt += "<rechdefvaluePT>" + iPayPerTransactionAmount.ToString() +"</rechdefvaluePT>";

                string sXmlRechdefvaluesBase = "";
                string sXmlRechdefvaluesFee = "";
                string sXmlRechdefvaluesVat = "";
                string sXmlRechdefvaluesSubtotal = "";
                string sXmlRechdefvalues = "";


                if (oUser.CUSTOMER_PAYMENT_MEAN != null)
                {
                    iPaymentTypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAT_ID;
                    iPaymentSubtypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAST_ID;
                }

                if (!customersRepository.GetFinantialParams(oUser.CURRENCy.CUR_ISO_CODE, "", iPaymentTypeId, iPaymentSubtypeId, ChargeOperationsType.BalanceRecharge,
                                                            out dPercVAT1, out dPercVAT2, out dPercFEE, out iPercFEETopped, out iFixedFEE))
                {
                    bRes = false;
                    Logger_AddLogMessage(string.Format("GenerateCityOptXML::Error getting balance recharge finantial parameters."), LogLevels.logERROR);
                }



                foreach (CURRENCY_RECHARGE_VALUE oRechargeValue in infraestructureRepository
                                    .Currencies
                                    .Where(r => r.CUR_ID == dCurID)
                                    .First().CURRENCY_RECHARGE_VALUEs
                                    .Where(s => s.CURV_VALUE_TYPE == (int)RechargeValuesTypes.rvt_ManualRecharge)
                                    .OrderBy(s => s.CURV_VALUE))
                {
                    iQTotal = customersRepository.CalculateFEE(oRechargeValue.CURV_VALUE, dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE, out iPartialPercFEEVAT, out iPartialFixedFEEVAT);

                    iQFEE = Convert.ToInt32(Math.Round(oRechargeValue.CURV_VALUE * dPercFEE, MidpointRounding.AwayFromZero));
                    if (iPercFEETopped > 0 && iQFEE > iPercFEETopped) iQFEE = iPercFEETopped;
                    iQFEE += iFixedFEE;
                    iQVAT = iPartialVAT1 + iPartialPercFEEVAT + iPartialFixedFEEVAT;
                    iQSubTotal = oRechargeValue.CURV_VALUE + iQFEE;



                    sXmlRechdefvaluesBase += string.Format("<value json:Array='true'>{0}</value>", oRechargeValue.CURV_VALUE);
                    sXmlRechdefvaluesFee += string.Format("<value json:Array='true'>{0}</value>", iQFEE);
                    sXmlRechdefvaluesVat += string.Format("<value json:Array='true'>{0}</value>", iQVAT);
                    sXmlRechdefvaluesSubtotal += string.Format("<value json:Array='true'>{0}</value>", iQSubTotal);
                    sXmlRechdefvalues += string.Format("<value json:Array='true'>{0}</value>", iQTotal);
                }

                strXmlCityOpt += "<rechdefvalues_base  xmlns:json='http://james.newtonking.com/projects/json'>" + sXmlRechdefvaluesBase + "</rechdefvalues_base>";
                strXmlCityOpt += "<rechdefvalues_fee  xmlns:json='http://james.newtonking.com/projects/json'>" + sXmlRechdefvaluesFee + "</rechdefvalues_fee>";
                strXmlCityOpt += "<rechdefvalues_vat  xmlns:json='http://james.newtonking.com/projects/json'>" + sXmlRechdefvaluesVat + "</rechdefvalues_vat>";
                strXmlCityOpt += "<rechdefvalues_subtotal  xmlns:json='http://james.newtonking.com/projects/json'>" + sXmlRechdefvaluesSubtotal + "</rechdefvalues_subtotal>";
                strXmlCityOpt += "<rechdefvalues  xmlns:json='http://james.newtonking.com/projects/json'>" + sXmlRechdefvalues + "</rechdefvalues>";

                string sXmlRechChangePayBase = "";
                string sXmlRechChangePayFee = "";
                string sXmlRechChangePayVat = "";
                string sXmlRechChangePaySubtotal = "";
                string sXmlRechChangePay = "";

                foreach (CURRENCY_RECHARGE_VALUE oRechargeValue in infraestructureRepository
                                    .Currencies
                                    .Where(r => r.CUR_ID == dCurID)
                                    .First().CURRENCY_RECHARGE_VALUEs
                                    .Where(s => s.CURV_VALUE_TYPE == (int)RechargeValuesTypes.rvt_RechargeChangePay)
                                    .OrderBy(s => s.CURV_VALUE))
                {

                    iQTotal = customersRepository.CalculateFEE(oRechargeValue.CURV_VALUE, dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE, out iPartialPercFEEVAT, out iPartialFixedFEEVAT);

                    iQFEE = Convert.ToInt32(Math.Round(oRechargeValue.CURV_VALUE * dPercFEE, MidpointRounding.AwayFromZero));
                    if (iPercFEETopped > 0 && iQFEE > iPercFEETopped) iQFEE = iPercFEETopped;
                    iQFEE += iFixedFEE;
                    iQVAT = iPartialVAT1 + iPartialPercFEEVAT + iPartialFixedFEEVAT;
                    iQSubTotal = oRechargeValue.CURV_VALUE + iQFEE;


                    sXmlRechChangePayBase += string.Format("<value json:Array='true'>{0}</value>", oRechargeValue.CURV_VALUE);
                    sXmlRechChangePayFee += string.Format("<value json:Array='true'>{0}</value>", iQFEE);
                    sXmlRechChangePayVat += string.Format("<value json:Array='true'>{0}</value>", iQVAT);
                    sXmlRechChangePaySubtotal += string.Format("<value json:Array='true'>{0}</value>", iQSubTotal);
                    sXmlRechChangePay += string.Format("<value json:Array='true'>{0}</value>", iQTotal);
                }

                strXmlCityOpt += "<rechchangepay_base  xmlns:json='http://james.newtonking.com/projects/json'>" + sXmlRechChangePayBase + "</rechchangepay_base>";
                strXmlCityOpt += "<rechchangepay_fee  xmlns:json='http://james.newtonking.com/projects/json'>" + sXmlRechChangePayFee + "</rechchangepay_fee>";
                strXmlCityOpt += "<rechchangepay_vat  xmlns:json='http://james.newtonking.com/projects/json'>" + sXmlRechChangePayVat + "</rechchangepay_vat>";
                strXmlCityOpt += "<rechchangepay_subtotal  xmlns:json='http://james.newtonking.com/projects/json'>" + sXmlRechChangePaySubtotal + "</rechchangepay_subtotal>";
                strXmlCityOpt += "<rechchangepay  xmlns:json='http://james.newtonking.com/projects/json'>" + sXmlRechChangePay + "</rechchangepay>";

                



                if (!customersRepository.GetFinantialParams(oUser.CURRENCy.CUR_ISO_CODE, "",(int)PaymentMeanType.pmtPaypal, null, ChargeOperationsType.BalanceRecharge,
                                                           out dPercVAT1, out dPercVAT2, out dPercFEE, out iPercFEETopped, out iFixedFEE))
                {
                    bRes = false;
                    Logger_AddLogMessage(string.Format("GenerateCityOptXML::Error getting balance recharge finantial parameters."), LogLevels.logERROR);
                }


                string sXmlRechPayPalBase = "";
                string sXmlRechPayPalFee = "";
                string sXmlRechPayPalVat = "";
                string sXmlRechPayPalSubtotal = "";
                string sXmlRechPayPal = "";

                foreach (CURRENCY_RECHARGE_VALUE oRechargeValue in infraestructureRepository
                                    .Currencies
                                    .Where(r => r.CUR_ID == dCurID)
                                    .First().CURRENCY_RECHARGE_VALUEs
                                    .Where(s => s.CURV_VALUE_TYPE == (int)RechargeValuesTypes.rvt_RechargePaypal)
                                    .OrderBy(s => s.CURV_VALUE))
                {

                    iQTotal = customersRepository.CalculateFEE(oRechargeValue.CURV_VALUE, dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE, out iPartialPercFEEVAT, out iPartialFixedFEEVAT);

                    iQFEE = Convert.ToInt32(Math.Round(oRechargeValue.CURV_VALUE * dPercFEE, MidpointRounding.AwayFromZero));
                    if (iPercFEETopped > 0 && iQFEE > iPercFEETopped) iQFEE = iPercFEETopped;
                    iQFEE += iFixedFEE;
                    iQVAT = iPartialVAT1 + iPartialPercFEEVAT + iPartialFixedFEEVAT;
                    iQSubTotal = oRechargeValue.CURV_VALUE + iQFEE;


                    sXmlRechPayPalBase += string.Format("<value json:Array='true'>{0}</value>", oRechargeValue.CURV_VALUE);
                    sXmlRechPayPalFee += string.Format("<value json:Array='true'>{0}</value>", iQFEE);
                    sXmlRechPayPalVat += string.Format("<value json:Array='true'>{0}</value>", iQVAT);
                    sXmlRechPayPal += string.Format("<value json:Array='true'>{0}</value>", iQTotal);
                    sXmlRechPayPalSubtotal += string.Format("<value json:Array='true'>{0}</value>", iQSubTotal);

                }

                strXmlCityOpt += "<rechPayPal_base  xmlns:json='http://james.newtonking.com/projects/json'>" + sXmlRechPayPalBase + "</rechPayPal_base>";
                strXmlCityOpt += "<rechPayPal_fee  xmlns:json='http://james.newtonking.com/projects/json'>" + sXmlRechPayPalFee + "</rechPayPal_fee>";
                strXmlCityOpt += "<rechPayPal_vat  xmlns:json='http://james.newtonking.com/projects/json'>" + sXmlRechPayPalVat + "</rechPayPal_vat>";
                strXmlCityOpt += "<rechPayPal_subtotal  xmlns:json='http://james.newtonking.com/projects/json'>" + sXmlRechPayPalSubtotal + "</rechPayPal_subtotal>";
                strXmlCityOpt += "<rechPayPal  xmlns:json='http://james.newtonking.com/projects/json'>" + sXmlRechPayPal + "</rechPayPal>";

                if (!customersRepository.GetFinantialParams(oUser.CURRENCy.CUR_ISO_CODE, "", (int)PaymentMeanType.pmtOxxo, null, ChargeOperationsType.BalanceRecharge,
                                                           out dPercVAT1, out dPercVAT2, out dPercFEE, out iPercFEETopped, out iFixedFEE))
                {
                    bRes = false;
                    Logger_AddLogMessage(string.Format("GenerateCityOptXML::Error getting balance recharge finantial parameters for Oxxo."), LogLevels.logERROR);
                }


                string sXmlRechOxxoBase = "";
                string sXmlRechOxxoFee = "";
                string sXmlRechOxxoVat = "";
                string sXmlRechOxxoSubtotal = "";
                string sXmlRechOxxoBarCode = "";
                string sXmlRechOxxo = "";

                foreach (CURRENCY_RECHARGE_VALUE oRechargeValue in infraestructureRepository
                                    .Currencies
                                    .Where(r => r.CUR_ISO_CODE == "MXN")
                                    .First().CURRENCY_RECHARGE_VALUEs
                                    .Where(s => s.CURV_VALUE_TYPE == (int)RechargeValuesTypes.rvt_OxxoRecharge)
                                    .OrderBy(s => s.CURV_VALUE))
                {

                    //iQTotal = customersRepository.CalculateFEE(oRechargeValue.CURV_VALUE, dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE, out iPartialPercFEEVAT, out iPartialFixedFEEVAT);
                    int iQBase = customersRepository.CalculateFEEReverse(oRechargeValue.CURV_VALUE, dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE, out iPartialPercFEEVAT, out iPartialFixedFEEVAT);

                    iQFEE = Convert.ToInt32(Math.Round(iQBase /*oRechargeValue.CURV_VALUE*/ * dPercFEE, MidpointRounding.AwayFromZero));
                    if (iPercFEETopped > 0 && iQFEE > iPercFEETopped) iQFEE = iPercFEETopped;
                    iQFEE += iFixedFEE;
                    iQVAT = iPartialVAT1 + iPartialPercFEEVAT + iPartialFixedFEEVAT;
                    iQSubTotal = iQBase /*oRechargeValue.CURV_VALUE*/ + iQFEE;


                    sXmlRechOxxoBase += string.Format("<value json:Array='true'>{0}</value>", iQBase /*oRechargeValue.CURV_VALUE*/);
                    sXmlRechOxxoFee += string.Format("<value json:Array='true'>{0}</value>", iQFEE);
                    sXmlRechOxxoVat += string.Format("<value json:Array='true'>{0}</value>", iQVAT);
                    sXmlRechOxxo += string.Format("<value json:Array='true'>{0}</value>", oRechargeValue.CURV_VALUE /*iQTotal*/);
                    sXmlRechOxxoBarCode += string.Format("<value json:Array='true'>{0}</value>", GenerateOxxoCodeBar(oUser.USR_ID, oRechargeValue.CURV_VALUE /*iQTotal*/));
                    sXmlRechOxxoSubtotal += string.Format("<value json:Array='true'>{0}</value>", iQSubTotal);

                }

                strXmlCityOpt += "<rechOxxo_base  xmlns:json='http://james.newtonking.com/projects/json'>" + sXmlRechOxxoBase + "</rechOxxo_base>";
                strXmlCityOpt += "<rechOxxo_fee  xmlns:json='http://james.newtonking.com/projects/json'>" + sXmlRechOxxoFee + "</rechOxxo_fee>";
                strXmlCityOpt += "<rechOxxo_vat  xmlns:json='http://james.newtonking.com/projects/json'>" + sXmlRechOxxoVat + "</rechOxxo_vat>";
                strXmlCityOpt += "<rechOxxo_subtotal  xmlns:json='http://james.newtonking.com/projects/json'>" + sXmlRechOxxoSubtotal + "</rechOxxo_subtotal>";
                strXmlCityOpt += "<rechOxxo  xmlns:json='http://james.newtonking.com/projects/json'>" + sXmlRechOxxo + "</rechOxxo>";
                strXmlCityOpt += "<rechOxxo_barcode  xmlns:json='http://james.newtonking.com/projects/json'>" + sXmlRechOxxoBarCode + "</rechOxxo_barcode>";

                
                string sXmlBalanceTransfer = "";

                foreach (CURRENCY_RECHARGE_VALUE oRechargeValue in infraestructureRepository
                                    .Currencies
                                    .Where(r => r.CUR_ID == dCurID)
                                    .First().CURRENCY_RECHARGE_VALUEs
                                    .Where(s => s.CURV_VALUE_TYPE == (int)RechargeValuesTypes.rvt_BalanceTransfer)
                                    .OrderBy(s => s.CURV_VALUE))
                {

                    sXmlBalanceTransfer += string.Format("<value json:Array='true'>{0}</value>", oRechargeValue.CURV_VALUE);

                }

                strXmlCityOpt += "<transferbalancevalues xmlns:json='http://james.newtonking.com/projects/json'>" + sXmlBalanceTransfer + "</transferbalancevalues>";
               

                strXmlCityOpt += "<rechusersettings>";

                if (!customersRepository.GetFinantialParams(oUser.CURRENCy.CUR_ISO_CODE, "", iPaymentTypeId, iPaymentSubtypeId, ChargeOperationsType.BalanceRecharge,
                                                            out dPercVAT1, out dPercVAT2, out dPercFEE, out iPercFEETopped, out iFixedFEE))
                {
                    bRes = false;
                    Logger_AddLogMessage(string.Format("GenerateCityOptXML::Error getting balance recharge finantial parameters."), LogLevels.logERROR);
                }

                var oLastRecharge = oUser.CUSTOMER_PAYMENT_MEANS_RECHARGEs.OrderByDescending(t => t.CUSPMR_UTC_DATE).FirstOrDefault();
                if (oLastRecharge != default(CUSTOMER_PAYMENT_MEANS_RECHARGE))
                {
                    iQFEE = 0;
                    iQVAT = 0;
                    iQTotal = 0;
                    iPartialVAT1 = 0;
                    iPartialPercFEE = 0;
                    iPartialFixedFEE = 0;
                    iPartialPercFEEVAT = 0;
                    iPartialFixedFEEVAT = 0;

                    iQTotal = customersRepository.CalculateFEE(oLastRecharge.CUSPMR_AMOUNT, oLastRecharge.CUSPMR_PERC_VAT1 ?? 0, oLastRecharge.CUSPMR_PERC_VAT2 ?? 0, oLastRecharge.CUSPMR_PERC_FEE ?? 0, Convert.ToInt32(oLastRecharge.CUSPMR_PERC_FEE_TOPPED ?? 0), Convert.ToInt32(oLastRecharge.CUSPMR_FIXED_FEE ?? 0), out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE, out iPartialPercFEEVAT, out iPartialFixedFEEVAT);

                    if (iQTotal != Convert.ToInt32(oLastRecharge.CUSPMR_TOTAL_AMOUNT_CHARGED))
                    {
                        Logger_AddLogMessage(string.Format("GenerateCityOptXML::Total amount charged {0} is distint from total calculated {1} for recharge id {2}.", oLastRecharge.CUSPMR_TOTAL_AMOUNT_CHARGED, iQTotal, oLastRecharge.CUSPMR_ID), LogLevels.logWARN);
                    }

                    iQFEE = Convert.ToInt32(Math.Round(oLastRecharge.CUSPMR_AMOUNT * (oLastRecharge.CUSPMR_PERC_FEE ?? 0), MidpointRounding.AwayFromZero));
                    if ((oLastRecharge.CUSPMR_PERC_FEE_TOPPED ?? 0) > 0 && iQFEE > (oLastRecharge.CUSPMR_PERC_FEE_TOPPED ?? 0)) iQFEE = Convert.ToInt32(oLastRecharge.CUSPMR_PERC_FEE_TOPPED ?? 0);
                    iQFEE += Convert.ToInt32(oLastRecharge.CUSPMR_FIXED_FEE ?? 0);
                    iQVAT = iPartialVAT1 + iPartialPercFEEVAT + iPartialFixedFEEVAT;
                    iQSubTotal = oLastRecharge.CUSPMR_AMOUNT + iQFEE;                 


                    if (dCurID != oLastRecharge.CUSPMR_CUR_ID)
                    {

                    }

                    strXmlCityOpt += string.Format("<rechdefvalue_base>{0}</rechdefvalue_base>", oLastRecharge.CUSPMR_AMOUNT);
                    strXmlCityOpt += string.Format("<rechdefvalue_fee>{0}</rechdefvalue_fee>", iQFEE);
                    strXmlCityOpt += string.Format("<rechdefvalue_vat>{0}</rechdefvalue_vat>", iQVAT);
                    strXmlCityOpt += string.Format("<rechdefvalue_subtotal>{0}</rechdefvalue_subtotal>", iQSubTotal);
                    strXmlCityOpt += string.Format("<rechdefvalue>{0}</rechdefvalue>", iQTotal);
                }
                else
                {
                    strXmlCityOpt += "<rechdefvalue_base>0</rechdefvalue_base>";
                    strXmlCityOpt += "<rechdefvalue_fee>0</rechdefvalue_fee>";
                    strXmlCityOpt += "<rechdefvalue_vat>0</rechdefvalue_vat>";
                    strXmlCityOpt += "<rechdefvalue_subtotal>0</rechdefvalue_subtotal>";
                    strXmlCityOpt += "<rechdefvalue>0</rechdefvalue>";
                }

                strXmlCityOpt += string.Format("<val_autamo>{0}</val_autamo>", (oUser.CUSTOMER_PAYMENT_MEAN != null && oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AUTOMATIC_RECHARGE == 1 ? oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AMOUNT_TO_RECHARGE ?? 0 : 0));
                strXmlCityOpt += string.Format("<val_autbelow>{0}</val_autbelow>", (oUser.CUSTOMER_PAYMENT_MEAN != null && oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AUTOMATIC_RECHARGE == 1 ? oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_RECHARGE_WHEN_AMOUNT_IS_LESS ?? 0 : 0));

                strXmlCityOpt += "</rechusersettings>";
                strXmlCityOpt += oInstallation.INS_PARKING_WARNING_XML_VALUES;
            }
            catch (Exception e)
            {
                bRes = false;
                Logger_AddLogException(e, string.Format("GenerateCityOptXML::Error"), LogLevels.logERROR);

            }

            return bRes;
        }



        private ResultType PerformPrepayRecharge(ref USER oUser, int iOSType, bool bAutomatic, int iQuantity, bool bAutoconf, decimal? dLatitude, decimal? dLongitude, string strAppVersion, PaymentMeanRechargeCreationType rechargeCreationType, out decimal? dRechargeId)
        {
            ResultType rtRes = ResultType.Result_Error_Generic;
            dRechargeId = null;

            try
            {

                if ((oUser.CUSTOMER_PAYMENT_MEAN != null) &&
                    (oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_ENABLED == 1) &&
                    (oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_VALID == 1))
                {

                    decimal dPercVAT1=0;
                    decimal dPercVAT2=0;
                    decimal dPercFEE=0;
                    int iPercFEETopped=0;
                    int iFixedFEE=0;
                    int? iPaymentTypeId = null;
                    int? iPaymentSubtypeId = null;
                    if (oUser.CUSTOMER_PAYMENT_MEAN != null)
                    {
                        iPaymentTypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAT_ID;
                        iPaymentSubtypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAST_ID;
                    }

                    int iQuantityToRecharge = iQuantity;

                    if ((PaymentMeanType)oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAT_ID == PaymentMeanType.pmtDebitCreditCard)
                    {
                        if (oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_MIN_CHARGE.HasValue)
                        {
                            if (iQuantity < oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_MIN_CHARGE.Value)
                            {
                                iQuantityToRecharge = oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_MIN_CHARGE.Value;
                            }
                        }
                    }


                    int iPartialVAT1 = 0;
                    int iPartialPercFEE = 0;
                    int iPartialFixedFEE = 0;

                    int iTotalQuantity = 0;

                    NumberFormatInfo numberFormatProvider = new NumberFormatInfo();
                    numberFormatProvider.NumberDecimalSeparator = ".";
                    decimal dQuantity = 0;
                    decimal dQuantityToCharge = 0;


                    if (oUser.USR_SUSCRIPTION_TYPE == (int)PaymentSuscryptionType.pstPrepay)
                    {

                        if (!customersRepository.GetFinantialParams(oUser, "", iPaymentTypeId, iPaymentSubtypeId, ChargeOperationsType.BalanceRecharge,
                                                                    out dPercVAT1, out dPercVAT2, out dPercFEE, out iPercFEETopped, out iFixedFEE))
                        {
                            rtRes = ResultType.Result_Error_Generic;
                            Logger_AddLogMessage(string.Format("PerformPrepayRecharge::Error: Error getting finantial parameters. Result = {0}", rtRes.ToString()), LogLevels.logERROR);
                        }


                        iTotalQuantity = customersRepository.CalculateFEE(iQuantityToRecharge, dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE);

                        dQuantity = Convert.ToDecimal(iQuantityToRecharge, numberFormatProvider) / 100;
                        dQuantityToCharge = Convert.ToDecimal(iTotalQuantity, numberFormatProvider) / 100;
                    }
                    else
                    {
                        iPartialVAT1 = 0;
                        iPartialPercFEE = 0;
                        iPartialFixedFEE = 0;

                        iTotalQuantity = iQuantityToRecharge; // customersRepository.CalculateFEE(iQuantity, dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE);*/                    

                        dQuantity = Convert.ToDecimal(iQuantityToRecharge, numberFormatProvider) / 100;
                        dQuantityToCharge = Convert.ToDecimal(iTotalQuantity, numberFormatProvider) / 100;

                    }
                     

                                 

                    if ((PaymentMeanType)oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAT_ID == PaymentMeanType.pmtDebitCreditCard)
                    {                                            
                        string strUserReference = null;
                        string strAuthCode = null;
                        string strAuthResult = null;
                        string strAuthResultDesc = "";
                        string strGatewayDate = null;
                        string strTransactionId = null;
                        string strCardScheme = null;
                        string strCFTransactionID = null;

                        bool bPayIsCorrect=false;
                        PaymentMeanRechargeStatus rechargeStatus = (bAutoconf ? PaymentMeanRechargeStatus.Committed : PaymentMeanRechargeStatus.Authorized);                        

                        if ((PaymentMeanCreditCardProviderType)oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_CREDIT_CARD_PAYMENT_PROVIDER == 
                            PaymentMeanCreditCardProviderType.pmccpCreditCall)
                        {
                            CardEasePayments cardPayment = new CardEasePayments();

                            bPayIsCorrect = cardPayment.AutomaticPayment(oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_CC_TERMINAL_ID,
                                                                        oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_CC_TRANSACTION_KEY,
                                                                        oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_CC_CARDEASE_URL,
                                                                        oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_CC_CARDEASE_TIMEOUT.Value,
                                                                        oUser.USR_EMAIL,
                                                                        dQuantityToCharge,
                                                                        oUser.CUSTOMER_PAYMENT_MEAN.CURRENCy.CUR_ISO_CODE,
                                                                        oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_TOKEN_CARD_HASH,
                                                                        oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_TOKEN_CARD_REFERENCE,
                                                                        bAutoconf,
                                                                        out strUserReference,
                                                                        out strAuthCode,
                                                                        out strAuthResult,
                                                                        out strGatewayDate,
                                                                        out strCardScheme,
                                                                        out strTransactionId);
                        }
                        else if ((PaymentMeanCreditCardProviderType)oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_CREDIT_CARD_PAYMENT_PROVIDER ==
                            PaymentMeanCreditCardProviderType.pmccpIECISA)
                        {
                            int iQuantityToRechargeIECISA = Convert.ToInt32(dQuantityToCharge * infraestructureRepository.GetCurrencyDivisorFromIsoCode(oUser.CUSTOMER_PAYMENT_MEAN.CURRENCy.CUR_ISO_CODE));
                            strUserReference = IECISAPayments.UserReference();
                            DateTime dtNow = DateTime.Now;

                            IECISAPayments.IECISAErrorCode eErrorCode;
                            DateTime dtUTCNow = DateTime.UtcNow;
                            IECISAPayments cardPayment = new IECISAPayments();
                            string strErrorMessage = "";
                            bool bExceptionError = false;

                            cardPayment.StartAutomaticTransaction(oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_CF_USER,
                                               oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_CF_MERCHANT_ID,
                                               oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_CF_INSTANCE,
                                               oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_CF_CENTRE_ID,
                                               oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_CF_POS_ID,
                                               oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_SERVICE_URL,
                                               oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_SERVICE_TIMEOUT,
                                               oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_MAC_KEY,
                                               oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_TOKEN_CARD_REFERENCE,
                                               oUser.USR_EMAIL,
                                               iQuantityToRechargeIECISA,
                                               oUser.CUSTOMER_PAYMENT_MEAN.CURRENCy.CUR_ISO_CODE,
                                               infraestructureRepository.GetCurrencyIsoCodeNumericFromIsoCode(oUser.CUSTOMER_PAYMENT_MEAN.CURRENCy.CUR_ISO_CODE),
                                               dtNow,
                                               out eErrorCode,
                                               out strErrorMessage,
                                               out strTransactionId,
                                               out strUserReference,
                                               out bExceptionError);

                            customersRepository.GatewayErrorLogUpdate(oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_ID, bExceptionError, (eErrorCode != IECISAPayments.IECISAErrorCode.OK));

                            if (eErrorCode != IECISAPayments.IECISAErrorCode.OK)
                            {
                                string errorCode = eErrorCode.ToString();

                                m_Log.LogMessage(LogLevels.logERROR, string.Format("PerformPrepayRecharge.StartWebTransaction : errorCode={0} ; errorMessage={1}",
                                          errorCode, strErrorMessage));


                            }
                            else
                            {
                                string strRedirectURL = "";
                                cardPayment.GetWebTransactionPaymentTypes(oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_SERVICE_URL,
                                                                        oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_SERVICE_TIMEOUT,
                                                                        strTransactionId,
                                                                        out eErrorCode,
                                                                        out strErrorMessage,
                                                                        out strRedirectURL,
                                                                        out bExceptionError);

                                customersRepository.GatewayErrorLogUpdate(oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_ID, bExceptionError, (eErrorCode != IECISAPayments.IECISAErrorCode.OK));

                                if (eErrorCode != IECISAPayments.IECISAErrorCode.OK)
                                {
                                    string errorCode = eErrorCode.ToString();

                                    m_Log.LogMessage(LogLevels.logERROR, string.Format("PerformPrepayRecharge.GetWebTransactionPaymentTypes : errorCode={0} ; errorMessage={1}",
                                              errorCode, strErrorMessage));


                                }
                                else
                                {
                                    customersRepository.StartRecharge(oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_ID,
                                                                              oUser.USR_EMAIL,
                                                                              dtUTCNow,
                                                                              dtNow,
                                                                              iQuantityToRecharge,
                                                                              oUser.CUSTOMER_PAYMENT_MEAN.CURRENCy.CUR_ID,
                                                                              "",
                                                                              strUserReference,
                                                                              strTransactionId,
                                                                              "",
                                                                              "",
                                                                              "",
                                                                              PaymentMeanRechargeStatus.Committed);

                                    DateTime? dtTransactionDate = null;
                                    cardPayment.CompleteAutomaticTransaction(oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_SERVICE_URL,
                                                           oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_SERVICE_TIMEOUT,
                                                           oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_MAC_KEY,
                                                           strTransactionId,
                                                          out eErrorCode,
                                                          out strErrorMessage,
                                                          out dtTransactionDate,
                                                          out strCFTransactionID,
                                                          out strAuthCode,
                                                          out bExceptionError);

                                    customersRepository.GatewayErrorLogUpdate(oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_ID, bExceptionError, (eErrorCode != IECISAPayments.IECISAErrorCode.OK));

                                    if (eErrorCode != IECISAPayments.IECISAErrorCode.OK)
                                    {
                                        string errorCode = eErrorCode.ToString();

                                        m_Log.LogMessage(LogLevels.logERROR, string.Format("PerformPrepayRecharge.GetWebTransactionPaymentTypes : errorCode={0} ; errorMessage={1}",
                                                  errorCode, strErrorMessage));



                                    }
                                    else
                                    {

                                        strAuthResult = "succeeded";

                                        customersRepository.CompleteStartRecharge(oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_ID,
                                                                                  oUser.USR_EMAIL,
                                                                                  strTransactionId,
                                                                                  strAuthResult,
                                                                                  strCFTransactionID,
                                                                                  dtTransactionDate.Value.ToString("HHmmssddMMyyyy"),
                                                                                  strAuthCode,
                                                                                  PaymentMeanRechargeStatus.Committed);
                                        strGatewayDate = dtTransactionDate.Value.ToString("HHmmssddMMyyyy");
                                        rechargeStatus = PaymentMeanRechargeStatus.Committed;
                                        bPayIsCorrect = true;

                                    }
                                }

                            }

                        }
                        else if ((PaymentMeanCreditCardProviderType)oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_CREDIT_CARD_PAYMENT_PROVIDER ==
                           PaymentMeanCreditCardProviderType.pmccpStripe)
                        {

                            string result="";
                            string errorMessage = "";
                            string errorCode = "";
                            string strPAN = "";
                            string strExpirationDateMonth = "";
                            string strExpirationDateYear = "";
                            string strCustomerId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_TOKEN_CARD_HASH;

                            int iQuantityToRechargeStripe = Convert.ToInt32(dQuantityToCharge * infraestructureRepository.GetCurrencyDivisorFromIsoCode(oUser.CUSTOMER_PAYMENT_MEAN.CURRENCy.CUR_ISO_CODE));
                            bPayIsCorrect = StripePayments.PerformCharge(oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.STRIPE_CONFIGURATION.STRCON_SECRET_KEY,
                                                                        oUser.USR_EMAIL,
                                                                        oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_TOKEN_CARD_REFERENCE,
                                                                        ref strCustomerId,
                                                                        iQuantityToRechargeStripe,
                                                                        oUser.CUSTOMER_PAYMENT_MEAN.CURRENCy.CUR_ISO_CODE,
                                                                        bAutoconf,
                                                                        out result,
                                                                        out errorCode,
                                                                        out errorMessage,
                                                                        out strCardScheme,
                                                                        out strPAN,
                                                                        out strExpirationDateMonth,
                                                                        out strExpirationDateYear,
                                                                        out strTransactionId,
                                                                        out strGatewayDate);

                            if (bPayIsCorrect)
                            {
                                strUserReference = strTransactionId;
                                strAuthCode = "";
                                strAuthResult = "succeeded";

                            }
                        }
                            
                        if (bPayIsCorrect)
                        {


                            if (!customersRepository.RechargeUserBalance(ref oUser,
                                            iOSType,
                                            true,
                                            iQuantityToRecharge,
                                            dPercVAT1, dPercVAT2, iPartialVAT1, dPercFEE, iPercFEETopped, iPartialPercFEE, iFixedFEE, iPartialFixedFEE, iTotalQuantity,
                                            //Convert.ToInt32(dQuantityToCharge * 100),                                             
                                            oUser.CURRENCy.CUR_ID,
                                            PaymentSuscryptionType.pstPrepay,
                                            rechargeStatus,
                                            rechargeCreationType,
                                            //dVAT,
                                            strUserReference,
                                            strTransactionId,
                                            strCFTransactionID,
                                            strGatewayDate,
                                            strAuthCode,
                                            strAuthResult,
                                            strAuthResultDesc,
                                            oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_TOKEN_CARD_HASH,
                                            oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_TOKEN_CARD_REFERENCE,
                                            strCardScheme,
                                            oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_TOKEN_MASKED_CARD_NUMBER,
                                            oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_TOKEN_CARD_EXPIRATION_DATE,
                                            null,
                                            null,
                                            null,
                                            false,
                                            dLatitude, 
                                            dLongitude,
                                            strAppVersion,
                                            out dRechargeId))
                            {
                                rtRes = ResultType.Result_Error_Generic;
                                Logger_AddLogMessage(string.Format("PerformPrepayRecharge::Error: Result = {0}", rtRes.ToString()), LogLevels.logERROR);

                            }
                            else
                            {
                                rtRes = ResultType.Result_OK;
                            }

                        }
                        else
                        {
                            if (bAutomatic)
                            {
                                customersRepository.AutomaticRechargeFailure(ref oUser);
                            }
                            rtRes = ResultType.Result_Error_Recharge_Failed;
                            Logger_AddLogMessage(string.Format("PerformPrepayRecharge::Error: Result = {0}", rtRes.ToString()), LogLevels.logERROR);
                           
                        }

                    }
                    else if (((PaymentMeanType)oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAT_ID == PaymentMeanType.pmtPaypal) &&
                        (oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AUTOMATIC_RECHARGE == 1))
                    {
                        PayPal.Services.Private.AP.PayResponse PResponse = null;

                        if (!PaypalPayments.PreapprovalPayRequest(oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_TOKEN_PAYPAL_ID,
                                                                oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_TOKEN_PAYPAL_PREAPPROVAL_KEY,
                                                                dQuantityToCharge,
                                                                oUser.CUSTOMER_PAYMENT_MEAN.CURRENCy.CUR_ISO_CODE,
                                                                "en-US",
                                                                "http://localhost",
                                                                "http://localhost",
                                                                out PResponse))
                        {
                            if (bAutomatic)
                            {
                                customersRepository.AutomaticRechargeFailure(ref oUser);
                            }
                            rtRes = ResultType.Result_Error_Recharge_Failed;
                            Logger_AddLogMessage(string.Format("PerformPrepayRecharge::Error: Result = {0}", rtRes.ToString()), LogLevels.logERROR);
                           
                        }
                        else
                        {
                            if (PResponse.paymentExecStatus != "COMPLETED")
                            {
                               rtRes = ResultType.Result_Error_Recharge_Failed;
                               Logger_AddLogMessage(string.Format("PerformPrepayRecharge::Error: Result = {0}", rtRes.ToString()), LogLevels.logERROR);
                               
                            }
                            else
                            {
                                PayPal.Services.Private.AP.PaymentDetailsResponse PDResponse = null;

                                if (PaypalPayments.PreapprovalPayConfirm(PResponse.payKey,
                                                                            "en-US",
                                                                            out PDResponse))
                                {



                                    if (!customersRepository.RechargeUserBalance(ref oUser,
                                                                                iOSType,
                                                                                true,
                                                                                iQuantity,
                                                                                dPercVAT1, dPercVAT2, iPartialVAT1, dPercFEE, iPercFEETopped, iPartialPercFEE, iFixedFEE, iPartialFixedFEE, iTotalQuantity,
                                                                                //Convert.ToInt32(dQuantityToCharge * 100),
                                                                                oUser.CURRENCy.CUR_ID,
                                                                                PaymentSuscryptionType.pstPrepay,
                                                                                PaymentMeanRechargeStatus.Committed,
                                                                                rechargeCreationType,
                                                                                //dVAT,
                                                                                null,
                                                                                PDResponse.paymentInfoList[0].transactionId,
                                                                                null,
                                                                                DateTime.Now.ToUniversalTime().ToString(),
                                                                                null,
                                                                                null,
                                                                                null,
                                                                                null,
                                                                                null,
                                                                                null,
                                                                                null,
                                                                                null,
                                                                                null,
                                                                                null,
                                                                                PResponse.payKey,
                                                                                false,
                                                                                dLatitude,
                                                                                dLongitude,
                                                                                strAppVersion,
                                                                                out dRechargeId))
                                    {
                                        rtRes = ResultType.Result_Error_Generic;
                                        Logger_AddLogMessage(string.Format("PerformPrepayRecharge::Error: Result = {0}", rtRes.ToString()), LogLevels.logERROR);
                                       
                                    }
                                    else
                                    {
                                        rtRes = ResultType.Result_OK;
                                    }

                                }
                                else
                                {
                                    if (bAutomatic)
                                    {
                                        customersRepository.AutomaticRechargeFailure(ref oUser);
                                    }
                                    rtRes = ResultType.Result_Error_Recharge_Failed;
                                    Logger_AddLogMessage(string.Format("PerformPrepayRecharge::Error: Result = {0}", rtRes.ToString()), LogLevels.logERROR);

                                }
                            }
                        }
                    }
                    else
                    {
                        rtRes = ResultType.Result_Error_Recharge_Not_Possible;
                        Logger_AddLogMessage(string.Format("PerformPrepayRecharge::Error: Result = {0}", rtRes.ToString()), LogLevels.logERROR);
                    }
                }
                else
                {
                    rtRes = ResultType.Result_Error_Invalid_Payment_Mean;
                    Logger_AddLogMessage(string.Format("PerformPrepayRecharge::Error: Result = {0}", rtRes.ToString()), LogLevels.logERROR);
                }

            }
            catch (Exception e)
            {
                rtRes = ResultType.Result_Error_Generic;
                Logger_AddLogException(e, "PerformPrepayRecharge::Exception", LogLevels.logERROR);

            }


            return rtRes;

        }

        private ResultType PerformCashRecharge(ref USER oUser, int iOSType, int iTotalQuantity, decimal? dLatitude, decimal? dLongitude, string strAppVersion, PaymentMeanRechargeCreationType rechargeCreationType, decimal? dInstallationId, decimal? dFinanDistOperatorId, string sBackOfficeUsr, out decimal? dRechargeId)
        {
            ResultType rtRes = ResultType.Result_Error_Generic;
            dRechargeId = null;

            try
            {

                decimal dPercVAT1;
                decimal dPercVAT2;
                decimal dPercFEE;
                int iPercFEETopped;
                int iFixedFEE;
                int? iPaymentTypeId = null;
                int? iPaymentSubtypeId = null;
                /*if (oUser.CUSTOMER_PAYMENT_MEAN != null)
                {
                    iPaymentTypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAT_ID;
                    iPaymentSubtypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAST_ID;
                }*/

                iPaymentTypeId = (int)PaymentMeanType.pmtCash;
                //iPaymentSubtypeId = (int)PaymentMeanSubType.pmstUndefined;

                if (!customersRepository.GetFinantialParams(oUser, "", iPaymentTypeId, iPaymentSubtypeId, ChargeOperationsType.BalanceRecharge,
                                                            out dPercVAT1, out dPercVAT2, out dPercFEE, out iPercFEETopped, out iFixedFEE))
                {
                    rtRes = ResultType.Result_Error_Generic;
                    Logger_AddLogMessage(string.Format("PerformCashRecharge::Error: Result = {0}", rtRes.ToString()), LogLevels.logERROR);
                }
                else
                {

                    int iPartialVAT1;
                    int iPartialPercFEE;
                    int iPartialFixedFEE;

                    int iQuantity = customersRepository.CalculateFEEReverse(iTotalQuantity, dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE);

                    NumberFormatInfo numberFormatProvider = new NumberFormatInfo();
                    numberFormatProvider.NumberDecimalSeparator = ".";
                    decimal dQuantity = Convert.ToDecimal(iQuantity, numberFormatProvider) / 100;
                    decimal dQuantityToCharge = Convert.ToDecimal(iTotalQuantity, numberFormatProvider) / 100;

                    if (!customersRepository.RechargeUserBalanceWithCash(ref oUser,
                                                                        iOSType,
                                                                        iQuantity,
                                                                        dPercVAT1, dPercVAT2, iPartialVAT1, dPercFEE, iPercFEETopped, iPartialPercFEE, iFixedFEE, iPartialFixedFEE, iTotalQuantity,
                                                                        //Convert.ToInt32(dQuantityToCharge * 100),                                             
                                                                        oUser.CURRENCy.CUR_ID,
                                                                        dLatitude,
                                                                        dLongitude,
                                                                        strAppVersion,
                                                                        rechargeCreationType,
                                                                        dInstallationId,
                                                                        dFinanDistOperatorId,
                                                                        sBackOfficeUsr,
                                                                        out dRechargeId))
                    {
                        rtRes = ResultType.Result_Error_Generic;
                        Logger_AddLogMessage(string.Format("PerformCashRecharge::Error: Result = {0}", rtRes.ToString()), LogLevels.logERROR);
                    }
                    else
                        rtRes = ResultType.Result_OK;
                }

            }
            catch (Exception e)
            {
                rtRes = ResultType.Result_Error_Generic;
                Logger_AddLogException(e, "PerformCashRecharge::Exception", LogLevels.logERROR);

            }

            return rtRes;
        }

        private ResultType PerformOxxoRecharge(ref USER oUser, int iOSType, int iTotalQuantity, decimal? dLatitude, decimal? dLongitude, string strAppVersion, PaymentMeanRechargeCreationType rechargeCreationType, 
                                               string sOxxoToken, int? iOxxoCashMachine, string sOxxoEntryMode, decimal dOxxoTicket, decimal dOxxoFolio, DateTime dtOxxoAdminDate, string sOxxoStore, string sOxxoPartial,
                                               out decimal? dRechargeId)
        {
            ResultType rtRes = ResultType.Result_Error_Generic;
            dRechargeId = null;

            try
            {
                var oPredicate = PredicateBuilder.True<CUSTOMER_PAYMENT_MEANS_RECHARGE>();
                oPredicate = oPredicate.And(c => c.CUSPMR_OXXO_FOLIO.HasValue && c.CUSPMR_OXXO_FOLIO.Value == dOxxoFolio);
                if (!backOfficeRepository.GetCustomerRecharges(oPredicate).Any())
                {
                    decimal? dSrcCurId = null;
                    int? iSrcAmount = null;
                    decimal? dSrcChangeApplied = null;
                    decimal? dSrcChangeFEEApplied = null;
                    if (oUser.CURRENCy.CUR_ISO_CODE != "MXN")
                    {
                        dSrcCurId = infraestructureRepository.GetCurrencyFromIsoCode("MXN");
                        iSrcAmount = iTotalQuantity;
                        double dChangeApplied;
                        double dChangeFee;
                        iTotalQuantity = ChangeQuantityFromCurToUserCur(iTotalQuantity, "MXN", oUser, out dChangeApplied, out dChangeFee);
                        dSrcChangeApplied = Convert.ToDecimal(dChangeApplied);
                        dSrcChangeFEEApplied = Convert.ToDecimal(dChangeFee);
                    }

                    decimal dPercVAT1;
                    decimal dPercVAT2;
                    decimal dPercFEE;
                    int iPercFEETopped;
                    int iFixedFEE;
                    int? iPaymentTypeId = null;
                    int? iPaymentSubtypeId = null;
                    /*if (oUser.CUSTOMER_PAYMENT_MEAN != null)
                    {
                        iPaymentTypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAT_ID;
                        iPaymentSubtypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAST_ID;
                    }*/

                    iPaymentTypeId = (int)PaymentMeanType.pmtCash;
                    //iPaymentSubtypeId = (int)PaymentMeanSubType.pmstUndefined;

                    if (!customersRepository.GetFinantialParams(oUser, "", iPaymentTypeId, iPaymentSubtypeId, ChargeOperationsType.BalanceRecharge,
                                                                out dPercVAT1, out dPercVAT2, out dPercFEE, out iPercFEETopped, out iFixedFEE))
                    {
                        rtRes = ResultType.Result_Error_Generic;
                        Logger_AddLogMessage(string.Format("PerformOxxoRecharge::Error: Result = {0}", rtRes.ToString()), LogLevels.logERROR);
                    }
                    else
                    {

                        int iPartialVAT1;
                        int iPartialPercFEE;
                        int iPartialFixedFEE;

                        int iQuantity = customersRepository.CalculateFEEReverse(iTotalQuantity, dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE);

                        NumberFormatInfo numberFormatProvider = new NumberFormatInfo();
                        numberFormatProvider.NumberDecimalSeparator = ".";
                        decimal dQuantity = Convert.ToDecimal(iQuantity, numberFormatProvider) / 100;
                        decimal dQuantityToCharge = Convert.ToDecimal(iTotalQuantity, numberFormatProvider) / 100;

                        if (!customersRepository.RechargeUserBalanceWithOxxo(ref oUser,
                                                                            iOSType,
                                                                            iQuantity,
                                                                            dPercVAT1, dPercVAT2, iPartialVAT1, dPercFEE, iPercFEETopped, iPartialPercFEE, iFixedFEE, iPartialFixedFEE, iTotalQuantity,
                            //Convert.ToInt32(dQuantityToCharge * 100),                                             
                                                                            oUser.CURRENCy.CUR_ID,
                                                                            dLatitude,
                                                                            dLongitude,
                                                                            strAppVersion,
                                                                            rechargeCreationType,
                                                                            sOxxoToken, iOxxoCashMachine, sOxxoEntryMode, dOxxoTicket, dOxxoFolio, dtOxxoAdminDate, sOxxoStore, sOxxoPartial,
                                                                            dSrcCurId, iSrcAmount, dSrcChangeApplied, dSrcChangeFEEApplied,
                                                                            out dRechargeId))
                        {
                            rtRes = ResultType.Result_Error_Generic;
                            Logger_AddLogMessage(string.Format("PerformOxxoRecharge::Error: Result = {0}", rtRes.ToString()), LogLevels.logERROR);
                        }
                        else
                            rtRes = ResultType.Result_OK;
                    }
                }
                else
                {
                    rtRes = ResultType.Result_Error_AlreadyUsed_Recharge_Code;
                }

            }
            catch (Exception e)
            {
                rtRes = ResultType.Result_Error_Generic;
                Logger_AddLogException(e, "PerformOxxoRecharge::Exception", LogLevels.logERROR);

            }

            return rtRes;
        }

        private ResultType PerformPaypalRecharge(ref USER oUser, int iOSType, int iQuantity, decimal? dLatitude, decimal? dLongitude, string strAppVersion, PaymentMeanRechargeCreationType rechargeCreationType, 
                                                 string strPaypalId,
                                                 string strPaypalAuthorizationId,
                                                 string strPaypalCreateTime,
                                                 string strPaypalIntent,
                                                 string strPaypalState,
                                                 out decimal? dRechargeId)
        {
            ResultType rtRes = ResultType.Result_Error_Generic;
            dRechargeId = null;

            try
            {

                decimal dPercVAT1;
                decimal dPercVAT2;
                decimal dPercFEE;
                int iPercFEETopped;
                int iFixedFEE;
                int? iPaymentTypeId = null;
                int? iPaymentSubtypeId = null;
              
                iPaymentTypeId = (int)PaymentMeanType.pmtPaypal;

                if (!customersRepository.GetFinantialParams(oUser, "", iPaymentTypeId, iPaymentSubtypeId, ChargeOperationsType.BalanceRecharge,
                                                            out dPercVAT1, out dPercVAT2, out dPercFEE, out iPercFEETopped, out iFixedFEE))
                {
                    rtRes = ResultType.Result_Error_Generic;
                    Logger_AddLogMessage(string.Format("PerformPaypalRecharge::Error: Result = {0}", rtRes.ToString()), LogLevels.logERROR);
                }
                else
                {

                    int iPartialVAT1;
                    int iPartialPercFEE;
                    int iPartialFixedFEE;

                    int iTotalQuantity = customersRepository.CalculateFEE(iQuantity, dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE);

                    NumberFormatInfo numberFormatProvider = new NumberFormatInfo();
                    numberFormatProvider.NumberDecimalSeparator = ".";
                    decimal dQuantity = Convert.ToDecimal(iQuantity, numberFormatProvider) / 100;
                    decimal dQuantityToCharge = Convert.ToDecimal(iTotalQuantity, numberFormatProvider) / 100;


                    if (!customersRepository.RechargeUserBalanceWithPaypal(ref oUser,
                                                                        iOSType,
                                                                        iQuantity,
                                                                        dPercVAT1, dPercVAT2, iPartialVAT1, dPercFEE, iPercFEETopped, iPartialPercFEE, iFixedFEE, iPartialFixedFEE, iTotalQuantity,
                                                                        oUser.CURRENCy.CUR_ID,
                                                                        dLatitude,
                                                                        dLongitude,
                                                                        strAppVersion,
                                                                        rechargeCreationType,
                                                                        strPaypalId,
                                                                        strPaypalAuthorizationId,
                                                                        strPaypalCreateTime,
                                                                        strPaypalIntent,
                                                                        strPaypalState,
                                                                        out dRechargeId))
                    {
                        rtRes = ResultType.Result_Error_Generic;
                        Logger_AddLogMessage(string.Format("PerformPaypalRecharge::Error: Result = {0}", rtRes.ToString()), LogLevels.logERROR);
                    }
                    else
                        rtRes = ResultType.Result_OK;

                }

            }
            catch (Exception e)
            {
                rtRes = ResultType.Result_Error_Generic;
                Logger_AddLogException(e, "PerformPaypalRecharge::Exception", LogLevels.logERROR);

            }

            return rtRes;
        }



        private ResultType PerformPerTransactionRecharge(ref USER oUser, int iOSType, int iQuantity, decimal dCurrencyID, decimal? dLatitude, decimal? dLongitude, string strAppVersion, out decimal? dRechargeId)
        {
            ResultType rtRes = ResultType.Result_Error_Generic;
            dRechargeId = null;

            try
            {
                if (iQuantity > 0)
                {
                    if ((oUser.CUSTOMER_PAYMENT_MEAN != null) &&
                        (oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_ENABLED == 1) &&
                        (oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_VALID == 1))
                    {
                        decimal dPercVAT1 = 0;
                        decimal dPercVAT2 = 0;
                        decimal dPercFEE = 0;
                        int iPercFEETopped = 0;
                        int iFixedFEE = 0;

                        int iQuantityToRecharge = iQuantity;

                        if ((PaymentMeanType)oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAT_ID == PaymentMeanType.pmtDebitCreditCard)
                        {
                            if (oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_MIN_CHARGE.HasValue)
                            {
                                if (iQuantity < oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_MIN_CHARGE.Value)
                                {
                                    iQuantityToRecharge = oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_MIN_CHARGE.Value;
                                }
                            }
                        }

                        /*int? iPaymentTypeId = null;
                        int? iPaymentSubtypeId = null;
                        if (oUser.CUSTOMER_PAYMENT_MEAN != null)
                        {
                            iPaymentTypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAT_ID;
                            iPaymentSubtypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAST_ID;
                        }

                        if (!customersRepository.GetFinantialParams(oUser, "", iPaymentTypeId, iPaymentSubtypeId, ChargeOperationsType.BalanceRecharge,
                                                                    out dPercVAT1, out dPercVAT2, out dPercFEE, out iPercFEETopped, out iFixedFEE))
                        {
                            rtRes = ResultType.Result_Error_Generic;
                            Logger_AddLogMessage(string.Format("PerformPrepayRecharge::Error: Error getting finantial parameters. Result = {0}", rtRes.ToString()), LogLevels.logERROR);
                        }*/

                        int iPartialVAT1 = 0;
                        int iPartialPercFEE = 0;
                        int iPartialFixedFEE = 0;

                        int iTotalQuantity = iQuantityToRecharge; // customersRepository.CalculateFEE(iQuantity, dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE);*/                    

                        NumberFormatInfo numberFormatProvider = new NumberFormatInfo();
                        numberFormatProvider.NumberDecimalSeparator = ".";
                        decimal dQuantity = Convert.ToDecimal(iQuantityToRecharge, numberFormatProvider) / 100;
                        decimal dQuantityToCharge = Convert.ToDecimal(iTotalQuantity, numberFormatProvider) / 100;


                        /*decimal dFeeVal = 0;
                        decimal dFeePerc = 0;

                        customersRepository.GetPaymentMeanFees(ref oUser, out dFeeVal, out dFeePerc);
                        NumberFormatInfo numberFormatProvider = new NumberFormatInfo();
                        numberFormatProvider.NumberDecimalSeparator = ".";
                        decimal dQuantity = Convert.ToDecimal(iQuantity, numberFormatProvider) / 100;
                        decimal dQuantityToCharge = Math.Round(dQuantity + (dQuantity  * dFeePerc / 100 + dFeeVal / 100), 2);*/

                        if ((PaymentMeanType)oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAT_ID == PaymentMeanType.pmtDebitCreditCard)
                        {
                            string strUserReference = null;
                            string strAuthCode = null;
                            string strAuthResultDesc = "";
                            string strAuthResult = null;
                            string strGatewayDate = null;
                            string strTransactionId = null;
                            string strCardScheme = null;
                            string strCFTransactionID = null;

                            bool bPayIsCorrect = false;
                            PaymentMeanRechargeStatus rechargeStatus = PaymentMeanRechargeStatus.Authorized;

                            if ((PaymentMeanCreditCardProviderType)oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_CREDIT_CARD_PAYMENT_PROVIDER ==
                                PaymentMeanCreditCardProviderType.pmccpCreditCall)
                            {
                                CardEasePayments cardPayment = new CardEasePayments();

                                bPayIsCorrect = cardPayment.AutomaticPayment(oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_CC_TERMINAL_ID,
                                                                            oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_CC_TRANSACTION_KEY,
                                                                            oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_CC_CARDEASE_URL,
                                                                            oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_CC_CARDEASE_TIMEOUT.Value,
                                                                            oUser.USR_EMAIL,
                                                                            dQuantityToCharge,
                                                                            infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(dCurrencyID)),
                                                                            oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_TOKEN_CARD_HASH,
                                                                            oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_TOKEN_CARD_REFERENCE,
                                                                            false,
                                                                            out strUserReference,
                                                                            out strAuthCode,
                                                                            out strAuthResult,
                                                                            out strGatewayDate,
                                                                            out strCardScheme,
                                                                            out strTransactionId);
                            }
                            else if ((PaymentMeanCreditCardProviderType)oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_CREDIT_CARD_PAYMENT_PROVIDER ==
                                PaymentMeanCreditCardProviderType.pmccpIECISA)
                            {
                                int iQuantityToRechargeIECISA = Convert.ToInt32(dQuantityToCharge * infraestructureRepository.GetCurrencyDivisorFromIsoCode(infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(dCurrencyID))));
                                strUserReference = IECISAPayments.UserReference();
                                DateTime dtNow = DateTime.Now;

                                IECISAPayments.IECISAErrorCode eErrorCode;
                                DateTime dtUTCNow = DateTime.UtcNow;
                                IECISAPayments cardPayment = new IECISAPayments();
                                string strErrorMessage = "";
                                bool bExceptionError = false;

                                cardPayment.StartAutomaticTransaction(oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_CF_USER,
                                                   oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_CF_MERCHANT_ID,
                                                   oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_CF_INSTANCE,
                                                   oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_CF_CENTRE_ID,
                                                   oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_CF_POS_ID,
                                                   oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_SERVICE_URL,
                                                   oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_SERVICE_TIMEOUT,
                                                   oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_MAC_KEY,
                                                   oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_TOKEN_CARD_REFERENCE,
                                                   oUser.USR_EMAIL,
                                                   iQuantityToRechargeIECISA,
                                                   oUser.CUSTOMER_PAYMENT_MEAN.CURRENCy.CUR_ISO_CODE,
                                                   infraestructureRepository.GetCurrencyIsoCodeNumericFromIsoCode(oUser.CUSTOMER_PAYMENT_MEAN.CURRENCy.CUR_ISO_CODE),
                                                   dtNow,
                                                   out eErrorCode,
                                                   out strErrorMessage,
                                                   out strTransactionId,
                                                   out strUserReference,
                                                   out bExceptionError);

                                customersRepository.GatewayErrorLogUpdate(oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_ID, bExceptionError, (eErrorCode != IECISAPayments.IECISAErrorCode.OK));

                                if (eErrorCode != IECISAPayments.IECISAErrorCode.OK)
                                {
                                    string errorCode = eErrorCode.ToString();

                                    m_Log.LogMessage(LogLevels.logERROR, string.Format("PerformPerTransactionRecharge.StartWebTransaction : errorCode={0} ; errorMessage={1}",
                                              errorCode, strErrorMessage));


                                }
                                else
                                {
                                    string strRedirectURL = "";
                                    cardPayment.GetWebTransactionPaymentTypes(oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_SERVICE_URL,
                                                                            oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_SERVICE_TIMEOUT,
                                                                            strTransactionId,
                                                                            out eErrorCode,
                                                                            out strErrorMessage,
                                                                            out strRedirectURL,
                                                                            out bExceptionError);

                                    customersRepository.GatewayErrorLogUpdate(oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_ID, bExceptionError, (eErrorCode != IECISAPayments.IECISAErrorCode.OK));
                                    
                                    if (eErrorCode != IECISAPayments.IECISAErrorCode.OK)
                                    {
                                        string errorCode = eErrorCode.ToString();

                                        m_Log.LogMessage(LogLevels.logERROR, string.Format("PerformPerTransactionRecharge.GetWebTransactionPaymentTypes : errorCode={0} ; errorMessage={1}",
                                                  errorCode, strErrorMessage));


                                    }
                                    else
                                    {
                                        customersRepository.StartRecharge(oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_ID,
                                                                                  oUser.USR_EMAIL,
                                                                                  dtUTCNow,
                                                                                  dtNow,
                                                                                  iQuantityToRecharge,
                                                                                  oUser.CUSTOMER_PAYMENT_MEAN.CURRENCy.CUR_ID,
                                                                                  "",
                                                                                  strUserReference,
                                                                                  strTransactionId,
                                                                                  "",
                                                                                  "",
                                                                                  "",
                                                                                  PaymentMeanRechargeStatus.Committed);

                                        DateTime? dtTransactionDate = null;
                                        cardPayment.CompleteAutomaticTransaction(oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_SERVICE_URL,
                                                               oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_SERVICE_TIMEOUT,
                                                               oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.IECISA_CONFIGURATION.IECCON_MAC_KEY,
                                                               strTransactionId,
                                                              out eErrorCode,
                                                              out strErrorMessage,
                                                              out dtTransactionDate,
                                                              out strCFTransactionID,
                                                              out strAuthCode,
                                                              out bExceptionError);

                                        customersRepository.GatewayErrorLogUpdate(oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_ID, bExceptionError, (eErrorCode != IECISAPayments.IECISAErrorCode.OK));

                                        if (eErrorCode != IECISAPayments.IECISAErrorCode.OK)
                                        {
                                            string errorCode = eErrorCode.ToString();

                                            m_Log.LogMessage(LogLevels.logERROR, string.Format("PerformPerTransactionRecharge.GetWebTransactionPaymentTypes : errorCode={0} ; errorMessage={1}",
                                                      errorCode, strErrorMessage));



                                        }
                                        else
                                        {

                                            strAuthResult = "succeeded";

                                            customersRepository.CompleteStartRecharge(oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.CPTGC_ID,
                                                                                      oUser.USR_EMAIL,
                                                                                      strTransactionId,
                                                                                      strAuthResult,
                                                                                      strCFTransactionID,
                                                                                      dtTransactionDate.Value.ToString("HHmmssddMMyyyy"),
                                                                                      strAuthCode,
                                                                                      PaymentMeanRechargeStatus.Committed);
                                            strGatewayDate = dtTransactionDate.Value.ToString("HHmmssddMMyyyy");
                                            rechargeStatus = PaymentMeanRechargeStatus.Committed;
                                            bPayIsCorrect = true;

                                        }
                                    }

                                }

                            }
                            else if ((PaymentMeanCreditCardProviderType)oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_CREDIT_CARD_PAYMENT_PROVIDER ==
                                                    PaymentMeanCreditCardProviderType.pmccpStripe)
                            {

                                string result = "";
                                string errorMessage = "";
                                string errorCode = "";
                                string strPAN = "";
                                string strExpirationDateMonth = "";
                                string strExpirationDateYear = "";
                                string strCustomerId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_TOKEN_CARD_HASH;

                                int iQuantityToRechargeStripe = Convert.ToInt32(dQuantityToCharge * infraestructureRepository.GetCurrencyDivisorFromIsoCode(oUser.CUSTOMER_PAYMENT_MEAN.CURRENCy.CUR_ISO_CODE));
                                bPayIsCorrect = StripePayments.PerformCharge(oUser.CUSTOMER_PAYMENT_MEAN.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG.STRIPE_CONFIGURATION.STRCON_SECRET_KEY,
                                                                            oUser.USR_EMAIL,
                                                                            oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_TOKEN_CARD_REFERENCE,
                                                                            ref strCustomerId,
                                                                            iQuantityToRechargeStripe,
                                                                            oUser.CUSTOMER_PAYMENT_MEAN.CURRENCy.CUR_ISO_CODE,
                                                                            false,
                                                                            out result,
                                                                            out errorCode,
                                                                            out errorMessage,
                                                                            out strCardScheme,
                                                                            out strPAN,
                                                                            out strExpirationDateMonth,
                                                                            out strExpirationDateYear,
                                                                            out strTransactionId,
                                                                            out strGatewayDate);

                                if (bPayIsCorrect)
                                {
                                    strUserReference = strTransactionId;
                                    strAuthCode = "";
                                    strAuthResult = "succeeded";

                                }
                            }


                            if (bPayIsCorrect)
                            {


                                if (!customersRepository.RechargeUserBalance(ref oUser,
                                                iOSType,
                                                true,
                                                iQuantityToRecharge,
                                                dPercVAT1, dPercVAT2, iPartialVAT1, dPercFEE, iPercFEETopped, iPartialPercFEE, iFixedFEE, iPartialFixedFEE, iTotalQuantity,
                                    //Convert.ToInt32(dQuantityToCharge * 100),
                                                dCurrencyID,
                                                PaymentSuscryptionType.pstPerTransaction,
                                                rechargeStatus,
                                                PaymentMeanRechargeCreationType.pmrctRegularRecharge,
                                    //0,
                                                strUserReference,
                                                strTransactionId,
                                                strCFTransactionID,
                                                strGatewayDate,
                                                strAuthCode,
                                                strAuthResult,
                                                strAuthResultDesc,
                                                oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_TOKEN_CARD_HASH,
                                                oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_TOKEN_CARD_REFERENCE,
                                                strCardScheme,
                                                oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_TOKEN_MASKED_CARD_NUMBER,
                                                oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_TOKEN_CARD_EXPIRATION_DATE,
                                                null,
                                                null,
                                                null,
                                                false,
                                                dLatitude,
                                                dLongitude,
                                                strAppVersion,
                                                out dRechargeId))
                                {
                                    rtRes = ResultType.Result_Error_Generic;
                                    Logger_AddLogMessage(string.Format("PerformPerTransactionRecharge::Error: Result = {0}", rtRes.ToString()), LogLevels.logERROR);

                                }
                                else
                                {
                                    rtRes = ResultType.Result_OK;
                                }

                            }
                            else
                            {
                                rtRes = ResultType.Result_Error_Recharge_Failed;
                                Logger_AddLogMessage(string.Format("PerformPerTransactionRecharge::Error: Result = {0}", rtRes.ToString()), LogLevels.logERROR);

                            }

                        }
                        else if (((PaymentMeanType)oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAT_ID == PaymentMeanType.pmtPaypal) &&
                            (oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AUTOMATIC_RECHARGE == 1))
                        {
                            PayPal.Services.Private.AP.PayResponse PResponse = null;

                            if (!PaypalPayments.PreapprovalPayRequest(oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_TOKEN_PAYPAL_ID,
                                                                    oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_TOKEN_PAYPAL_PREAPPROVAL_KEY,
                                                                    dQuantityToCharge,
                                                                    infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(dCurrencyID)),
                                                                    "en-US",
                                                                    "http://localhost",
                                                                    "http://localhost",
                                                                    out PResponse))
                            {
                                rtRes = ResultType.Result_Error_Recharge_Failed;
                                Logger_AddLogMessage(string.Format("PerformPerTransactionRecharge::Error: Result = {0}", rtRes.ToString()), LogLevels.logERROR);

                            }
                            else
                            {
                                if (PResponse.paymentExecStatus != "COMPLETED")
                                {
                                    rtRes = ResultType.Result_Error_Recharge_Failed;
                                    Logger_AddLogMessage(string.Format("PerformPerTransactionRecharge::Error: Result = {0}", rtRes.ToString()), LogLevels.logERROR);

                                }
                                else
                                {
                                    PayPal.Services.Private.AP.PaymentDetailsResponse PDResponse = null;

                                    if (PaypalPayments.PreapprovalPayConfirm(PResponse.payKey,
                                                                                "en-US",
                                                                                out PDResponse))
                                    {



                                        if (!customersRepository.RechargeUserBalance(ref oUser,
                                                                                    iOSType,
                                                                                    false,
                                                                                    iQuantity,
                                                                                    dPercVAT1, dPercVAT2, iPartialVAT1, dPercFEE, iPercFEETopped, iPartialPercFEE, iFixedFEE, iPartialFixedFEE, iTotalQuantity,
                                            //Convert.ToInt32(dQuantityToCharge * 100),
                                                                                    dCurrencyID,
                                                                                    PaymentSuscryptionType.pstPerTransaction,
                                                                                    PaymentMeanRechargeStatus.Committed,
                                                                                    PaymentMeanRechargeCreationType.pmrctRegularRecharge,
                                            //0,
                                                                                    null,
                                                                                    PDResponse.paymentInfoList[0].transactionId,
                                                                                    null,
                                                                                    DateTime.Now.ToUniversalTime().ToString(),
                                                                                    null,
                                                                                    null,
                                                                                    null,
                                                                                    null,
                                                                                    null,
                                                                                    null,
                                                                                    null,
                                                                                    null,
                                                                                    null,
                                                                                    null,
                                                                                    PResponse.payKey,
                                                                                    false,
                                                                                    dLatitude,
                                                                                    dLongitude,
                                                                                    strAppVersion,
                                                                                    out dRechargeId))
                                        {
                                            rtRes = ResultType.Result_Error_Generic;
                                            Logger_AddLogMessage(string.Format("PerformPerTransactionRecharge::Error: Result = {0}", rtRes.ToString()), LogLevels.logERROR);

                                        }
                                        else
                                        {
                                            rtRes = ResultType.Result_OK;
                                        }

                                    }
                                    else
                                    {
                                        rtRes = ResultType.Result_Error_Recharge_Failed;
                                        Logger_AddLogMessage(string.Format("PerformPerTransactionRecharge::Error: Result = {0}", rtRes.ToString()), LogLevels.logERROR);

                                    }
                                }
                            }
                        }
                        else
                        {
                            rtRes = ResultType.Result_Error_Recharge_Not_Possible;
                            Logger_AddLogMessage(string.Format("PerformPerTransactionRecharge::Error: Result = {0}", rtRes.ToString()), LogLevels.logERROR);
                        }
                    }
                    else
                    {
                        rtRes = ResultType.Result_Error_Invalid_Payment_Mean;
                        Logger_AddLogMessage(string.Format("PerformPerTransactionRecharge::Error: Result = {0}", rtRes.ToString()), LogLevels.logERROR);
                    }

                }
                else
                {
                    rtRes = ResultType.Result_OK;
                }
            }
            catch (Exception e)
            {
                rtRes = ResultType.Result_Error_Generic;
                Logger_AddLogException(e, "PerformPerTransactionRecharge::Exception", LogLevels.logERROR);

            }


            return rtRes;

        }



        private ResultType StartSession(ref USER oUser, decimal dInsId, SortedList parametersIn,out string strSessionID, int? iUTCOffset, string strCulture)
        {
            ResultType rtRes = ResultType.Result_OK;
            strSessionID = "";

            try
            {

                string strUser = parametersIn["u"].ToString();

                int? iOSID = null;
                string strWIFIMAC = "";
                string strIMEI = "";
                string strCellModel = "";
                string strOSVersion = "";
                string strPushId = "";
                string strAppVersion = "";
                bool bSessionKeepAlive = false;
                string strPhoneSerialNumber = "";

                if (parametersIn["OSID"] != null)
                {
                    iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());
                } 
                if (parametersIn["WIFIMAC"] != null)
                {
                    strWIFIMAC = parametersIn["WIFIMAC"].ToString();
                }
                if (parametersIn["IMEI"] != null)
                {
                    strIMEI = parametersIn["IMEI"].ToString();
                }
                if (parametersIn["cmodel"] != null)
                {
                    strCellModel = parametersIn["cmodel"].ToString();
                }
                if (parametersIn["cosvers"] != null)
                {
                    strOSVersion = parametersIn["cosvers"].ToString();
                }
                if (parametersIn["cserialnumber"] != null)
                {
                    strPhoneSerialNumber = parametersIn["cserialnumber"].ToString();
                }
                if (parametersIn["pushID"] != null)
                {
                    strPushId = parametersIn["pushID"].ToString();
                }
                if (parametersIn["appvers"] != null)
                {
                    strAppVersion = parametersIn["appvers"].ToString();
                } 
                if (parametersIn["keepsessionalive"] != null)
                {
                    bSessionKeepAlive = Convert.ToInt32(parametersIn["keepsessionalive"].ToString()) == 1;
                }



                if (!customersRepository.StartSession(ref oUser, dInsId, iOSID, strPushId, strWIFIMAC, strIMEI, strCellModel,
                                                        strOSVersion, strPhoneSerialNumber, strCulture, strAppVersion, bSessionKeepAlive, out strSessionID))
                {
                    Logger_AddLogMessage(string.Format("StartSession: Session can't be started: str= {0}", oUser.USR_USERNAME), LogLevels.logERROR);
                    rtRes = ResultType.Result_Error_Generic;
                }
                else
                {
                    if (iUTCOffset.HasValue)
                    {
                        customersRepository.SetUserUTCOffest(ref oUser, iUTCOffset.Value);
                    }

                    if (strCulture.Length>0)
                    {
                        customersRepository.SetUserCulture(ref oUser, strCulture);
                    }

                }



            }
            catch (Exception e)
            {
                rtRes = ResultType.Result_Error_Generic;
                Logger_AddLogException(e, "GetUserData::Exception", LogLevels.logERROR);
                
            }


            return rtRes;

        }



        private ResultType GetUserData(ref USER oUser, SortedList parametersIn)
        {
            ResultType rtRes = ResultType.Result_OK;

            try
            {
                
                oUser = null;
                decimal? dInsId=null;
                string strCulture = "";
                string strAppVersion = "";
                rtRes = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion);

            }
            catch (Exception e)
            {
                rtRes = ResultType.Result_Error_Generic;
                Logger_AddLogException(e, "GetUserData::Exception", LogLevels.logERROR);
                
            }


            return rtRes;

        }


        private ResultType GetUserData(ref USER oUser, SortedList parametersIn, bool bUpdateSessionTime)
        {
            ResultType rtRes = ResultType.Result_OK;

            try
            {

                oUser = null;
                decimal? dInsId = null;
                string strCulture = "";
                string strAppVersion = "";
                rtRes = GetUserData(ref oUser, parametersIn, bUpdateSessionTime, out dInsId, out strCulture, out strAppVersion);

            }
            catch (Exception e)
            {
                rtRes = ResultType.Result_Error_Generic;
                Logger_AddLogException(e, "GetUserData::Exception", LogLevels.logERROR);

            }


            return rtRes;

        }

        private ResultType GetUserData(ref USER oUser, SortedList parametersIn, out string strAppVersion)
        {
            ResultType rtRes = ResultType.Result_OK;
            strAppVersion = "";
            try
            {

                oUser = null;
                decimal? dInsId = null;
                string strCulture = "";
                rtRes = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion);

            }
            catch (Exception e)
            {
                rtRes = ResultType.Result_Error_Generic;
                Logger_AddLogException(e, "GetUserData::Exception", LogLevels.logERROR);

            }


            return rtRes;

        }

        private ResultType GetUserData(ref USER oUser, SortedList parametersIn, out decimal? dInsId, out string strAppVersion)
        {
            ResultType rtRes = ResultType.Result_OK;
            dInsId = null;
            strAppVersion = "";

            try
            {

                oUser = null;                
                string strCulture = "";
                rtRes = GetUserData(ref oUser, parametersIn, true, out dInsId, out strCulture, out strAppVersion);

            }
            catch (Exception e)
            {
                rtRes = ResultType.Result_Error_Generic;
                Logger_AddLogException(e, "GetUserData::Exception", LogLevels.logERROR);

            }
            return rtRes;

        }

        private ResultType GetUserData(ref USER oUser, SortedList parametersIn, bool bUpdateSessionTime, out decimal? dInsId, out string strCulture, out string strAppVersion)
        {
            ResultType rtRes = ResultType.Result_OK;
            dInsId = null;
            strCulture = "";
            strAppVersion = "";

            try
            {

                oUser = null;                

                string strUser = parametersIn["u"].ToString();
                string strSessionID = parametersIn["SessionID"].ToString();
                string strPushId = "";
                string strWIFIMAC = "";
                string strIMEI = "";


                if (parametersIn["WIFIMAC"] != null)
                {
                    strWIFIMAC = parametersIn["WIFIMAC"].ToString();
                }
                if (parametersIn["IMEI"] != null)
                {
                    strIMEI = parametersIn["IMEI"].ToString();
                }
                if (parametersIn["pushID"] != null)
                {
                    strPushId = parametersIn["pushID"].ToString();
                }



                if (!customersRepository.GetUserData(ref oUser, strUser))
                {
                    oUser = null;
                    if (!customersRepository.GetUserDataByEmail(ref oUser, strUser))
                    {
                        Logger_AddLogMessage(string.Format("GetUserData: User not found: strUser= {0}", strUser), LogLevels.logERROR);
                        rtRes = ResultType.Result_Error_Invalid_User;
                    }

                }

                if (oUser == null)
                {
                    Logger_AddLogMessage(string.Format("GetUserData: User not found: strUser= {0}", strUser), LogLevels.logERROR);
                    rtRes = ResultType.Result_Error_Invalid_User;
                }
                else if (strSessionID.Length == 0)
                {
                    Logger_AddLogMessage(string.Format("GetUserData: Session not found: strUser= {0}, strSession ={1}", strUser, strSessionID), LogLevels.logERROR);
                    rtRes = ResultType.Result_Error_User_Not_Logged;
                }
                else if (!customersRepository.UpdateSession(ref oUser, strSessionID, strPushId, strWIFIMAC, strIMEI, bUpdateSessionTime, out dInsId, out strCulture, out strAppVersion))
                {
                    Logger_AddLogMessage(string.Format("GetUserData: Session not found: strUser= {0}, strSession ={1}", strUser, strSessionID), LogLevels.logERROR);
                    rtRes = ResultType.Result_Error_User_Not_Logged;

                    if (ConfigurationManager.AppSettings["CheckSessionAndHash"].ToString() == "0")
                    {
                        rtRes = ResultType.Result_OK;
                    }
                }

                if ((rtRes == ResultType.Result_OK)&&(string.IsNullOrEmpty(strAppVersion)))
                {



                    try
                    {
                        if (parametersIn["appvers"] != null)
                            strAppVersion = parametersIn["appvers"].ToString();
                       
                    }
                    catch
                    {
                    }

                    Logger_AddLogMessage(string.Format("GetUserData: Push ID Registry not found (appversion=null) Getting from appvers: strUser= {0}, strSession ={1}, appvers={2}", strUser, strSessionID, strAppVersion), LogLevels.logINFO);

                }



            }
            catch (Exception e)
            {
                rtRes = ResultType.Result_Error_Generic;
                Logger_AddLogException(e, "GetUserData::Exception", LogLevels.logERROR);

            }


            return rtRes;

        }




        private bool SendEmailAndSMS(CUSTOMER_INSCRIPTION custInsc)
        {
            bool bRes = true;
            try
            {

                string culture = custInsc.CUISINS_CULTURE;
                CultureInfo ci = new CultureInfo(culture);
                Thread.CurrentThread.CurrentUICulture = ci;
                Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(ci.Name);

                string url = ConfigurationManager.AppSettings["ConfirmUserData_Step2URL"];
                string urlWithParam = url + "?code=" + custInsc.CUSINS_URL_PARAMETER;
                string strEmailSubject = ResourceExtension.GetLiteral("Activation_EmailHeader");
                string strEmailBody = string.Format(ResourceExtension.GetLiteral("Activation_EmailBody"), urlWithParam, url);
                string strSMS = string.Format(ResourceExtension.GetLiteral("Activation_SMS"), custInsc.CUSINS_ACTIVATION_CODE);


                long lSenderId = infraestructureRepository.SendEmailTo(custInsc.CUSINS_EMAIL, strEmailSubject, strEmailBody);

                if (lSenderId > 0)
                {
                    string strCompleteTelephone = "";
                    if (!string.IsNullOrEmpty(custInsc.CUSINS_MAIN_TEL))
                    {
                        customersRepository.InsertCustomerEmail(custInsc, custInsc.CUSINS_EMAIL, strEmailSubject, strEmailBody, lSenderId);
                        lSenderId = infraestructureRepository.SendSMSTo(Convert.ToInt32(custInsc.CUSINS_MAIN_TEL_COUNTRY), custInsc.CUSINS_MAIN_TEL, strSMS, ref strCompleteTelephone);

                        if (lSenderId > 0)
                        {
                            customersRepository.InsertCustomerSMS(custInsc, strCompleteTelephone, strSMS, lSenderId);
                        }
                    }

                }


            }
            catch
            {
                bRes = false;

            }

            return bRes;
        }


        private bool GenerateXMLGroupHierarchy(IEnumerable<stZone> zones,  ulong ulAppVersion,  ref string strXmlGroupHierarchy, ref string strXmlGISInfo)
        {
            bool bRes = true;
            try
            {
                
                foreach (stZone zone in zones.OrderBy(r=> r.strShowId).ThenBy(r=>r.strDescription))
                {
                    if (zone.level == 0)
                    {
                        strXmlGroupHierarchy += "<zone xmlns:json='http://james.newtonking.com/projects/json' json:Array='true'>";
                    }
                    else
                    {
                        strXmlGroupHierarchy += "<subzone xmlns:json='http://james.newtonking.com/projects/json' json:Array='true'>";
                    }

                    strXmlGroupHierarchy += string.Format("<id>{0}</id>", zone.dID);
                    strXmlGroupHierarchy += string.Format("<lit>{0}</lit>", zone.dLiteralID);
                    strXmlGroupHierarchy += string.Format("<desc>{0}</desc>", zone.strDescription.Trim());

                    if (string.IsNullOrEmpty(zone.strShowId))
                    {
                        strXmlGroupHierarchy += string.Format("<numdesc></numdesc>");
                    }
                    else
                    {
                        strXmlGroupHierarchy += string.Format("<numdesc>{0}</numdesc>", zone.strShowId.Trim());
                    }

                    if (string.IsNullOrEmpty(zone.strColour))
                    {
                        strXmlGroupHierarchy += string.Format("<colour></colour>");
                    }
                    else
                    {
                        strXmlGroupHierarchy += string.Format("<colour>{0}</colour>", zone.strColour.Trim());
                    }

                    if (zone.GroupType == GroupType.OffStreet)
                    {
                        strXmlGroupHierarchy += string.Format("<occupancy>{0}</occupancy>", zone.Occupancy);
                        if (zone.level == 0) strXmlGroupHierarchy += string.Format("<offparking_type>{0}</offparking_type>", zone.ParkingType);
                    }

                    strXmlGISInfo += string.Format("<zone xmlns:json='http://james.newtonking.com/projects/json' json:Array='true' id=\"{0}\">", zone.dID);


                    /*if (ulAppVersion >= _VERSION_999_99_9)
                    {                        
                        foreach (stGPSPolygon gpsPolygon in zone.GPSpolygons)
                        {
                            strXmlGISInfo += string.Format("<polygon json:Array='true' xmlns:json='http://james.newtonking.com/projects/json' num=\"{0}\">", gpsPolygon.iPolNumber);
                            foreach (stGPSPoint gpsPoint in  ((List<stGPSPoint>)gpsPolygon.GPSpolygon))
                            {
                                strXmlGISInfo += string.Format("<pos json:Array='true' ord=\"{0}\" lat=\"{1}\" lon=\"{2}\" />",
                                    gpsPoint.order,
                                    gpsPoint.dLatitude.ToString(CultureInfo.InvariantCulture),
                                    gpsPoint.dLongitude.ToString(CultureInfo.InvariantCulture));

                            }
                            strXmlGISInfo += "</polygon>";
                        }                        
                         
                    }
                    else
                    {*/
                        if (zone.GPSpolygons.Count() > 0)
                        {
                            foreach (stGPSPoint gpsPoint in ((List<stGPSPoint>)((List<stGPSPolygon>)zone.GPSpolygons).First().GPSpolygon))
                            {
                                strXmlGISInfo += string.Format("<pos json:Array='true' ord=\"{0}\" lat=\"{1}\" lon=\"{2}\" />",
                                    gpsPoint.order,
                                    gpsPoint.dLatitude.ToString(CultureInfo.InvariantCulture),
                                    gpsPoint.dLongitude.ToString(CultureInfo.InvariantCulture));

                            }
                        }

                    //}


                    strXmlGISInfo += "</zone>";
                    

                    if (zone.subzones.Count() > 0)
                    {
                        if (!GenerateXMLGroupHierarchy(zone.subzones, ulAppVersion, ref strXmlGroupHierarchy, ref strXmlGISInfo))
                        {
                            bRes = false;
                            break;
                        }

                    }

                    if (zone.level == 0)
                    {
                        strXmlGroupHierarchy += "</zone>";
                    }
                    else
                    {
                        strXmlGroupHierarchy += "</subzone>";
                    }


                }


            }
            catch (Exception e)
            {
                bRes = false;
                Logger_AddLogException(e, string.Format("GenerateXMLGroupHierarchy::Error: "), LogLevels.logERROR);
                

            }

            return bRes;

        }



        private bool GenerateXMLTariffs(IEnumerable<stTariff> tariffs, ref string strXmlTariff)
        {
            bool bRes = true;
            try
            {


               

                foreach (stTariff tariff in tariffs.OrderBy(r=> r.strDescription))
                {
                    strXmlTariff += "<ad json:Array='true'>";

                    strXmlTariff += string.Format("<id>{0}</id>", tariff.dID);
                    strXmlTariff += string.Format("<lit>{0}</lit>", tariff.dLiteralID);
                    strXmlTariff += string.Format("<desc>{0}</desc>", tariff.strDescription);
                    strXmlTariff += string.Format("<sel>{0}</sel>", tariff.bUserSelectable ? 1 : 0);
                    strXmlTariff += "<szs xmlns:json='http://james.newtonking.com/projects/json'>";
                    foreach (decimal zone in tariff.zones)
                    {
                        strXmlTariff += string.Format("<sz json:Array='true'>{0}</sz>", zone);
                    }

                    strXmlTariff += "</szs>";
                    strXmlTariff += "</ad>";

                }


            }
            catch (Exception e)
            {
                bRes = false;
                Logger_AddLogException(e, string.Format("GenerateXMLTariffs::Error: "), LogLevels.logERROR);
                

            }

            return bRes;

        }

        bool  GetUserTicks(USER oUser,INSTALLATION oInstallation, DateTime dtinstDateTime, ref SortedList parametersOut)                                                            
        {
            bool bRes = true;
            parametersOut["userMSG"] ="";

            try
            {
                ThirdPartyFine oThirdPartyFine = new ThirdPartyFine();

                switch ((FineWSSignatureType)oInstallation.INS_FINE_WS_SIGNATURE_TYPE)
                {                        
                    case FineWSSignatureType.fst_gtechna:
                        {
                            //bRes = oThirdPartyFine.GtechnaQueryListOfFines(oUser, oInstallation, dtinstDateTime, ref parametersOut);
                        }
                        break;
                    case FineWSSignatureType.fst_standard:
                        bRes = false;
                        break;
                    case FineWSSignatureType.fst_eysa:
                        {
                            bRes = oThirdPartyFine.EysaThirdPartyQueryListOfFines(oUser, oInstallation, dtinstDateTime, ref parametersOut);
                            bRes = true;
                        }
                        break;
                    case FineWSSignatureType.fst_internal:
                        bRes = false;
                        break;
                    case FineWSSignatureType.fst_test:
                        {
                            Random rand = new Random();
                            parametersOut["userMSG"] = string.Format("<userticks xmlns:json='http://james.newtonking.com/projects/json'>" +
                                                     "<usertick json:Array='true'>" +
                                                     "<f>{0}2</f>" +
                                                     "<d>{1}</d>" +
                                                     "<lp>{2}</lp>" +
                                                     "<q>{3}</q>" +
                                                     "<df>{4}</df>" +
                                                     "<ta>{5} </ta>" +
                                                     "<dta>{6}</dta>" +
                                                     "</usertick>" +
                                                     "</userticks>",
                                                     rand.Next(100000, 999999).ToString(),
                                                     dtinstDateTime.Subtract(new TimeSpan(0, 30, 0)).ToString("HHmmssddMMyy"),
                                                     oUser.USER_PLATEs.Where(r => r.USRP_ENABLED == 1).First().USRP_PLATE,
                                                     300,
                                                     dtinstDateTime.Add(new TimeSpan(2, 30, 0)).ToString("HHmmssddMMyy"),
                                                     "0.5.2",
                                                     "Test Article Description");


                            bRes = true;
                        }
                        break;
                    default:
                        bRes = false;
                        break;

                }

            }
            catch (Exception e)
            {
                bRes = false;
                Logger_AddLogException(e, "GetUserTicks::Exception", LogLevels.logERROR);

            }


            return bRes;
        }




        private string CalculateGtechnaWSHash(string strMACKey, string strInput)
        {
            string strRes = "";
            int iKeyLength = 64;
            byte[] normMACKey = null;
            HMACSHA256 oMACsha256 = null;

            try
            {

                byte[] keyBytes = System.Text.Encoding.UTF8.GetBytes(strMACKey);
                normMACKey = new byte[iKeyLength];
                int iSum = 0;

                for (int i = 0; i < iKeyLength; i++)
                {
                    if (i < keyBytes.Length)
                    {
                        iSum += keyBytes[i];
                    }
                    else
                    {
                        iSum += i;
                    }
                    normMACKey[i] = Convert.ToByte((iSum * BIG_PRIME_NUMBER) % (Byte.MaxValue + 1));
                   
                }

                oMACsha256 = new HMACSHA256(normMACKey);


                byte[] inputBytes = System.Text.Encoding.UTF8.GetBytes(strInput);
                byte[] hash =  oMACsha256.ComputeHash(inputBytes);;

                if (hash.Length >= 8)
                {
                    StringBuilder sb = new StringBuilder();
                    for (int i = hash.Length - 8; i < hash.Length; i++)
                    {
                        sb.Append(hash[i].ToString("X2"));
                    }
                    strRes = sb.ToString();
                }

            }
            catch (Exception e)
            {
                Logger_AddLogException(e, "CalculateWSHash::Exception", LogLevels.logERROR);
            }

            return strRes;
        }


        private string CalculateEysaWSHash(string strMACKey, string strInput)
        {
            string strRes = "";
            int iKeyLength = 64;
            byte[] normMACKey = null;
            HMACSHA256 oMACsha256 = null;

            try
            {

                byte[] keyBytes = System.Text.Encoding.UTF8.GetBytes(strMACKey);
                normMACKey = new byte[iKeyLength];
                int iSum = 0;

                for (int i = 0; i < iKeyLength; i++)
                {
                    if (i < keyBytes.Length)
                    {
                        iSum += keyBytes[i];
                    }
                    else
                    {
                        iSum += i;
                    }
                    normMACKey[i] = Convert.ToByte((iSum * BIG_PRIME_NUMBER) % (Byte.MaxValue + 1));

                }

                oMACsha256 = new HMACSHA256(normMACKey);


                byte[] inputBytes = System.Text.Encoding.UTF8.GetBytes(strInput);
                byte[] hash = oMACsha256.ComputeHash(inputBytes); ;

                if (hash.Length >= 8)
                {
                    StringBuilder sb = new StringBuilder();
                    for (int i = hash.Length - 8; i < hash.Length; i++)
                    {
                        sb.Append(hash[i].ToString("X2"));
                    }
                    strRes = sb.ToString();
                }

            }
            catch (Exception e)
            {
                Logger_AddLogException(e, "CalculateEysaWSHash::Exception", LogLevels.logERROR);
            }

            return strRes;
        }


        private string CalculateStandardWSHash(string strMACKey, string strInput)
        {
            string strRes = "";
            int iKeyLength = 64;
            byte[] normMACKey = null;
            HMACSHA256 oMACsha256 = null;

            try
            {

                byte[] keyBytes = System.Text.Encoding.UTF8.GetBytes(strMACKey);
                normMACKey = new byte[iKeyLength];
                int iSum = 0;

                for (int i = 0; i < iKeyLength; i++)
                {
                    if (i < keyBytes.Length)
                    {
                        iSum += keyBytes[i];
                    }
                    else
                    {
                        iSum += i;
                    }
                    normMACKey[i] = Convert.ToByte((iSum * BIG_PRIME_NUMBER) % (Byte.MaxValue + 1));

                }

                oMACsha256 = new HMACSHA256(normMACKey);


                byte[] inputBytes = System.Text.Encoding.UTF8.GetBytes(strInput);
                byte[] hash = oMACsha256.ComputeHash(inputBytes); ;

                if (hash.Length >= 8)
                {
                    StringBuilder sb = new StringBuilder();
                    for (int i = hash.Length - 8; i < hash.Length; i++)
                    {
                        sb.Append(hash[i].ToString("X2"));
                    }
                    strRes = sb.ToString();
                }

            }
            catch (Exception e)
            {
                Logger_AddLogException(e, "CalculateStandardWSHash::Exception", LogLevels.logERROR);
            }

            return strRes;
        }


        ResultType Convert_ResultTypeStandardParkingWS_TO_ResultType(ResultTypeStandardParkingWS oExtResultType)
        {
            ResultType rtResultType = ResultType.Result_Error_Generic;

            switch (oExtResultType)
            {
                case ResultTypeStandardParkingWS.ResultSP_OK:
                    rtResultType = ResultType.Result_OK;
                    break;
                case ResultTypeStandardParkingWS.ResultSP_Error_InvalidAuthenticationHash:
                    rtResultType = ResultType.Result_Error_InvalidAuthenticationHash;
                    break;
                case ResultTypeStandardParkingWS.ResultSP_Error_ParkingMaximumTimeUsed:
                    rtResultType = ResultType.Result_Error_ParkingMaximumTimeUsed;
                    break;
                case ResultTypeStandardParkingWS.ResultSP_Error_NotWaitedReentryTime:
                    rtResultType = ResultType.Result_Error_NotWaitedReentryTime;
                    break;
                case ResultTypeStandardParkingWS.ResultSP_Error_RefundNotPossible:
                    rtResultType = ResultType.Result_Error_RefundNotPossible;
                    break;
                case ResultTypeStandardParkingWS.ResultSP_Error_Fine_Number_Not_Found:
                    rtResultType = ResultType.Result_Error_Fine_Number_Not_Found;
                    break;
                case ResultTypeStandardParkingWS.ResultSP_Error_Fine_Type_Not_Payable:
                    rtResultType = ResultType.Result_Error_Fine_Type_Not_Payable;
                    break;
                case ResultTypeStandardParkingWS.ResultSP_Error_Fine_Payment_Period_Expired:
                    rtResultType = ResultType.Result_Error_Fine_Payment_Period_Expired;
                    break;
                case ResultTypeStandardParkingWS.ResultSP_Error_Fine_Number_Already_Paid:
                    rtResultType = ResultType.Result_Error_Fine_Number_Already_Paid;
                    break;
                case ResultTypeStandardParkingWS.ResultSP_Error_Generic:
                    rtResultType = ResultType.Result_Error_Generic;
                    break;
                case ResultTypeStandardParkingWS.ResultSP_Error_Invalid_Input_Parameter:
                    rtResultType = ResultType.Result_Error_Invalid_Input_Parameter;
                    break;
                case ResultTypeStandardParkingWS.ResultSP_Error_Missing_Input_Parameter:
                    rtResultType = ResultType.Result_Error_Missing_Input_Parameter;
                    break;
                case ResultTypeStandardParkingWS.ResultSP_Error_Invalid_City:
                    rtResultType = ResultType.Result_Error_Invalid_Input_Parameter;
                    break;
                case ResultTypeStandardParkingWS.ResultSP_Error_Invalid_Group:
                    rtResultType = ResultType.Result_Error_Invalid_Input_Parameter;
                    break;
                case ResultTypeStandardParkingWS.ResultSP_Error_Invalid_Tariff:
                    rtResultType = ResultType.Result_Error_Invalid_Input_Parameter;
                    break;
                case ResultTypeStandardParkingWS.ResultSP_Error_Tariff_Not_Available:
                    rtResultType = ResultType.Result_Error_Tariffs_Not_Available;
                    break;
                case ResultTypeStandardParkingWS.ResultSP_Error_InvalidExternalProvider:
                    rtResultType = ResultType.Result_Error_Invalid_Input_Parameter;
                    break;
                case ResultTypeStandardParkingWS.ResultSP_Error_OperationAlreadyExist:
                    rtResultType = ResultType.Result_OK;
                    break;
                default:
                    break;
            }


            return rtResultType;
        }

        private ResultType Convert_integraMobileExternalWSResultType_TO_ResultType(integraMobile.ExternalWS.ResultType oExtResultType)
        {
            ResultType rtResultType = ResultType.Result_Error_Generic;

            switch (oExtResultType)
            {
                case integraMobile.ExternalWS.ResultType.Result_OK:
                    rtResultType = ResultType.Result_OK;
                    break;
                case integraMobile.ExternalWS.ResultType.Result_Error_InvalidAuthenticationHash:
                    rtResultType = ResultType.Result_Error_InvalidAuthenticationHash;
                    break;
                case integraMobile.ExternalWS.ResultType.Result_Error_Invalid_Input_Parameter:
                    rtResultType = ResultType.Result_Error_Invalid_Input_Parameter;
                    break;
                case integraMobile.ExternalWS.ResultType.Result_Error_Missing_Input_Parameter:
                    rtResultType = ResultType.Result_Error_Missing_Input_Parameter;
                    break;
                case integraMobile.ExternalWS.ResultType.Result_Error_Generic:
                    rtResultType = ResultType.Result_Error_Generic;
                    break;
                case integraMobile.ExternalWS.ResultType.Result_Error_OperationAlreadyClosed:
                    rtResultType = ResultType.Result_Error_OperationAlreadyClosed;
                    break;
                case integraMobile.ExternalWS.ResultType.Result_Error_OperationEntryAlreadyExists:
                    rtResultType = ResultType.Result_Error_OperationEntryAlreadyExists;
                    break;
                case integraMobile.ExternalWS.ResultType.Result_Error_Recharge_Failed:
                    rtResultType = ResultType.Result_Error_Recharge_Failed;
                    break;
                case integraMobile.ExternalWS.ResultType.Result_Error_Recharge_Not_Possible:
                    rtResultType = ResultType.Result_Error_Recharge_Not_Possible;
                    break;
                case integraMobile.ExternalWS.ResultType.Result_Error_Invalid_Payment_Mean:
                    rtResultType = ResultType.Result_Error_Invalid_Payment_Mean;
                    break;
                case integraMobile.ExternalWS.ResultType.Result_Error_Not_Enough_Balance:
                    rtResultType = ResultType.Result_Error_Not_Enough_Balance;
                    break;
                case integraMobile.ExternalWS.ResultType.Result_Toll_is_Not_from_That_installation:
                    rtResultType = ResultType.Result_Toll_is_Not_from_That_installation;
                    break;

                default:
                    break;
            }
            return rtResultType;
        }


        private int ChangeQuantityFromCurToUserCur(int iQuantity, string strISOCode, USER oUser, out double dChangeApplied, out double dChangeFee)
        {
            int iResult = iQuantity;
            dChangeApplied = 1;
            dChangeFee = 0;


            try
            {

                if (strISOCode != oUser.CURRENCy.CUR_ISO_CODE)
                {
                    double dConvertedValue = CCurrencyConvertor.ConvertCurrency(Convert.ToDouble(iQuantity),
                                              strISOCode,
                                              oUser.CURRENCy.CUR_ISO_CODE, out dChangeApplied);
                    if (dConvertedValue < 0)
                    {
                        Logger_AddLogMessage(string.Format("ChangeQuantityFromCurToUserCur::Error Converting {0} {1} to {2} ", iQuantity, strISOCode, oUser.CURRENCy.CUR_ISO_CODE), LogLevels.logERROR);
                        return ((int)ResultType.Result_Error_Generic);
                    }

                    dChangeFee = Convert.ToDouble(infraestructureRepository.GetChangeFeePerc()) * dConvertedValue / 100;
                    iResult = Convert.ToInt32(dConvertedValue - dChangeFee + 0.5);
                }

            }
            catch (Exception e)
            {
                Logger_AddLogException(e, "ChangeQuantityFromCurToUserCur::Exception", LogLevels.logERROR);
            }

            return iResult;
        }

        private int ChangeQuantityFromInstallationCurToUserCur(int iQuantity, INSTALLATION oInstallation, USER oUser, out double dChangeApplied, out double dChangeFee)
        {
            int iResult = iQuantity;
            dChangeApplied = 1;
            dChangeFee = 0;


            try
            {

                if (oInstallation.INS_CUR_ID != oUser.USR_CUR_ID)
                {
                    double dConvertedValue = CCurrencyConvertor.ConvertCurrency(Convert.ToDouble(iQuantity),
                                              oInstallation.CURRENCy.CUR_ISO_CODE,
                                              oUser.CURRENCy.CUR_ISO_CODE, out dChangeApplied);
                    if (dConvertedValue < 0)
                    {
                        Logger_AddLogMessage(string.Format("ChangeQuantityFromInstallationCurToUserCur::Error Converting {0} {1} to {2} ", iQuantity, oInstallation.CURRENCy.CUR_ISO_CODE, oUser.CURRENCy.CUR_ISO_CODE), LogLevels.logERROR);
                        return ((int)ResultType.Result_Error_Generic);
                    }

                    dChangeFee = Convert.ToDouble(infraestructureRepository.GetChangeFeePerc()) * dConvertedValue / 100;
                    iResult = Convert.ToInt32(dConvertedValue - dChangeFee + 0.5);
                }

            }
            catch (Exception e)
            {
                Logger_AddLogException(e, "ChangeQuantityFromInstallationCurToUserCur::Exception", LogLevels.logERROR);
            }

            return iResult;
        }

        private int ChangeQuantityFromInstallationCurToUserCur(int iQuantity, INSTALLATION oInstallation, USER oUser)
        {
            int iResult = iQuantity;
            double dChangeApplied = 1;
            double dChangeFee = 0;


            try
            {

                iResult = ChangeQuantityFromInstallationCurToUserCur(iQuantity, oInstallation, oUser, out dChangeApplied, out dChangeFee);


            }
            catch (Exception e)
            {
                Logger_AddLogException(e, "ChangeQuantityFromInstallationCurToUserCur::Exception", LogLevels.logERROR);
            }

            return iResult;
        }




        private int ChangeQuantityFromInstallationCurToUserCur(int iQuantity, double dChangeToApply, INSTALLATION oInstallation, USER oUser, out double dChangeFee)
        {
            int iResult = iQuantity;
            dChangeFee = 0;

            try
            {

                if (oInstallation.INS_CUR_ID != oUser.USR_CUR_ID)
                {
                    double dConvertedValue = Convert.ToDouble(iQuantity) * dChangeToApply;
                    dConvertedValue = Math.Round(dConvertedValue, 4);

                    dChangeFee = Convert.ToDouble(infraestructureRepository.GetChangeFeePerc()) * dConvertedValue / 100;
                    //iResult = Convert.ToInt32(dConvertedValue - dChangeFee + 0.5);
                    iResult = Convert.ToInt32(Math.Round(dConvertedValue - dChangeFee, MidpointRounding.AwayFromZero));
                }

            }
            catch (Exception e)
            {
                Logger_AddLogException(e, "ChangeQuantityFromInstallationCurToUserCur::Exception", LogLevels.logERROR);
            }

            return iResult;
        }

        private int ChangeQuantityFromUserCurToUserCur(int iQuantity, double dChangeToApply, USER oSrcUser, USER oDstUser, out double dChangeFee)
        {
            int iResult = iQuantity;
            dChangeFee = 0;

            try
            {

                if (oSrcUser.USR_CUR_ID != oDstUser.USR_CUR_ID)
                {
                    double dConvertedValue = Convert.ToDouble(iQuantity) * dChangeToApply;
                    dConvertedValue = Math.Round(dConvertedValue, 4);

                    dChangeFee = Convert.ToDouble(infraestructureRepository.GetChangeFeePerc()) * dConvertedValue / 100;
                    //iResult = Convert.ToInt32(dConvertedValue - dChangeFee + 0.5);
                    iResult = Convert.ToInt32(Math.Round(dConvertedValue - dChangeFee, MidpointRounding.AwayFromZero));
                }

            }
            catch (Exception e)
            {
                Logger_AddLogException(e, "ChangeQuantityFromUserCurToUserCur::Exception", LogLevels.logERROR);
            }

            return iResult;
        }

        private double GetChangeToApplyFromInstallationCurToUserCur(INSTALLATION oInstallation, USER oUser)
        {
            double dResult = 1.0;


            try
            {

                if (oInstallation.INS_CUR_ID != oUser.USR_CUR_ID)
                {
                    dResult = CCurrencyConvertor.GetChangeToApply(oInstallation.CURRENCy.CUR_ISO_CODE,
                                              oUser.CURRENCy.CUR_ISO_CODE);
                    if (dResult < 0)
                    {
                        Logger_AddLogMessage(string.Format("GetChangeToApplyFromInstallationCurToUserCur::Error getting change from {0} to {1} ", oInstallation.CURRENCy.CUR_ISO_CODE, oUser.CURRENCy.CUR_ISO_CODE), LogLevels.logERROR);
                        return ((int)ResultType.Result_Error_Generic);
                    }
                }

            }
            catch (Exception e)
            {
                dResult = -1.0;
                Logger_AddLogException(e, "GetChangeToApplyFromInstallationCurToUserCur::Exception", LogLevels.logERROR);
            }

            return dResult;
        }

        private double GetChangeToApplyFromUserCurToUserCur(USER oSrcUser, USER oDstUser)
        {
            double dResult = 1.0;


            try
            {

                if (oSrcUser.USR_CUR_ID  != oDstUser.USR_CUR_ID)
                {
                    dResult = CCurrencyConvertor.GetChangeToApply(oSrcUser.CURRENCy.CUR_ISO_CODE,
                                                                  oDstUser.CURRENCy.CUR_ISO_CODE);
                    if (dResult < 0)
                    {
                        Logger_AddLogMessage(string.Format("GetChangeToApplyFromUserCurToUserCur::Error getting change from {0} to {1} ", oSrcUser.CURRENCy.CUR_ISO_CODE, oDstUser.CURRENCy.CUR_ISO_CODE), LogLevels.logERROR);
                        return ((int)ResultType.Result_Error_Generic);
                    }
                }

            }
            catch (Exception e)
            {
                dResult = -1.0;
                Logger_AddLogException(e, "GetChangeToApplyFromUserCurToUserCur::Exception", LogLevels.logERROR);
            }

            return dResult;
        }

        private ResultType ChargeFinePayment(string strFineNumber,double dChangeToApply, int iQuantity, DateTime dtPaymentDate, string strPlate, 
                                             string strArticleType, string strArticleDescription,INSTALLATION oInstallation,
                                             ref USER oUser, int iOSType, decimal? dLatitude, decimal? dLongitude, string strAppVersion, decimal? dGrpId,
                                             decimal dPercVAT1, decimal dPercVAT2, decimal dPercFEE, int iPercFEETopped, int iFixedFEE,
                                             int iPartialVAT1, int iPartialPercFEE, int iPartialFixedFEE, int iTotalQuantity, string strSector, string strEnforcUser,
                                             ref SortedList parametersOut, out int iCurrencyChargedQuantity, out decimal dTicketPaymentID, 
                                             out DateTime? dtUTCInsertionDate,out decimal? dRechargeId, out int? iBalanceAfterRecharge, out bool bRestoreBalanceInCaseOfRefund)
        {
            ResultType rtRes = ResultType.Result_OK;
            iCurrencyChargedQuantity = 0;
            double dChangeFee = 0;
            decimal dBalanceCurID=oUser.CURRENCy.CUR_ID;
            dTicketPaymentID = -1;
            dRechargeId = null;
            bRestoreBalanceInCaseOfRefund = true;
            PaymentSuscryptionType suscriptionType = PaymentSuscryptionType.pstPrepay;
            iBalanceAfterRecharge = null;
            dtUTCInsertionDate = null;


            try
            {

                parametersOut["autorecharged"] = "0";
                bool bAllowNoPaymentMethod = (infraestructureRepository.GetParameterValue("AllowNoPaymentMethod") == "1");

                iCurrencyChargedQuantity = ChangeQuantityFromInstallationCurToUserCur(iTotalQuantity /*iQuantity*/, dChangeToApply, oInstallation, oUser, out dChangeFee);

                if (iCurrencyChargedQuantity < 0)
                {
                    rtRes = (ResultType)iCurrencyChargedQuantity;
                    Logger_AddLogMessage(string.Format("ChargeFinePayment::Error Changing Quantity {0} ", rtRes.ToString()), LogLevels.logERROR);
                    return rtRes;
                }


                if ((oUser.USR_BALANCE > 0) ||
                    (oUser.USR_SUSCRIPTION_TYPE == (int)PaymentSuscryptionType.pstPrepay))
                {

                    int iNewBalance = oUser.USR_BALANCE - iCurrencyChargedQuantity;


                    if (iNewBalance < 0)
                    {

                        if ((oUser.CUSTOMER_PAYMENT_MEAN != null) &&
                        (oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_ENABLED == 1) &&
                        (oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_VALID == 1))
                        {


                            if ((oUser.USR_SUSCRIPTION_TYPE == (int)PaymentSuscryptionType.pstPrepay) &&
                                (oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AUTOMATIC_RECHARGE == 1) &&
                                (oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AMOUNT_TO_RECHARGE > 0))
                            {

                                int iQuantityToRecharge = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AMOUNT_TO_RECHARGE.Value;
                                if (Math.Abs(iNewBalance) > oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AMOUNT_TO_RECHARGE.Value)
                                {
                                    iQuantityToRecharge = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AMOUNT_TO_RECHARGE.Value + Math.Abs(iNewBalance);
                                }

                                rtRes = PerformPrepayRecharge(ref oUser, iOSType, true, iQuantityToRecharge , false, dLatitude, dLongitude, strAppVersion, 
                                                            PaymentMeanRechargeCreationType.pmrctAutomaticRecharge,out dRechargeId);
                                if (rtRes != ResultType.Result_OK)
                                {
                                    Logger_AddLogMessage(string.Format("ChargeFinePayment::Error AutoRecharging {0} ", rtRes.ToString()), LogLevels.logERROR);
                                    return rtRes;
                                }
                                iBalanceAfterRecharge = oUser.USR_BALANCE;
                                parametersOut["autorecharged"] = "1";
                            }
                            else if ((oUser.USR_SUSCRIPTION_TYPE == (int)PaymentSuscryptionType.pstPerTransaction))
                            {
                                rtRes = PerformPrepayRecharge(ref oUser, iOSType, false,-iNewBalance, false, dLatitude, dLongitude, strAppVersion, 
                                                            PaymentMeanRechargeCreationType.pmrctRegularRecharge,out dRechargeId);
                                if (rtRes != ResultType.Result_OK)
                                {
                                    Logger_AddLogMessage(string.Format("ChargeFinePayment::Error Charging Rest Of transaction {0} ", rtRes.ToString()), LogLevels.logERROR);
                                    return rtRes;
                                }
                                iBalanceAfterRecharge = oUser.USR_BALANCE;
                                parametersOut["autorecharged"] = "1";
                            }
                            else
                            {
                                rtRes = ResultType.Result_Error_Not_Enough_Balance;
                                Logger_AddLogMessage(string.Format("ChargeFinePayment::Error AutoRecharging {0} ", rtRes.ToString()), LogLevels.logERROR);
                                return rtRes;
                            }
                        }
                        else
                        {
                            if ((bAllowNoPaymentMethod) && (oUser.USR_SUSCRIPTION_TYPE == (int)PaymentSuscryptionType.pstPrepay))
                            {
                                rtRes = ResultType.Result_Error_Not_Enough_Balance;
                                Logger_AddLogMessage(string.Format("ChargeFinePayment::{0} ", rtRes.ToString()), LogLevels.logERROR);
                                return rtRes;
                            }
                            else
                            {
                                rtRes = ResultType.Result_Error_Invalid_Payment_Mean;
                                Logger_AddLogMessage(string.Format("ChargeFinePayment::{0} ", rtRes.ToString()), LogLevels.logERROR);
                                return rtRes;
                            }

                        }

                    }
                }
                else if ((oUser.USR_BALANCE == 0) &&
                   (oUser.USR_SUSCRIPTION_TYPE == (int)PaymentSuscryptionType.pstPerTransaction))
                {
                    //Balance is 0 and suscription type is pertransaction

                    if ((oUser.CUSTOMER_PAYMENT_MEAN != null) &&
                        (oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_ENABLED == 1) &&
                        (oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_VALID == 1))
                    {
                        rtRes = PerformPerTransactionRecharge(ref oUser, iOSType, iCurrencyChargedQuantity, oUser.CURRENCy.CUR_ID, dLatitude, dLongitude, strAppVersion, out dRechargeId);
                        if (rtRes != ResultType.Result_OK)
                        {
                            Logger_AddLogMessage(string.Format("ChargeFinePayment::Error charging per transaction value {0} ", rtRes.ToString()), LogLevels.logERROR);
                            return rtRes;
                        }

                        //bRestoreBalanceInCaseOfRefund = false;
                        suscriptionType = PaymentSuscryptionType.pstPerTransaction;

                    }
                    else
                    {
                        rtRes = ResultType.Result_Error_Invalid_Payment_Mean;
                        Logger_AddLogMessage(string.Format("ChargeFinePayment::{0} ", rtRes.ToString()), LogLevels.logERROR);
                        return rtRes;
                    }

                }
                else
                {
                    if ((bAllowNoPaymentMethod) && (oUser.USR_SUSCRIPTION_TYPE == (int)PaymentSuscryptionType.pstPrepay))
                    {
                        rtRes = ResultType.Result_Error_Not_Enough_Balance;
                        Logger_AddLogMessage(string.Format("ChargeFinePayment::{0} ", rtRes.ToString()), LogLevels.logERROR);
                        return rtRes;
                    }
                    else
                    {
                        rtRes = ResultType.Result_Error_Invalid_Payment_Mean;
                        Logger_AddLogMessage(string.Format("ChargeFinePayment::{0} ", rtRes.ToString()), LogLevels.logERROR);
                        return rtRes;
                    }

                }


                //bool bSubstractFromBalance = bRestoreBalanceInCaseOfRefund;

                DateTime? dtUTCTime = geograficAndTariffsRepository.ConvertInstallationDateTimeToUTC(oInstallation.INS_ID, dtPaymentDate);

     

                bool bConfirmedWs1 = true;
                bool bConfirmedWs2 = true;
                bool bConfirmedWs3 = true;
                if ((oInstallation.INS_OPT_FINECONFIRM_MODE ?? 0) == 1)
                {
                    bConfirmedWs1 = false;
                    bConfirmedWs2 = false;
                    bConfirmedWs3 = false;
                }

             





                if (!customersRepository.ChargeFinePayment(ref oUser,
                                                          iOSType,
                                                          true,
                                                          suscriptionType,
                                                          oInstallation.INS_ID,
                                                          dtPaymentDate,
                                                          dtUTCTime.Value,
                                                          strPlate,
                                                          strFineNumber,
                                                          string.Format("{0} ({1})", strArticleType, strArticleDescription),
                                                          iQuantity,                                                         
                                                          oInstallation.INS_CUR_ID,
                                                          dBalanceCurID,
                                                          dChangeToApply,
                                                          dChangeFee,
                                                          iCurrencyChargedQuantity,
                                                          dPercVAT1, dPercVAT2, iPartialVAT1, dPercFEE, iPercFEETopped, iPartialPercFEE, iFixedFEE, iPartialFixedFEE, iTotalQuantity,
                                                          dRechargeId,
                                                          bConfirmedWs1,bConfirmedWs2, bConfirmedWs3,
                                                          dLatitude, dLongitude,strAppVersion,
                                                          dGrpId,
                                                          strSector, 
                                                          strEnforcUser,
                                                          out dTicketPaymentID,
                                                          out dtUTCInsertionDate))
                {

                    Logger_AddLogMessage(string.Format("ChargeFinePayment::Error Inserting Ticket Payment {0} ", strFineNumber), LogLevels.logERROR);
                    return ResultType.Result_Error_Generic;
                }



                parametersOut["newbal"] = oUser.USR_BALANCE;
               

            }
            catch (Exception e)
            {
                Logger_AddLogException(e, "ChargeFinePayment::Exception", LogLevels.logERROR);
            }


            return rtRes;
        }








        private ResultType ChargeParkingOperation(ChargeOperationsType operationType, string strPlate, double dChangeToApply, int iQuantity, int iTime, 
                                                 int iRealQuantity, int iTimeBalUsed,DateTime dtPaymentDate, DateTime dtInitialDate,DateTime dtEndDate, decimal dArticleDef, STREET_SECTION oStreetSection,GROUP oGroup,
                                                ref USER oUser, int iOSType, decimal dMobileSessionId, decimal? dLatitude, decimal? dLongitude, string strAppVersion, decimal? dAuthId, 
                                                decimal dPercVAT1, decimal dPercVAT2, decimal dPercFEE, int iPercFEETopped, int iFixedFEE, decimal dPercBonus,
                                                int iPartialVAT1, int iPartialPercFEE, int iPartialFixedFEE, int iPartialBonusFEE, int iTotalQuantity,
                                                string sBonusId, string sBonusMarca, int? iBonusType,string strPlaceString,int iPostpay,
                                                ref SortedList parametersOut, out int iCurrencyChargedQuantity, out decimal dOperationID,
                                                out DateTime? dtUTCInsertionDate, out decimal? dRechargeId, out int? iBalanceAfterRecharge, out bool bRestoreBalanceInCaseOfRefund)
        {
            ResultType rtRes = ResultType.Result_OK;
            iCurrencyChargedQuantity = 0;
            double dChangeFee = 0;
            decimal dBalanceCurID = oUser.CURRENCy.CUR_ID;
            dOperationID = -1;
            dRechargeId = null;
            bRestoreBalanceInCaseOfRefund = true;
            PaymentSuscryptionType suscriptionType = PaymentSuscryptionType.pstPrepay;
            iBalanceAfterRecharge = null;
            dtUTCInsertionDate = null;

            try
            {
                bool bAllowNoPaymentMethod = (infraestructureRepository.GetParameterValue("AllowNoPaymentMethod") == "1");
                parametersOut["autorecharged"] = "0";
                iCurrencyChargedQuantity = ChangeQuantityFromInstallationCurToUserCur(iTotalQuantity /*iQuantity*/, dChangeToApply, oGroup.INSTALLATION, oUser, out dChangeFee);

                if (iCurrencyChargedQuantity < 0)
                {
                    rtRes = (ResultType)iCurrencyChargedQuantity;
                    Logger_AddLogMessage(string.Format("ChargeParkingOperation::Error Changing quantity {0} ", rtRes.ToString()), LogLevels.logERROR);
                    return rtRes;
                }


                
                if ((oUser.USR_BALANCE > 0) ||
                    (oUser.USR_SUSCRIPTION_TYPE == (int)PaymentSuscryptionType.pstPrepay))
                {
                    int iNewBalance = oUser.USR_BALANCE - iCurrencyChargedQuantity;


                    if (iNewBalance < 0)
                    {

                        if ((oUser.CUSTOMER_PAYMENT_MEAN != null) &&
                        (oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_ENABLED == 1) &&
                        (oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_VALID == 1))
                        {


                            if ((oUser.USR_SUSCRIPTION_TYPE == (int)PaymentSuscryptionType.pstPrepay) &&
                                (oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AUTOMATIC_RECHARGE == 1) &&
                                (oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AMOUNT_TO_RECHARGE > 0))
                            {

                                int iQuantityToRecharge = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AMOUNT_TO_RECHARGE.Value;
                                if (Math.Abs(iNewBalance) > oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AMOUNT_TO_RECHARGE.Value)
                                {
                                    iQuantityToRecharge = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AMOUNT_TO_RECHARGE.Value+Math.Abs(iNewBalance);
                                }

                                rtRes = PerformPrepayRecharge(ref oUser, iOSType,  true, iQuantityToRecharge, false, dLatitude, dLongitude, strAppVersion,
                                        PaymentMeanRechargeCreationType.pmrctAutomaticRecharge,out dRechargeId);
                                if (rtRes != ResultType.Result_OK)
                                {
                                    Logger_AddLogMessage(string.Format("ChargeParkingOperation::Error AutoRecharging {0} ", rtRes.ToString()), LogLevels.logERROR);
                                    return rtRes;
                                }

                                iBalanceAfterRecharge = oUser.USR_BALANCE;
                                parametersOut["autorecharged"] = "1";
                            }
                            else if ((oUser.USR_SUSCRIPTION_TYPE == (int)PaymentSuscryptionType.pstPerTransaction))
                            {
                                rtRes = PerformPrepayRecharge(ref oUser, iOSType, false, -iNewBalance, false, dLatitude, dLongitude, strAppVersion, 
                                                            PaymentMeanRechargeCreationType.pmrctRegularRecharge,out dRechargeId);
                                if (rtRes != ResultType.Result_OK)
                                {
                                    Logger_AddLogMessage(string.Format("ChargeParkingOperation::Error Charging Rest Of transaction {0} ", rtRes.ToString()), LogLevels.logERROR);
                                    return rtRes;
                                }
                                iBalanceAfterRecharge = oUser.USR_BALANCE;
                                parametersOut["autorecharged"] = "1";
                            }
                            else
                            {
                                rtRes = ResultType.Result_Error_Not_Enough_Balance;
                                Logger_AddLogMessage(string.Format("ChargeParkingOperation::Error AutoRecharging {0} ", rtRes.ToString()), LogLevels.logERROR);
                                return rtRes;
                            }
                        }
                        else
                        {
                            if ((bAllowNoPaymentMethod)&&(oUser.USR_SUSCRIPTION_TYPE == (int)PaymentSuscryptionType.pstPrepay))
                            {
                                rtRes = ResultType.Result_Error_Not_Enough_Balance;
                                Logger_AddLogMessage(string.Format("ChargeParkingOperation::{0} ", rtRes.ToString()), LogLevels.logERROR);
                                return rtRes;
                            }
                            else
                            {
                                rtRes = ResultType.Result_Error_Invalid_Payment_Mean;
                                Logger_AddLogMessage(string.Format("ChargeParkingOperation::{0} ", rtRes.ToString()), LogLevels.logERROR);
                                return rtRes;
                            }

                        }

                    }
                }
                else if ((oUser.USR_BALANCE == 0) &&
                 (oUser.USR_SUSCRIPTION_TYPE == (int)PaymentSuscryptionType.pstPerTransaction))
                {
                    //Balance is 0 and suscription type is pertransaction

                    if ((iCurrencyChargedQuantity > 0) || (!bAllowNoPaymentMethod))
                    {

                        if ((oUser.CUSTOMER_PAYMENT_MEAN != null) &&
                            (oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_ENABLED == 1) &&
                            (oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_VALID == 1))
                        {
                            rtRes = PerformPerTransactionRecharge(ref oUser, iOSType, iCurrencyChargedQuantity/*iQuantity*/, oUser.CURRENCy.CUR_ID, dLatitude, dLongitude, strAppVersion, out dRechargeId);
                            if (rtRes != ResultType.Result_OK)
                            {
                                Logger_AddLogMessage(string.Format("ChargeParkingOperation::Error charging per transaction value {0} ", rtRes.ToString()), LogLevels.logERROR);
                                return rtRes;
                            }

                            //bRestoreBalanceInCaseOfRefund = true;
                            suscriptionType = PaymentSuscryptionType.pstPerTransaction;

                        }
                        else
                        {
                            rtRes = ResultType.Result_Error_Invalid_Payment_Mean;
                            Logger_AddLogMessage(string.Format("ChargeParkingOperation::{0} ", rtRes.ToString()), LogLevels.logERROR);
                            return rtRes;
                        }
                    }
                    else
                    {
                        suscriptionType = PaymentSuscryptionType.pstPerTransaction;
                    }


                    
                }
                else
                {
                    if ((bAllowNoPaymentMethod)&&(oUser.USR_SUSCRIPTION_TYPE == (int)PaymentSuscryptionType.pstPrepay))
                    {
                        rtRes = ResultType.Result_Error_Not_Enough_Balance;
                        Logger_AddLogMessage(string.Format("ChargeParkingOperation::{0} ", rtRes.ToString()), LogLevels.logERROR);
                        return rtRes;
                    }
                    else
                    {
                        rtRes = ResultType.Result_Error_Invalid_Payment_Mean;
                        Logger_AddLogMessage(string.Format("ChargeParkingOperation::{0} ", rtRes.ToString()), LogLevels.logERROR);
                        return rtRes;
                    }

                }

                //bool bSubstractFromBalance = bRestoreBalanceInCaseOfRefund;

                DateTime? dtUTCPaymentDate = geograficAndTariffsRepository.ConvertInstallationDateTimeToUTC(oGroup.GRP_INS_ID, dtPaymentDate);
                DateTime? dtUTCInitialDate = geograficAndTariffsRepository.ConvertInstallationDateTimeToUTC(oGroup.GRP_INS_ID, dtInitialDate);
                DateTime? dtUTCEndDate = geograficAndTariffsRepository.ConvertInstallationDateTimeToUTC(oGroup.GRP_INS_ID, dtEndDate);

                bool bConfirmedWs1 = true;
                bool bConfirmedWs2 = true;
                bool bConfirmedWs3 = true;
                if ((oGroup.INSTALLATION.INS_OPT_OPERATIONCONFIRM_MODE ?? 0) == 1)
                {
                    bConfirmedWs1 = false;
                    bConfirmedWs2 = false;
                    bConfirmedWs3 = false;
                }

                string sExternalId1 = null;
                string sExternalId2 = null;
                string sExternalId3 = null;
                if (dAuthId.HasValue)
                {
                    if ((ConfirmParkWSSignatureType)oGroup.INSTALLATION.INS_PARK_CONFIRM_WS_SIGNATURE_TYPE == ConfirmParkWSSignatureType.cpst_madridplatform)
                    {
                        sExternalId1 = dAuthId.Value.ToString();
                    }
                    if (oGroup.INSTALLATION.INS_PARK_CONFIRM_WS2_SIGNATURE_TYPE.HasValue &&
                        (ConfirmParkWSSignatureType)oGroup.INSTALLATION.INS_PARK_CONFIRM_WS2_SIGNATURE_TYPE == ConfirmParkWSSignatureType.cpst_madridplatform)
                    {
                        sExternalId2 = dAuthId.Value.ToString();
                    }
                    if (oGroup.INSTALLATION.INS_PARK_CONFIRM_WS3_SIGNATURE_TYPE.HasValue &&
                        (ConfirmParkWSSignatureType)oGroup.INSTALLATION.INS_PARK_CONFIRM_WS3_SIGNATURE_TYPE == ConfirmParkWSSignatureType.cpst_madridplatform)
                    {
                        sExternalId3 = dAuthId.Value.ToString();
                    }
                }


                if (!customersRepository.ChargeParkingOperation(ref oUser,
                                                          iOSType,
                                                          true,
                                                          suscriptionType,
                                                          operationType,
                                                          strPlate,
                                                          oGroup.GRP_INS_ID,
                                                          oGroup.GRP_ID,
                                                          dArticleDef,
                                                          oStreetSection!=null?oStreetSection.STRSE_ID:(decimal?)null,
                                                          dtPaymentDate,
                                                          dtInitialDate,
                                                          dtEndDate,
                                                          dtUTCPaymentDate.Value,
                                                          dtUTCInitialDate.Value,
                                                          dtUTCEndDate.Value,
                                                          iTime,                                                          
                                                          iQuantity,
                                                          iRealQuantity,
                                                          iTimeBalUsed,
                                                          oGroup.INSTALLATION.INS_CUR_ID,
                                                          dBalanceCurID,
                                                          dChangeToApply,
                                                          dChangeFee,
                                                          iCurrencyChargedQuantity,
                                                          dPercVAT1, dPercVAT2, iPartialVAT1, dPercFEE, iPercFEETopped, iPartialPercFEE, iFixedFEE, iPartialFixedFEE, dPercBonus, iPartialBonusFEE, iTotalQuantity,
                                                          sBonusId, sBonusMarca, iBonusType,strPlaceString,iPostpay,
                                                          dRechargeId,
                                                          bConfirmedWs1, bConfirmedWs2, bConfirmedWs3,
                                                          dMobileSessionId,
                                                          dLatitude, dLongitude,strAppVersion,
                                                          sExternalId1, sExternalId2, sExternalId3,
                                                          out dOperationID,
                                                          out dtUTCInsertionDate))
                {

                    Logger_AddLogMessage(string.Format("ChargeParkingOperation::Error Inserting Parking Payment for plate {0} ", strPlate), LogLevels.logERROR);
                    return ResultType.Result_Error_Generic;
                }

                parametersOut["newbal"] = oUser.USR_BALANCE;
                parametersOut["new_time_bal"] = oUser.USR_TIME_BALANCE;
               

            }
            catch (Exception e)
            {
                Logger_AddLogException(e, "ChargeParkingOperation::Exception", LogLevels.logERROR);
            }


            return rtRes;
        }


        private ResultType ChargeUnParkingOperation(string strPlate, int iQuantity, int iTime, DateTime dtPaymentDate, DateTime dtInitialDate,
                                                DateTime dtEndDate, DateTime? dtPrevEnd,double dChangeToApply, decimal? dGroupId, decimal? dTariffId,
                                                decimal dPercVAT1, decimal dPercVAT2, decimal dPercFEE, int iPercFEETopped, int iFixedFEE, decimal dPercBonus,
                                                int iPartialVAT1, int iPartialPercFEE, int iPartialFixedFEE, int iPartialBonusFEE, int iTotalQuantity,string sBonusId,
                                                SortedList parametersIn, INSTALLATION oInstallation,
                                                ref USER oUser, int iOSType, decimal dMobileSessionId, 
                                                decimal? dLatitude, decimal? dLongitude, string strAppVersion, ref SortedList parametersOut,  
                                                out decimal dOperationID,out DateTime? dtUTCInsertionDate, out int iCurrencyChargedQuantity)
        {
            ResultType rtRes = ResultType.Result_OK;
            iCurrencyChargedQuantity = 0;
            double dChangeApplied = 1;
            double dChangeFee = 0;
            dOperationID = -1;
            dtUTCInsertionDate = null;

            try
            {

                iCurrencyChargedQuantity = ChangeQuantityFromInstallationCurToUserCur(iTotalQuantity/*iQuantity*/, dChangeToApply, oInstallation, oUser, out dChangeFee);

                if (iCurrencyChargedQuantity < 0)
                {
                    rtRes = (ResultType)iCurrencyChargedQuantity;
                    Logger_AddLogMessage(string.Format("ChargeUnParkingOperation::Error Changing quantity {0} ", rtRes.ToString()), LogLevels.logERROR);
                    return rtRes;
                }



                DateTime? dtUTCPaymentDate = geograficAndTariffsRepository.ConvertInstallationDateTimeToUTC(oInstallation.INS_ID, dtPaymentDate);
                DateTime? dtUTCInitialDate = geograficAndTariffsRepository.ConvertInstallationDateTimeToUTC(oInstallation.INS_ID, dtInitialDate);
                DateTime? dtUTCEndDate = geograficAndTariffsRepository.ConvertInstallationDateTimeToUTC(oInstallation.INS_ID, dtEndDate);

                bool bConfirmedWs1 = true;
                bool bConfirmedWs2 = true;
                bool bConfirmedWs3 = true;
                if ((oInstallation.INS_OPT_OPERATIONCONFIRM_MODE ?? 0) == 1)
                {
                    bConfirmedWs1 = false;
                    bConfirmedWs2 = false;
                    bConfirmedWs3 = false;
                }


                if (!customersRepository.ChargeUnParkingOperation(ref oUser,
                                                          iOSType,
                                                          (PaymentSuscryptionType)oUser.USR_SUSCRIPTION_TYPE,
                                                          strPlate,
                                                          oInstallation.INS_ID,
                                                          dGroupId,
                                                          dTariffId,
                                                          dtPaymentDate,
                                                          dtInitialDate,
                                                          dtEndDate,
                                                          dtUTCPaymentDate.Value,
                                                          dtUTCInitialDate.Value,
                                                          dtUTCEndDate.Value, 
                                                          dtPrevEnd,
                                                          iTime,
                                                          iQuantity,
                                                          oInstallation.INS_CUR_ID,
                                                          oUser.USR_CUR_ID,
                                                          dChangeApplied,
                                                          dChangeFee,
                                                          iCurrencyChargedQuantity,
                                                          dPercVAT1, dPercVAT2, iPartialVAT1, dPercFEE, iPercFEETopped, iPartialPercFEE, iFixedFEE, iPartialFixedFEE,
                                                          dPercBonus, iPartialBonusFEE, iTotalQuantity,sBonusId,
                                                          bConfirmedWs1,bConfirmedWs2,bConfirmedWs3,
                                                          dMobileSessionId,
                                                          dLatitude, dLongitude,strAppVersion,
                                                          out dOperationID,
                                                          out dtUTCInsertionDate))
                {

                    Logger_AddLogMessage(string.Format("ChargeUnParkingOperation::Error Inserting UnPark Payment {0} ", parametersIn["f"].ToString()), LogLevels.logERROR);
                    return ResultType.Result_Error_Generic;
                }

                parametersOut["newbal"] = oUser.USR_BALANCE;
                parametersOut["new_time_bal"] = oUser.USR_TIME_BALANCE;



            }
            catch (Exception e)
            {
                Logger_AddLogException(e, "ChargeUnParkingOperation::Exception", LogLevels.logERROR);
            }


            return rtRes;
        }



        private ResultType RefundChargeFinePayment(ref USER oUser, decimal dTicketPaymentID, decimal? dRechargeID, bool bRestoreBalance)
        {
            ResultType rtRes = ResultType.Result_OK;


            try
            {

                if (!customersRepository.RefundChargeFinePayment(ref oUser,
                                                                 bRestoreBalance,     
                                                                dTicketPaymentID))
                {

                    Logger_AddLogMessage(string.Format("RefundChargeFinePayment::Error Refunding Ticket Payment {0} ", dTicketPaymentID), LogLevels.logERROR);
                    return ResultType.Result_Error_Generic;
                }

                if (dRechargeID != null)
                {
                    if (!customersRepository.RefundRecharge(ref oUser,
                                                            dRechargeID.Value,
                                                            bRestoreBalance))
                    {

                        Logger_AddLogMessage(string.Format("RefundChargeFinePayment::Error Refunding Recharge {0} ", dRechargeID.Value), LogLevels.logERROR);
                        return ResultType.Result_Error_Generic;
                    }
                }


            }
            catch (Exception e)
            {
                Logger_AddLogException(e, "RefundChargeFinePayment::Exception", LogLevels.logERROR);

            }


            return rtRes;
        }


        private ResultType BackUnParkPayment(ref USER oUser, decimal dOperationID)
        {
            ResultType rtRes = ResultType.Result_OK;


            try
            {

                if (!customersRepository.BackUnParkPayment(ref oUser,
                                                           dOperationID))
                {

                    Logger_AddLogMessage(string.Format("BackUnParkPayment::Error Backing UnPark Payment {0} ", dOperationID), LogLevels.logERROR);
                    return ResultType.Result_Error_Generic;
                }



            }
            catch (Exception e)
            {
                Logger_AddLogException(e, "BackUnParkPayment::Exception", LogLevels.logERROR);

            }


            return rtRes;
        }

        private ResultType PerformTransferBalance(double dChangeToApply, int iQuantity, 
                                                  ref USER oSrcUser, ref USER oDstUser, int iOSType, decimal dMobileSessionId, string strAppVersion,                                                 
                                                  ref SortedList parametersOut, out int iCurrencyDstQuantity, out decimal dTransferID,
                                                  out DateTime? dtUTCInsertionDate, out int? iBalanceAfterRecharge)
        {
            ResultType rtRes = ResultType.Result_OK;
            iCurrencyDstQuantity = 0;
            double dChangeFee = 0;            
            dTransferID = -1;                                    
            iBalanceAfterRecharge = null;
            dtUTCInsertionDate = null;

            try
            {                
                iCurrencyDstQuantity = ChangeQuantityFromUserCurToUserCur(iQuantity, dChangeToApply, oSrcUser, oDstUser, out dChangeFee);

                if (iCurrencyDstQuantity < 0)
                {
                    rtRes = (ResultType)iCurrencyDstQuantity;
                    Logger_AddLogMessage(string.Format("PerformTransferBalance::Error Changing quantity {0} ", rtRes.ToString()), LogLevels.logERROR);
                    return rtRes;
                }



                if (oSrcUser.USR_BALANCE >= iQuantity)
                {
                    if (!customersRepository.TransferBalance(ref oSrcUser, ref oDstUser,
                                                              iOSType,
                                                              iQuantity,
                                                              oSrcUser.USR_CUR_ID, oDstUser.USR_CUR_ID,                                                              
                                                              dChangeToApply,
                                                              dChangeFee,
                                                              iCurrencyDstQuantity,
                                                              dMobileSessionId,
                                                              strAppVersion,                                                              
                                                              out dTransferID,
                                                              out dtUTCInsertionDate))
                    {

                        Logger_AddLogMessage(string.Format("PerformTransferBalance::Error Inserting Balance Transfer from user {0} to user {1} ", oSrcUser.USR_USERNAME, oDstUser.USR_USERNAME), LogLevels.logERROR);
                        return ResultType.Result_Error_TransferingBalance;
                    }
                    else
                    {


                        try
                        {

                            string strTransferBalanceSrcBody = string.Format(ResourceExtension.GetLiteral("TransferBalanceSrc_EmailBody"),
                                oDstUser.USR_USERNAME,
                                (oSrcUser.USR_CUR_ID == oDstUser.USR_CUR_ID ?
                                string.Format("{0:0.00} {1}", Convert.ToDouble(iQuantity) / 100,
                                                infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oSrcUser.USR_CUR_ID))) :
                                string.Format("{0:0.00} {1} ({2:0.00} {3})", Convert.ToDouble(iQuantity) / 100,
                                                              infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oSrcUser.USR_CUR_ID)),
                                                              Convert.ToDouble(iCurrencyDstQuantity) / 100,
                                                              infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oDstUser.USR_CUR_ID)))),
                                string.Format("{0:0.00} {1}", Convert.ToDouble(oSrcUser.USR_BALANCE) / 100, infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oSrcUser.USR_CUR_ID))),
                                dtUTCInsertionDate.Value.AddMinutes(-oSrcUser.USR_UTC_OFFSET),
                                 GetEmailFooter(ref oSrcUser));

                            SendEmail(ref oSrcUser, ResourceExtension.GetLiteral("TransferBalanceSrc_EmailHeader"), strTransferBalanceSrcBody);
                        }
                        catch { }


                        try
                        {

                            string strTransferBalanceDstBody = string.Format(ResourceExtension.GetLiteral("TransferBalanceDst_EmailBody"),
                                oSrcUser.USR_USERNAME,
                                (oSrcUser.USR_CUR_ID == oDstUser.USR_CUR_ID ?
                                string.Format("{0:0.00} {1}", Convert.ToDouble(iQuantity) / 100,
                                                infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oDstUser.USR_CUR_ID))) :
                                string.Format("{0:0.00} {1} ({2:0.00} {3})", Convert.ToDouble(iCurrencyDstQuantity) / 100,
                                                              infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oDstUser.USR_CUR_ID)),
                                                              Convert.ToDouble(iQuantity) / 100,
                                                              infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oSrcUser.USR_CUR_ID)))),
                                string.Format("{0:0.00} {1}", Convert.ToDouble(oDstUser.USR_BALANCE) / 100, infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oDstUser.USR_CUR_ID))),
                                dtUTCInsertionDate.Value.AddMinutes(-oDstUser.USR_UTC_OFFSET),
                                GetEmailFooter(ref oDstUser));

                            SendEmail(ref oDstUser, ResourceExtension.GetLiteral("TransferBalanceDst_EmailHeader"), strTransferBalanceDstBody);
                        }
                        catch { }

                    }

                      
                    iBalanceAfterRecharge = oSrcUser.USR_BALANCE;                    


                    
                }
                else
                {
                    rtRes = ResultType.Result_Error_Invalid_Input_Parameter;
                    Logger_AddLogMessage(string.Format("PerformTransferBalance::{0} ", rtRes.ToString()), LogLevels.logERROR);
                    return rtRes;
                }

            }
            catch (Exception e)
            {
                Logger_AddLogException(e, "PerformTransferBalance::Exception", LogLevels.logERROR);
            }


            return rtRes;
        }

        private ResultType RefundChargeParkPayment(ref USER oUser, decimal dOperationID, decimal? dRechargeID, bool bRestoreBalance)
        {
            ResultType rtRes = ResultType.Result_OK;


            try
            {

                if (!customersRepository.RefundChargeParkPayment(ref oUser,
                                                                bRestoreBalance,
                                                                dOperationID))
                {

                    Logger_AddLogMessage(string.Format("RefundChargeParkPayment::Error Refunding Parking Payment {0} ", dOperationID), LogLevels.logERROR);
                    return ResultType.Result_Error_Generic;
                }


                if (dRechargeID != null)
                {
                    if (!customersRepository.RefundRecharge(ref oUser,
                                                            dRechargeID.Value,
                                                            bRestoreBalance))
                    {

                        Logger_AddLogMessage(string.Format("RefundChargeParkPayment::Error Refunding Recharge {0} ", dRechargeID.Value), LogLevels.logERROR);
                        return ResultType.Result_Error_Generic;
                    }
                }

            }
            catch (Exception e)
            {
                Logger_AddLogException(e, "RefundChargeParkPayment::Exception", LogLevels.logERROR);

            }


            return rtRes;
        }


        private int? MaxAmountAllowedToPay(ref USER oUser)
        {
            int? iAmount=oUser.USR_BALANCE;


            try
            {
               
                if ((oUser.CUSTOMER_PAYMENT_MEAN != null) &&
                    (oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_ENABLED == 1) &&
                     (oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_VALID == 1))
                {
                    if (((oUser.USR_SUSCRIPTION_TYPE == (int)PaymentSuscryptionType.pstPrepay) &&
                        (oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AUTOMATIC_RECHARGE == 1) &&
                        (oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AMOUNT_TO_RECHARGE > 0)) ||
                        (oUser.USR_SUSCRIPTION_TYPE == (int)PaymentSuscryptionType.pstPerTransaction))
                    {
                        iAmount = null;
                    }

                }
            }
            catch (Exception e)
            {
                Logger_AddLogException(e, "MaxAmountAllowedToPay::Exception", LogLevels.logERROR);

            }

            return iAmount;
        }


        private string ModifyCCData(string xmlIn, SortedList parametersIn, 
                                    PaymentMeanCreditCardProviderType CCProvider, 
                                    PaymentMeanRechargeCreationType eCreationType,    
                                    PaymentSuscryptionType? eSuscriptionType,
                                    ref USER oUser, ref SortedList parametersOut)
        {
            string xmlOut = "";

            try
            {

                if ((PaymentSuscryptionType?)oUser.USR_SUSCRIPTION_TYPE!=eSuscriptionType)
                {
                    customersRepository.SetUserSuscriptionType(ref oUser, eSuscriptionType.Value);
                }
                
                PaymentMeanType paymentType = PaymentMeanType.pmtDebitCreditCard;
              
                int? iChargedQuantity = null;

                try
                {
                    iChargedQuantity = Convert.ToInt32(parametersIn["ccchargedquantity"].ToString());

                }
                catch
                {
                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                    Logger_AddLogMessage(string.Format("ModifyCCData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    return xmlOut;
                }

                int iOSID = (int)MobileOS.Web;

                if (parametersIn["OSID"] != null)
                {
                    try
                    {
                        iOSID = Convert.ToInt32(parametersIn["OSID"].ToString());
                    }
                    catch { }
                }



                bool bAutoRecharge = false;
                int? iAutoRechargeAmount = null;
                int? iAutoRechargeBelow = null;
                if (parametersIn["autrech"] != null)
                {
                    try
                    {
                        bAutoRecharge = Convert.ToInt32(parametersIn["autrech"].ToString()) == 1;

                        if (bAutoRecharge)
                        {
                            if ((parametersIn["autbelow"] != null) && (parametersIn["autamo"] != null))
                            {

                                iAutoRechargeAmount = Convert.ToInt32(parametersIn["autamo"].ToString());
                                iAutoRechargeBelow = Convert.ToInt32(parametersIn["autbelow"].ToString());

                            }
                            else
                            {
                                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Missing_Input_Parameter);
                                Logger_AddLogMessage(string.Format("ModifyCCData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                                return xmlOut;
                            }

                        }


                    }
                    catch
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Invalid_Input_Parameter);
                        Logger_AddLogMessage(string.Format("ModifyCCData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        return xmlOut;

                    }
                }
                else
                {

                    if (oUser.CUSTOMER_PAYMENT_MEAN != null)
                    {
                        bAutoRecharge = (oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AUTOMATIC_RECHARGE == 1);
                        if (bAutoRecharge)
                        {
                            iAutoRechargeAmount = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_AMOUNT_TO_RECHARGE;
                            iAutoRechargeBelow = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_RECHARGE_WHEN_AMOUNT_IS_LESS;
                        }
                    }


                }

                CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIG oGatewayConfig = null;
                if (paymentType == PaymentMeanType.pmtDebitCreditCard)
                {
                    oGatewayConfig = oUser.CURRENCy.CURRENCIES_PAYMENT_TYPE_GATEWAY_CONFIGs
                                          .Where(r => r.CPTGC_ENABLED != 0 && r.CPTGC_PAT_ID == Convert.ToInt32(PaymentMeanType.pmtDebitCreditCard))
                                          .FirstOrDefault();
                }

                decimal? dGatewayConfigId = ((oGatewayConfig != null) ? oGatewayConfig.CPTGC_ID : (decimal?)null);


                DateTime? dtExpDate = null;
                string strReference = "";
                string strAuthCode = "";
                string strAuthResult = "";
                string strAuthResultDesc = "";
                string strCardHash = "";
                string strCardReference = "";
                string strCardScheme = "";
                string strGatewayDate = "";
                string strMaskedCardNumber = "";
                string strTransactionId = "";
                string strCFTransactionId = null;
                string strExpMonth = "";
                string strExpYear = "";
                bool bReturnPAN = false;

                PaymentMeanRechargeStatus rechargeStatus = PaymentMeanRechargeStatus.Waiting_Commit;

                if (CCProvider == PaymentMeanCreditCardProviderType.pmccpCreditCall)
                {
                    strTransactionId = parametersIn["ekashu_transaction_id"].ToString();
                    if (parametersIn["ekashu_card_reference"] == null)
                    {
                        int iRetries = 0;
                        if (!CardEasePayments.GetMobileTransactionInfo(strTransactionId,
                                                                 oGatewayConfig.CPTGC_CC_EKASHU_FORM_URL,
                                                                 oGatewayConfig.CPTGC_CC_TERMINAL_ID,
                                                                 oGatewayConfig.CPTGC_CC_TRANSACTION_KEY,
                                                                 oGatewayConfig.CPTGC_CC_CARDEASE_TIMEOUT.Value,
                                                                out strReference,
                                                                out strAuthCode,
                                                                out strAuthResult,
                                                                out strCardHash,
                                                                out strCardReference,
                                                                out strCardScheme,
                                                                out strGatewayDate,
                                                                out strMaskedCardNumber,
                                                                out strExpMonth,
                                                                out strExpYear,
                                                                out iRetries))
                        {
                                    //Result_Error_Getting_Transaction_Parameters = -58,
                                    //Result_Error_Duplicate_Recharge = -59,
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Getting_Transaction_Parameters);
                            Logger_AddLogMessage(string.Format("ModifyCCData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            return xmlOut;
                        }
                       
                    }
                    else
                    {
                        strReference = parametersIn["ekashu_reference"].ToString();
                        strAuthCode = parametersIn["ekashu_auth_code"].ToString();
                        strAuthResult = parametersIn["ekashu_auth_result"].ToString();
                        strCardHash = parametersIn["ekashu_card_hash"].ToString();
                        strCardReference = parametersIn["ekashu_card_reference"].ToString();
                        strCardScheme = parametersIn["ekashu_card_scheme"].ToString();
                        strGatewayDate = parametersIn["ekashu_date_time_local_fmt"].ToString();
                        strMaskedCardNumber = parametersIn["ekashu_masked_card_number"].ToString();                       
                        strExpMonth = parametersIn["ekashu_expires_end_month"].ToString();
                        strExpYear = parametersIn["ekashu_expires_end_year"].ToString();
                    }

                    if ((strExpMonth.Length == 2) && (strExpYear.Length == 4))
                    {
                        dtExpDate = new DateTime(Convert.ToInt32(strExpYear), Convert.ToInt32(strExpMonth), 1).AddMonths(1).AddSeconds(-1);
                    }
                    bReturnPAN = true;

                }
                else if (CCProvider == PaymentMeanCreditCardProviderType.pmccpIECISA)
                {

                    strReference = parametersIn["iecisa_CF_TicketNumber"].ToString();
                    strAuthCode = parametersIn["iecisa_CF_AuthCode"].ToString();
                    strAuthResult = parametersIn["iecisa_CF_Result"].ToString(); ;
                    strCardScheme = "";
                    strCFTransactionId = parametersIn["iecisa_CF_TransactionID"].ToString();
                    strTransactionId = parametersIn["iecisa_TransactionID"].ToString(); 

                    strCardHash = parametersIn["iecisa_CF_Token"].ToString();
                    strCardReference = parametersIn["iecisa_CF_Token"].ToString();
                    strMaskedCardNumber = parametersIn["iecisa_CF_PAN"].ToString();
                    strGatewayDate = DateTime.ParseExact(parametersIn["iecisa_GatewayDate"].ToString(), "HHmmssddMMyyyy",
                                            CultureInfo.InvariantCulture).ToString("ddMMyyyyHHmmss");
                    string strExpDate = parametersIn["iecisa_CF_ExpirationDate"].ToString();

                    if (strExpDate.Length == 4)
                    {
                        dtExpDate = new DateTime(Convert.ToInt32(strExpDate.Substring(2, 2)) + 2000,
                                                    Convert.ToInt32(strExpDate.Substring(0, 2)), 1).AddMonths(1).AddSeconds(-1);
                    }
                    rechargeStatus = PaymentMeanRechargeStatus.Committed;
                    bReturnPAN = true;
                    

                }
                else if (CCProvider == PaymentMeanCreditCardProviderType.pmccpStripe)
                {

                    strReference = parametersIn["stripe_transaction_id"].ToString();
                    strAuthCode = "";
                    strAuthResult = "succeeded";
                    strCardHash = parametersIn["stripe_customer_id"].ToString();
                    strCardReference = parametersIn["stripe_card_reference"].ToString();
                    strCardScheme = parametersIn["stripe_card_scheme"].ToString();
                    strGatewayDate = DateTime.ParseExact(parametersIn["stripe_date_time_utc"].ToString(), "HHmmssddMMyy",
                                            CultureInfo.InvariantCulture).ToString("ddMMyyyyHHmmss");
                    strMaskedCardNumber = parametersIn["stripe_masked_card_number"].ToString();
                    strTransactionId = parametersIn["stripe_transaction_id"].ToString();
                    strExpMonth = parametersIn["stripe_expires_end_month"].ToString();
                    strExpYear = parametersIn["stripe_expires_end_year"].ToString();


                    if ((strExpMonth.Length == 2) && (strExpYear.Length == 4))
                    {
                        dtExpDate = new DateTime(Convert.ToInt32(strExpYear), Convert.ToInt32(strExpMonth), 1).AddMonths(1).AddSeconds(-1);
                    }
                    bReturnPAN = true;

                }



                if (!customersRepository.SetUserPaymentMean(ref oUser, infraestructureRepository,
                                new CUSTOMER_PAYMENT_MEAN
                                {
                                    CUSPM_PAT_ID = Convert.ToInt32(paymentType),
                                    CUSPM_PAST_ID = ((Convert.ToInt32(paymentType) == (int)PaymentMeanType.pmtPaypal) && !bAutoRecharge) ?
                                        (int)PaymentMeanSubType.pmstPaypal : (int)PaymentMeanSubType.pmstUndefined,
                                    CUSPM_CREDIT_CARD_PAYMENT_PROVIDER = (Convert.ToInt32(paymentType) == (int)PaymentMeanType.pmtPaypal) ? -1 :
                                                                        (int)CCProvider,
                                    CUSPM_AUTOMATIC_RECHARGE = bAutoRecharge ? 1 : 0,
                                    CUSPM_AMOUNT_TO_RECHARGE = bAutoRecharge ? iAutoRechargeAmount.Value : (int?)null,
                                    CUSPM_RECHARGE_WHEN_AMOUNT_IS_LESS = bAutoRecharge ? iAutoRechargeBelow : (int?)null,
                                    CUSPM_TOKEN_PAYPAL_ID = "",
                                    CUSPM_CUR_ID = infraestructureRepository.GetCountryCurrency(Convert.ToInt32(oUser.COUNTRy.COU_ID)),
                                    CUSPM_VALID = 1,
                                    CUSPM_CPTGC_ID = dGatewayConfigId,
                                }))
                {
                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                    Logger_AddLogMessage(string.Format("ModifyCCData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                    return xmlOut;

                }
                else
                {                   

                    decimal? dRechargeId = null;

                    bool bAddToBalance = true;
                    
                    decimal dCurrencyToCharge = oUser.CURRENCy.CUR_ID;


                   

                    if (oUser.USR_SUSCRIPTION_TYPE.Value == (int)PaymentSuscryptionType.pstPerTransaction)
                    {
                        List<string> oPerTransactionParameters = new List<string>();
                        iChargedQuantity = 0;

                        oPerTransactionParameters = ConfigurationManager.AppSettings["SuscriptionType2_AddPayMethChargeValue"].ToString().Split(';').ToList();

                        for (int i = 0; i < oPerTransactionParameters.Count; i++)
                        {
                            if (oPerTransactionParameters[i] == oUser.CURRENCy.CUR_ISO_CODE)
                            {
                                iChargedQuantity = Convert.ToInt32(oPerTransactionParameters[i + 1]);
                                dCurrencyToCharge = oUser.CURRENCy.CUR_ID;
                                break;
                            }

                        }

                        bAddToBalance = false;
                        rechargeStatus = rechargeStatus == PaymentMeanRechargeStatus.Waiting_Commit ? PaymentMeanRechargeStatus.Waiting_Cancellation : PaymentMeanRechargeStatus.Waiting_Refund;
                    }
                   

                    decimal? dLatitude = null;
                    decimal? dLongitude = null;
                    this.GetLatLon(parametersIn, out dLatitude, out dLongitude);

                    decimal dPercVAT1=0;
                    decimal dPercVAT2=0;
                    decimal dPercFEE=0;
                    int iPercFEETopped=0;
                    int iFixedFEE=0;
                    int? iPaymentTypeId = null;
                    int? iPaymentSubtypeId = null;
                    if (oUser.CUSTOMER_PAYMENT_MEAN != null)
                    {
                        iPaymentTypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAT_ID;
                        iPaymentSubtypeId = oUser.CUSTOMER_PAYMENT_MEAN.CUSPM_PAST_ID;
                    }


                    if (oUser.USR_SUSCRIPTION_TYPE.Value != (int)PaymentSuscryptionType.pstPerTransaction)
                    {
                        if (!customersRepository.GetFinantialParams(oUser, "", iPaymentTypeId, iPaymentSubtypeId, ChargeOperationsType.BalanceRecharge,
                                                                    out dPercVAT1, out dPercVAT2, out dPercFEE, out iPercFEETopped, out iFixedFEE))
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                            Logger_AddLogMessage(string.Format("ModifyCCData::Error: Error getting finantial parameters. xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            return xmlOut;
                        }
                    }

                    int iPartialVAT1=0;
                    int iPartialPercFEE=0;
                    int iPartialFixedFEE=0;
                    int iPartialPercFEEVAT=0;
                    int iPartialFixedFEEVAT=0;

                    int iTotalQuantity = iChargedQuantity.Value;

                    if (oUser.USR_SUSCRIPTION_TYPE.Value != (int)PaymentSuscryptionType.pstPerTransaction)
                    {
                        iTotalQuantity = customersRepository.CalculateFEE(iChargedQuantity.Value, dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE);
                    }


                   

                    string sAppVersion = "";
                    try
                    {
                        if (parametersIn["appvers"] != null)
                            sAppVersion = parametersIn["appvers"].ToString();
                        else
                            sAppVersion = "1.0";
                    }
                    catch
                    {
                        sAppVersion = "1.0";
                    }


                    if (!customersRepository.RechargeUserBalance(ref oUser,
                        Convert.ToInt32(iOSID),
                        bAddToBalance,
                        iChargedQuantity.Value,
                        dPercVAT1, dPercVAT2, iPartialVAT1, dPercFEE, iPercFEETopped, iPartialPercFEE, iFixedFEE, iPartialFixedFEE, iTotalQuantity,
                        dCurrencyToCharge,
                        (PaymentSuscryptionType)oUser.USR_SUSCRIPTION_TYPE,
                        rechargeStatus,
                        eCreationType,
                        //0,
                        strReference,
                        strTransactionId,
                        strCFTransactionId,
                        strGatewayDate,
                        strAuthCode,
                        strAuthResult,
                        strAuthResultDesc,
                        strCardHash,
                        strCardReference,
                        strCardScheme,
                        strMaskedCardNumber,
                        dtExpDate,
                        null,
                        null,
                        null,
                        false,
                        dLatitude, dLongitude, sAppVersion,
                        out dRechargeId))
                    {
                        xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                        Logger_AddLogMessage(string.Format("ModifyCCData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                        return xmlOut;

                    }

                    if (oUser.USR_SUSCRIPTION_TYPE.Value == (int)PaymentSuscryptionType.pstPrepay)
                    {
                        CUSTOMER_PAYMENT_MEANS_RECHARGE oRecharge = null;
                        if (customersRepository.GetRechargeData(ref oUser, dRechargeId.Value, out oRecharge))
                        {
                            if ((PaymentSuscryptionType)oRecharge.CUSPMR_SUSCRIPTION_TYPE == PaymentSuscryptionType.pstPrepay)
                            {
                                string culture = oUser.USR_CULTURE_LANG;
                                CultureInfo ci = new CultureInfo(culture);
                                Thread.CurrentThread.CurrentUICulture = ci;
                                Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(ci.Name);

                                int iQuantity = oRecharge.CUSPMR_AMOUNT;
                                dPercVAT1 = oRecharge.CUSPMR_PERC_VAT1 ?? 0;
                                dPercVAT2 = oRecharge.CUSPMR_PERC_VAT2 ?? 0;
                                dPercFEE = oRecharge.CUSPMR_PERC_FEE ?? 0;
                                iPercFEETopped = (int)(oRecharge.CUSPMR_PERC_FEE_TOPPED ?? 0);
                                iFixedFEE = (int)(oRecharge.CUSPMR_FIXED_FEE ?? 0);

                                iTotalQuantity = customersRepository.CalculateFEE(iQuantity, dPercVAT1, dPercVAT2, dPercFEE, iPercFEETopped, iFixedFEE, out iPartialVAT1, out iPartialPercFEE, out iPartialFixedFEE, out iPartialPercFEEVAT, out iPartialFixedFEEVAT);

                                int iQFEE = Convert.ToInt32(Math.Round(iQuantity * dPercFEE, MidpointRounding.AwayFromZero));
                                if (iPercFEETopped > 0 && iQFEE > iPercFEETopped) iQFEE = iPercFEETopped;
                                iQFEE += iFixedFEE;
                                int iQVAT = iPartialVAT1 + iPartialPercFEEVAT + iPartialFixedFEEVAT;
                                int iQSubTotal = iQuantity + iQFEE;

                                int iLayout = 0;
                                if (iQFEE != 0 || iQVAT != 0)
                                {
                                    OPERATOR oOperator = customersRepository.GetDefaultOperator();
                                    if (oOperator != null) iLayout = oOperator.OPR_FEE_LAYOUT;
                                }


                                string sLayoutSubtotal = "";
                                string sLayoutTotal = "";

                                string sCurIsoCode = infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oRecharge.CUSPMR_CUR_ID));

                                if (iLayout == 2)
                                {
                                    sLayoutSubtotal = string.Format(ResourceExtension.GetLiteral("Email_LayoutSubtotal"),
                                                                    string.Format("{0:0.00} {1}", Convert.ToDouble(iQSubTotal) / 100, sCurIsoCode),
                                                                    (oRecharge.CUSPMR_PERC_VAT1 != 0 ? string.Format("{0:0.00}% ", oRecharge.CUSPMR_PERC_VAT1 * 100) : "") +
                                                                    (oRecharge.CUSPMR_PERC_VAT2 != 0 && oRecharge.CUSPMR_PERC_VAT1 != oRecharge.CUSPMR_PERC_VAT2 ? string.Format("{0:0.00}%", oRecharge.CUSPMR_PERC_VAT2 * 100) : ""),
                                                                    string.Format("{0:0.00} {1}", Convert.ToDouble(iQVAT) / 100, sCurIsoCode));
                                }
                                else if (iLayout == 1)
                                {
                                    sLayoutTotal = string.Format(ResourceExtension.GetLiteral("Email_LayoutTotal"),
                                                                 string.Format("{0:0.00} {1}", Convert.ToDouble(iQuantity) / 100, sCurIsoCode),
                                                                 string.Format("{0:0.00} {1}", Convert.ToDouble(iQFEE) / 100, sCurIsoCode),
                                                                 (oRecharge.CUSPMR_PERC_VAT1 != 0 ? string.Format("{0:0.00}% ", oRecharge.CUSPMR_PERC_VAT1 * 100) : "") +
                                                                 (oRecharge.CUSPMR_PERC_VAT2 != 0 && oRecharge.CUSPMR_PERC_VAT1 != oRecharge.CUSPMR_PERC_VAT2 ? string.Format("{0:0.00}%", oRecharge.CUSPMR_PERC_VAT2 * 100) : ""),
                                                                 string.Format("{0:0.00} {1}", Convert.ToDouble(iQVAT) / 100, sCurIsoCode));
                                }

                                string strRechargeEmailSubject = ResourceExtension.GetLiteral("ConfirmNoAutomaticRecharge_EmailHeader");
                                /*
                                    ID: {0}<br>
                                 *  Fecha de recarga: {1:HH:mm:ss dd/MM/yyyy}<br>
                                 *  Cantidad Recargada: {2} 
                                 */
                                string strRechargeEmailBody = string.Format(ResourceExtension.GetLiteral("ConfirmRecharge_EmailBody"),
                                    oRecharge.CUSPMR_ID,
                                    oRecharge.CUSPMR_DATE,
                                    string.Format("{0:0.00} {1}", Convert.ToDouble(oRecharge.CUSPMR_TOTAL_AMOUNT_CHARGED) / 100,
                                                                  infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oRecharge.CUSPMR_CUR_ID))),
                                    string.Format("{0:0.00} {1}", Convert.ToDouble(oUser.USR_BALANCE) / 100,
                                                        infraestructureRepository.GetCurrencyIsoCode(Convert.ToInt32(oUser.USR_CUR_ID))),
                                    ConfigurationManager.AppSettings["EmailSignatureURL"],
                                    ConfigurationManager.AppSettings["EmailSignatureGraphic"],
                                    sLayoutSubtotal, sLayoutTotal,
                                    GetEmailFooter(ref oUser));


                                SendEmail(ref oUser, strRechargeEmailSubject, strRechargeEmailBody);

                            }
                        }

                    }
                    /*else if ((oUser.USR_SUSCRIPTION_TYPE.Value == (int)PaymentSuscryptionType.pstPerTransaction) && (!bPerTransactionRefundMoney))
                    {

                        decimal dOperationID;
                        if (!customersRepository.ChargeServiceOperation(ref oUser,
                            Convert.ToInt32(iOSID),
                            false,
                            ServiceChargeType.NewPaymentMean,
                            PaymentSuscryptionType.pstPerTransaction,
                            DateTime.UtcNow.AddMinutes(-oUser.USR_UTC_OFFSET),
                            DateTime.UtcNow,
                            iChargedQuantity.Value,
                            dCurrencyToCharge,
                            dCurrencyToCharge,
                            1.0,
                            0,
                            iChargedQuantity.Value,
                            dRechargeId,
                            out dOperationID))
                        {
                            xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                            Logger_AddLogMessage(string.Format("ModifyCCData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                            return xmlOut;

                        }
                    }*/
                }


                parametersOut = new SortedList();
                parametersOut["r"] = Convert.ToInt32(ResultType.Result_OK).ToString();
                parametersOut["newbal"] = oUser.USR_BALANCE;

                if (bReturnPAN)
                {

                    /*parametersOut["ekashu_reference"] = strReference;
                    parametersOut["ekashu_auth_code"] = strAuthCode;
                    parametersOut["ekashu_auth_result"] = strAuthResult;
                    parametersOut["ekashu_card_hash"] = strCardHash;
                    parametersOut["ekashu_card_reference"] = strCardReference;
                    parametersOut["ekashu_card_scheme"] = strCardScheme;
                    parametersOut["ekashu_date_time_local_fmt"] = strGatewayDate;*/
                    parametersOut["masked_card_number"] = strMaskedCardNumber;
                    /*parametersOut["ekashu_expires_end_month"] = strExpMonth;
                    parametersOut["ekashu_expires_end_year"] = strExpYear;*/
                }

                xmlOut = GenerateXMLOuput(parametersOut);

                if (xmlOut.Length == 0)
                {
                    xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                    Logger_AddLogMessage(string.Format("ModifyCCData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);
                }
                else
                {
                    Logger_AddLogMessage(string.Format("ModifyCCData: xmlOut={0}", PrettyXml(xmlOut)), LogLevels.logINFO);
                }
            }
            catch (Exception e)
            {
                xmlOut = GenerateXMLErrorResult(ResultType.Result_Error_Generic);
                Logger_AddLogException(e, string.Format("ModifyCCData::Error: xmlIn={0}, xmlOut={1}", PrettyXml(xmlIn), PrettyXml(xmlOut)), LogLevels.logERROR);


            }

            return xmlOut;
        }



        private bool SendEmail(ref USER oUser, string strEmailSubject, string strEmailBody)
        {
            bool bRes = true;
            try
            {

                long lSenderId = infraestructureRepository.SendEmailTo(oUser.USR_EMAIL, strEmailSubject, strEmailBody);

                if (lSenderId > 0)
                {
                    customersRepository.InsertUserEmail(ref oUser, oUser.USR_EMAIL, strEmailSubject, strEmailBody, lSenderId);
                }

            }
            catch
            {
                bRes = false;
            }

            return bRes;
        }



        private bool SendEmailAndSMS(ref USER oUser,USERS_SECURITY_OPERATION oSecOperation, string strResEmailHeader, string strResEmailBody, string strResSMS)
        {
            bool bRes = true;
            try
            {
                string url = ConfigurationManager.AppSettings["ForgotPassword_URL"];
                string urlWithParam = url + "?code=" + oSecOperation.USOP_URL_PARAMETER;
                string strEmailSubject = strResEmailHeader;
                string strEmailBody = string.Format(strResEmailBody, urlWithParam, url);
                string strSMS = string.Format(strResSMS, oSecOperation.USOP_ACTIVATION_CODE);

                long lSenderId = infraestructureRepository.SendEmailTo(oSecOperation.USOP_NEW_EMAIL, strEmailSubject, strEmailBody);

                if (lSenderId > 0)
                {
                    string strCompleteTelephone = "";
                    customersRepository.InsertUserEmail(ref oUser, oSecOperation.USOP_NEW_EMAIL, strEmailSubject, strEmailBody, lSenderId);

                    if (!string.IsNullOrEmpty(oSecOperation.USOP_NEW_MAIN_TEL))
                    {
                        lSenderId = infraestructureRepository.SendSMSTo(Convert.ToInt32(oSecOperation.USOP_NEW_MAIN_TEL_COUNTRY.Value), oSecOperation.USOP_NEW_MAIN_TEL, strSMS, ref strCompleteTelephone);

                        if (lSenderId > 0)
                        {
                            customersRepository.InsertUserSMS(ref oUser, strCompleteTelephone, strSMS, lSenderId);
                        }
                    }

                }


            }
            catch
            {
                bRes = false;

            }

            return bRes;
        }

        private bool SendEmail(ref USER oUser, USERS_SECURITY_OPERATION oSecOperation, string strResEmailHeader, string strResEmailBody)
        {
            bool bRes = true;
            try
            {
                string url = ConfigurationManager.AppSettings["ForgotPassword_URL"];
                string urlWithParam = url + "?code=" + oSecOperation.USOP_URL_PARAMETER;
                string strEmailSubject = strResEmailHeader;
                string strEmailBody = string.Format(strResEmailBody, urlWithParam, url, GetEmailFooter(ref oUser));

                long lSenderId = infraestructureRepository.SendEmailTo(oSecOperation.USOP_NEW_EMAIL, strEmailSubject, strEmailBody);

                if (lSenderId > 0)
                {
                    customersRepository.InsertUserEmail(ref oUser, oSecOperation.USOP_NEW_EMAIL, strEmailSubject, strEmailBody, lSenderId);                  
                }
            }
            catch
            {
                bRes = false;

            }

            return bRes;
        }


        private void GetLatLon(SortedList parametersIn, out decimal? dLatitude, out decimal? dLongitude)
        {
            dLatitude = null;
            dLongitude = null;

            NumberFormatInfo numberFormatProvider = new NumberFormatInfo();
            numberFormatProvider.NumberDecimalSeparator = ".";

            string sValue = "";
            try
            {
                sValue = parametersIn["gps_lat"].ToString();
                if (sValue.IndexOf(",") > 0) numberFormatProvider.NumberDecimalSeparator = ",";
                decimal dTryLatitude = Convert.ToDecimal(parametersIn["gps_lat"].ToString(), numberFormatProvider);
                dLatitude = dTryLatitude;
            }
            catch
            {
                dLatitude = null;
            }

            try
            {
                sValue = parametersIn["gps_long"].ToString();
                if (sValue.IndexOf(",") > 0) numberFormatProvider.NumberDecimalSeparator = ",";
                decimal dTryLongitude = Convert.ToDecimal(parametersIn["gps_long"].ToString(), numberFormatProvider);
                dLongitude = dTryLongitude;
            }
            catch
            {
                dLongitude = null;
            }

        }


        private string GetLiteralByUserCountry(string strLiteralName, ref USER oUser)
        {
            string strLiteral = "";

            try
            {
                strLiteral = ResourceExtension.GetLiteral(string.Format("{0}_COU_{1}", strLiteralName, oUser.COUNTRy.COU_CODE));
                if (string.IsNullOrEmpty(strLiteral))
                {
                    strLiteral = ResourceExtension.GetLiteral(strLiteralName);
                }

            }
            catch
            {

            }

            return strLiteral;
        }



        private string GetEmailFooter(ref INSTALLATION oInstallation)
        {
            string strFooter = "";

            try
            {
                strFooter=ResourceExtension.GetLiteral(string.Format("footer_INS_{0}",oInstallation.INS_SHORTDESC));
                if (string.IsNullOrEmpty(strFooter))
                {
                    strFooter=ResourceExtension.GetLiteral(string.Format("footer_COU_{0}",oInstallation.COUNTRy.COU_CODE));
                }

            }
            catch
            {

            }
            
            return strFooter;
        }


        private string GetEmailFooter(ref USER oUser)
        {
            string strFooter = "";

            try
            {
                strFooter=ResourceExtension.GetLiteral(string.Format("footer_CUR_{0}_{1}",oUser.CURRENCy.CUR_ISO_CODE, oUser.COUNTRy.COU_CODE));
                if (string.IsNullOrEmpty(strFooter))
                {
                    strFooter=ResourceExtension.GetLiteral(string.Format("footer_CUR_{0}",oUser.CURRENCy.CUR_ISO_CODE));
                }
            }
            catch
            {

            }
            
            return strFooter;
        }


        private string GetOccupationXml(IEnumerable<stZone> zones, string rootTag)
        {
            string sRet = "";

            if (zones != null)
            {
                int iPer = 0;
                int iPerTotal = 0;
                int i = 0;                
                foreach (stZone oZone in zones)
                {
                    if (i < (zones.Count() - 1))
                    {
                        iPer = GetRandomNumber(0, 1000 - iPerTotal);
                        iPerTotal += iPer;
                    }
                    else
                        iPer = 1000 - iPerTotal;
                    sRet += string.Format("<{0} xmlns:json='http://james.newtonking.com/projects/json' json:Array='true' ><id>{1}</id><ocuperc>{2}</ocuperc><colour>{3}</colour><numdesc>{4}</numdesc><desc>{5}</desc>{6}</{0}>",
                                          rootTag,
                                          oZone.dID,
                                          Convert.ToDecimal(iPer) / 10,
                                          oZone.strColour,
                                          oZone.strShowId,
                                          oZone.strDescription,
                                          GetOccupationXml(oZone.subzones, "subzone"));
                    i += 1;
                }
            }

            return sRet;
        }


        private QueryOperationListPaymentMeanRechargeType TranslatePaymentMeanRechargeType(PaymentMeanRechargeType epaymentMeanRechargeType)
        {
            QueryOperationListPaymentMeanRechargeType eType = QueryOperationListPaymentMeanRechargeType.qol_DebitCreditCard;

            switch (epaymentMeanRechargeType)
            {
                case PaymentMeanRechargeType.Payment:
                    eType = QueryOperationListPaymentMeanRechargeType.qol_DebitCreditCard;
                    break;
                case PaymentMeanRechargeType.Coupon:
                    eType = QueryOperationListPaymentMeanRechargeType.qol_Coupon;
                    break;
                case PaymentMeanRechargeType.BarCode:
                    eType = QueryOperationListPaymentMeanRechargeType.qol_Coupon;
                    break;
                case PaymentMeanRechargeType.Pagatelia:
                    eType = QueryOperationListPaymentMeanRechargeType.qol_Pagatelia;
                    break;
                case PaymentMeanRechargeType.Spotycoins:
                    eType = QueryOperationListPaymentMeanRechargeType.qol_Spotycoins;
                    break;
                case PaymentMeanRechargeType.Paypal:
                    eType = QueryOperationListPaymentMeanRechargeType.qol_Paypal;
                    break;
                case PaymentMeanRechargeType.Cash:
                    eType = QueryOperationListPaymentMeanRechargeType.qol_Cash;
                    break;
                case PaymentMeanRechargeType.Oxxo:
                    eType = QueryOperationListPaymentMeanRechargeType.qol_Oxxo;
                    break;
                default:
                    eType = QueryOperationListPaymentMeanRechargeType.qol_DebitCreditCard;
                    break;

            }


            return eType;
        }



        /*private bool ExistConfirmLockInformation(string strLockDictionaryString)
        {
            bool bLockDictionaryStringExist = false;
            try
            {
                lock (m_oConfirmLockDictionary)
                {
                    bLockDictionaryStringExist = m_oConfirmLockDictionary.ContainsKey(strLockDictionaryString);

                    if (bLockDictionaryStringExist)
                    {
                        ConfirmLockInfo oLockInfo = m_oConfirmLockDictionary[strLockDictionaryString];
                        if (oLockInfo != null)
                        {
                            bLockDictionaryStringExist = ((DateTime.UtcNow - oLockInfo.m_dtCreationUTCDate).TotalSeconds < MAX_SECONDS_CONFIRMING);
                        }
                        else
                        {
                            bLockDictionaryStringExist = false;
                        }

                        if (!bLockDictionaryStringExist)
                        {
                            m_oConfirmLockDictionary.Remove(strLockDictionaryString);
                            oLockInfo = null;
                        }
                    }

                    if (!bLockDictionaryStringExist)
                    {
                        m_oConfirmLockDictionary[strLockDictionaryString] = new ConfirmLockInfo();
                    }
                }
            }
            catch (Exception e)
            {
                Logger_AddLogException(e, string.Format("ExistConfirmLockInformation::Exception"), LogLevels.logERROR);
            }


            return bLockDictionaryStringExist;

        }

        private void DeleteConfirmLockInformation(string strLockDictionaryString)
        {
            try
            {
                if (!string.IsNullOrEmpty(strLockDictionaryString))
                {
                    lock (m_oConfirmLockDictionary)
                    {
                        bool bLockDictionaryStringExist = m_oConfirmLockDictionary.ContainsKey(strLockDictionaryString);

                        if (bLockDictionaryStringExist)
                        {
                            ConfirmLockInfo oLockInfo = m_oConfirmLockDictionary[strLockDictionaryString];
                            m_oConfirmLockDictionary.Remove(strLockDictionaryString);
                            oLockInfo = null;
                        }
                    }
                }
            }
            catch (Exception e)
            {
                Logger_AddLogException(e, string.Format("DeleteConfirmLockInformation::Exception"), LogLevels.logERROR);
            }

        }*/

        private bool ExistConfirmLockInformation(string sLockIdentifier)
        {
            bool bLockExist = false;
            try
            {
                lock (m_oUserLock)
                {
                    USER_LOCK oUserLock = null;
                    if (customersRepository.GetUserLock(ref oUserLock, sLockIdentifier))
                    {
                        bLockExist = ((DateTime.UtcNow - oUserLock.USRL_LOCK_UTC_DATE).TotalSeconds < MAX_SECONDS_CONFIRMING);
                    }

                    if (!bLockExist)
                    {
                        customersRepository.AddUserLock(sLockIdentifier, DateTime.UtcNow);
                    }
                }
            }
            catch (Exception e)
            {
                Logger_AddLogException(e, string.Format("ExistConfirmLockInformation::Exception"), LogLevels.logERROR);
            }


            return bLockExist;
        }
        private void DeleteConfirmLockInformation(string sLockIdentifier)
        {
            try
            {
                if (!string.IsNullOrEmpty(sLockIdentifier))
                {
                    lock (m_oUserLock)
                    {
                        customersRepository.DeleteUserLock(sLockIdentifier);
                    }
                }
            }
            catch (Exception e)
            {
                Logger_AddLogException(e, string.Format("DeleteConfirmLockInformation::Exception"), LogLevels.logERROR);
            }
        }

        private integraMobile.WS.integraCommonService CommonService()
        {
            return new integraMobile.WS.integraCommonService(customersRepository, infraestructureRepository, geograficAndTariffsRepository);
        }

        private static void Logger_AddLogMessage(string msg, LogLevels nLevel)
        {
            m_Log.LogMessage(nLevel, msg);
        }


        private static void Logger_AddLogException(Exception ex, string msg, LogLevels nLevel)
        {
            m_Log.LogMessage(nLevel, msg, ex);
        }

        static string PrettyXml(string xml)        
        {

            try
            {
                var stringBuilder = new StringBuilder();

                var element = XElement.Parse(xml);

                var settings = new XmlWriterSettings();
                settings.OmitXmlDeclaration = true;
                settings.Indent = true;
                settings.NewLineOnAttributes = true;

                using (var xmlWriter = XmlWriter.Create(stringBuilder, settings))
                {
                    element.Save(xmlWriter);
                }

                return "\r\n\t" + stringBuilder.ToString().Replace("\r\n", "\r\n\t") + "\r\n";
            }
            catch
            {
                return "\r\n\t" + xml + "\r\n";
            }
        }

        static string PrettyJSON(string json)
        {

            try
            {
                dynamic parsedJson = JsonConvert.DeserializeObject(json);
                string strRes= JsonConvert.SerializeObject(parsedJson, Newtonsoft.Json.Formatting.Indented);
                return "\r\n\t" + strRes.Replace("\r\n", "\r\n\t")+"\r\n";
            }
            catch
            {
                return "\r\n\t" + json + "\r\n";
            }
        }

        private bool CheckVersionFormat(string sVersion)
        {
            bool bRet = false;

            try
            {
                int[] oArrVersion = sVersion.Split('.').Select(item => Convert.ToInt32(item)).ToArray();
                bRet = (oArrVersion.Length > 0);
            }
            catch (Exception ex)
            {
                bRet = false;
                Logger_AddLogException(ex, string.Format("CheckVersionFormat::Exception"), LogLevels.logERROR);
            }

            return bRet;
        }
        private bool VersionCompare(string sVersion1, string sVersion2, out string sComp)
        {
            bool bRet = false;
            sComp = "";

            try
            {
                int[] oArrVersion1 = sVersion1.Split('.').Select(item => Convert.ToInt32(item)).ToArray();
                int[] oArrVersion2 = sVersion2.Split('.').Select(item => Convert.ToInt32(item)).ToArray();

                for (int i = 0; i < Math.Min(oArrVersion1.Length, oArrVersion2.Length); i++)
                {
                    if (oArrVersion1[i] == oArrVersion2[i])
                        sComp = "==";
                    else if (oArrVersion1[i] < oArrVersion2[i])
                        sComp = "<";
                    else
                        sComp = ">";
                    if (sComp != "==") break;
                }
                bRet = true;
            }
            catch (Exception ex)
            {
                bRet = false;
            }

            return bRet;
        }
        private bool VersionGreatherEqual(string sVersion1, string sVersion2)
        {
            bool bRet = false;
            string sComp = "";
            if (VersionCompare(sVersion1, sVersion2, out sComp))
            {
                bRet = (sComp == "==" || sComp == ">");
            }
            return bRet;
        }
        private bool VersionMinor(string sVersion1, string sVersion2)
        {
            bool bRet = false;
            string sComp = "";
            if (VersionCompare(sVersion1, sVersion2, out sComp))
            {
                bRet = (sComp == "<");
            }
            return bRet;
        }


        private string NormalizePlate(string strPlate)
        {
            string strResPlate = "";
            strResPlate = strPlate.Trim().Replace(" ", "").ToUpper();
            strResPlate = new string(strResPlate.Where(c => char.IsLetterOrDigit(c)).ToArray());
            return strResPlate;
        }

        private string XmlEscape(string sXml)
        {
            return sXml.Replace("&", "&amp;").Replace("\"", "&quot;").Replace("'", "&apos;").Replace("<", "&lt;").Replace(">", "&gt;");
        }

        private string GenerateOxxoCodeBar(decimal dUserId, int iQuantity)
        {
            string sRet = "";

            try
            {
                sRet = string.Format("{0:00}", Convert.ToInt32(ConfigurationManager.AppSettings["Oxxo_RechargeCodePrefix"] ?? "0"));

                sRet += string.Format("{0:00000000000000}", dUserId);
                sRet += DateTime.Now.AddYears(1).ToString("yyyyMMdd");
                sRet += string.Format("{0:0000000}", iQuantity);

                sRet += OxxoCodeBarControlDigit(sRet);
            }
            catch (Exception ex)
            {
                Logger_AddLogException(ex, string.Format("GenerateOxxoCodeBar::Error UserId={0}, iQuantity={1}", dUserId, iQuantity), LogLevels.logERROR);
            }

            return sRet;
        }

        private string OxxoCodeBarControlDigit(string sCode)
        {
            int iRet = 0;            

            bool bFact = true;
            int iFact = 2;
            int iCalc = 0;
            string sCalc = "";

            for (int i = sCode.Length - 1; i >= 0; i--)
            {
                iFact = (bFact ? 2 : 1);
                bFact = !bFact;

                iCalc = Convert.ToInt32(sCode.Substring(i, 1)) * iFact;
                if (iCalc.ToString().Length > 1)
                {
                    sCalc = iCalc.ToString();
                    iCalc = 0;
                    for (int j = 0; j < sCalc.Length; j++)
                        iCalc += Convert.ToInt32(sCalc.Substring(j, 1));
                }

                iRet += iCalc;                    
            }

            iRet = iRet % 10;

            if (iRet != 0)
                iRet = 10 - iRet;

            return iRet.ToString();
        }

        #endregion

        #region Random

        private static readonly Random getrandom = new Random();
        private static readonly object syncLock = new object();
        private static int GetRandomNumber(int min, int max)
        {
            lock (syncLock)
            { // synchronize
                return getrandom.Next(min, max);
            }
        }

        private string GenerateNewGuid()
        {
            return GenerateId() + GenerateId() + GenerateId();
        }

        private string GenerateId()
        {
            long i = 1;
            foreach (byte b in Guid.NewGuid().ToByteArray())
            {
                i *= ((int)b + 1);
            }

            return string.Format("{0:x}", i - getrandom.Next(1, Convert.ToInt32(DateTime.UtcNow.Ticks % Int32.MaxValue)));
        }
        #endregion


    }
}
