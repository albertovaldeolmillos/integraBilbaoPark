//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18051.
// 
#pragma warning disable 1591

namespace integraMobile.ExternalWS.gTechnaThirdPartyParkingConfirmWS {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ParkingRightsListenerSoapBinding", Namespace="http://192.168.3.91:8080/officercc-spaq/services/ParkingRightsListener")]
    public partial class MESParkingRightsSOAPFacadeService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback heartBeatOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateSpaceStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateParkingRightsOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public MESParkingRightsSOAPFacadeService() {
            this.Url = global::integraMobile.ExternalWS.Properties.Settings.Default.integraMobile_ExternalWS_gTechnaThirdPartyParkingConfirmWS_MESParkingRightsSOAPFacadeService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event heartBeatCompletedEventHandler heartBeatCompleted;
        
        /// <remarks/>
        public event updateSpaceStatusCompletedEventHandler updateSpaceStatusCompleted;
        
        /// <remarks/>
        public event updateParkingRightsCompletedEventHandler updateParkingRightsCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://parkingRights.mes.cc.gti.com", ResponseNamespace="http://192.168.3.91:8080/officercc-spaq/services/ParkingRightsListener")]
        [return: System.Xml.Serialization.SoapElementAttribute("heartBeatReturn")]
        public string heartBeat(string PRPID, System.DateTime PRPCallDateTime, string PRPSequence) {
            object[] results = this.Invoke("heartBeat", new object[] {
                        PRPID,
                        PRPCallDateTime,
                        PRPSequence});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void heartBeatAsync(string PRPID, System.DateTime PRPCallDateTime, string PRPSequence) {
            this.heartBeatAsync(PRPID, PRPCallDateTime, PRPSequence, null);
        }
        
        /// <remarks/>
        public void heartBeatAsync(string PRPID, System.DateTime PRPCallDateTime, string PRPSequence, object userState) {
            if ((this.heartBeatOperationCompleted == null)) {
                this.heartBeatOperationCompleted = new System.Threading.SendOrPostCallback(this.OnheartBeatOperationCompleted);
            }
            this.InvokeAsync("heartBeat", new object[] {
                        PRPID,
                        PRPCallDateTime,
                        PRPSequence}, this.heartBeatOperationCompleted, userState);
        }
        
        private void OnheartBeatOperationCompleted(object arg) {
            if ((this.heartBeatCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.heartBeatCompleted(this, new heartBeatCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://parkingRights.mes.cc.gti.com", ResponseNamespace="http://192.168.3.91:8080/officercc-spaq/services/ParkingRightsListener")]
        [return: System.Xml.Serialization.SoapElementAttribute("updateSpaceStatusReturn")]
        public string updateSpaceStatus(string spaceNo, string spaceStatusCode, string PRPId, string PRPTransactionId, System.DateTime PRPCallDateTime, System.DateTime parkingStartDateTime, System.DateTime parkingEndDateTime, int gracePeriod, string terminalNo, bool test) {
            object[] results = this.Invoke("updateSpaceStatus", new object[] {
                        spaceNo,
                        spaceStatusCode,
                        PRPId,
                        PRPTransactionId,
                        PRPCallDateTime,
                        parkingStartDateTime,
                        parkingEndDateTime,
                        gracePeriod,
                        terminalNo,
                        test});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void updateSpaceStatusAsync(string spaceNo, string spaceStatusCode, string PRPId, string PRPTransactionId, System.DateTime PRPCallDateTime, System.DateTime parkingStartDateTime, System.DateTime parkingEndDateTime, int gracePeriod, string terminalNo, bool test) {
            this.updateSpaceStatusAsync(spaceNo, spaceStatusCode, PRPId, PRPTransactionId, PRPCallDateTime, parkingStartDateTime, parkingEndDateTime, gracePeriod, terminalNo, test, null);
        }
        
        /// <remarks/>
        public void updateSpaceStatusAsync(string spaceNo, string spaceStatusCode, string PRPId, string PRPTransactionId, System.DateTime PRPCallDateTime, System.DateTime parkingStartDateTime, System.DateTime parkingEndDateTime, int gracePeriod, string terminalNo, bool test, object userState) {
            if ((this.updateSpaceStatusOperationCompleted == null)) {
                this.updateSpaceStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateSpaceStatusOperationCompleted);
            }
            this.InvokeAsync("updateSpaceStatus", new object[] {
                        spaceNo,
                        spaceStatusCode,
                        PRPId,
                        PRPTransactionId,
                        PRPCallDateTime,
                        parkingStartDateTime,
                        parkingEndDateTime,
                        gracePeriod,
                        terminalNo,
                        test}, this.updateSpaceStatusOperationCompleted, userState);
        }
        
        private void OnupdateSpaceStatusOperationCompleted(object arg) {
            if ((this.updateSpaceStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateSpaceStatusCompleted(this, new updateSpaceStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://parkingRights.mes.cc.gti.com", ResponseNamespace="http://192.168.3.91:8080/officercc-spaq/services/ParkingRightsListener")]
        [return: System.Xml.Serialization.SoapElementAttribute("updateParkingRightsReturn")]
        public string updateParkingRights(
                    string licencePlate, 
                    string spaceNo, 
                    string PRPId, 
                    string PRPTransactionId, 
                    System.DateTime PRPCallDateTime, 
                    System.DateTime parkingStartDateTime, 
                    System.DateTime parkingEndDateTime, 
                    decimal amount, 
                    string currency, 
                    int gracePeriod, 
                    string terminalNo, 
                    string zoneNo, 
                    string permitNo, 
                    string permitType, 
                    bool handicap, 
                    string licencePlateState, 
                    string vehicleMake, 
                    string vehicleModel, 
                    string vehicleColor, 
                    string note, 
                    bool test) {
            object[] results = this.Invoke("updateParkingRights", new object[] {
                        licencePlate,
                        spaceNo,
                        PRPId,
                        PRPTransactionId,
                        PRPCallDateTime,
                        parkingStartDateTime,
                        parkingEndDateTime,
                        amount,
                        currency,
                        gracePeriod,
                        terminalNo,
                        zoneNo,
                        permitNo,
                        permitType,
                        handicap,
                        licencePlateState,
                        vehicleMake,
                        vehicleModel,
                        vehicleColor,
                        note,
                        test});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void updateParkingRightsAsync(
                    string licencePlate, 
                    string spaceNo, 
                    string PRPId, 
                    string PRPTransactionId, 
                    System.DateTime PRPCallDateTime, 
                    System.DateTime parkingStartDateTime, 
                    System.DateTime parkingEndDateTime, 
                    decimal amount, 
                    string currency, 
                    int gracePeriod, 
                    string terminalNo, 
                    string zoneNo, 
                    string permitNo, 
                    string permitType, 
                    bool handicap, 
                    string licencePlateState, 
                    string vehicleMake, 
                    string vehicleModel, 
                    string vehicleColor, 
                    string note, 
                    bool test) {
            this.updateParkingRightsAsync(licencePlate, spaceNo, PRPId, PRPTransactionId, PRPCallDateTime, parkingStartDateTime, parkingEndDateTime, amount, currency, gracePeriod, terminalNo, zoneNo, permitNo, permitType, handicap, licencePlateState, vehicleMake, vehicleModel, vehicleColor, note, test, null);
        }
        
        /// <remarks/>
        public void updateParkingRightsAsync(
                    string licencePlate, 
                    string spaceNo, 
                    string PRPId, 
                    string PRPTransactionId, 
                    System.DateTime PRPCallDateTime, 
                    System.DateTime parkingStartDateTime, 
                    System.DateTime parkingEndDateTime, 
                    decimal amount, 
                    string currency, 
                    int gracePeriod, 
                    string terminalNo, 
                    string zoneNo, 
                    string permitNo, 
                    string permitType, 
                    bool handicap, 
                    string licencePlateState, 
                    string vehicleMake, 
                    string vehicleModel, 
                    string vehicleColor, 
                    string note, 
                    bool test, 
                    object userState) {
            if ((this.updateParkingRightsOperationCompleted == null)) {
                this.updateParkingRightsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateParkingRightsOperationCompleted);
            }
            this.InvokeAsync("updateParkingRights", new object[] {
                        licencePlate,
                        spaceNo,
                        PRPId,
                        PRPTransactionId,
                        PRPCallDateTime,
                        parkingStartDateTime,
                        parkingEndDateTime,
                        amount,
                        currency,
                        gracePeriod,
                        terminalNo,
                        zoneNo,
                        permitNo,
                        permitType,
                        handicap,
                        licencePlateState,
                        vehicleMake,
                        vehicleModel,
                        vehicleColor,
                        note,
                        test}, this.updateParkingRightsOperationCompleted, userState);
        }
        
        private void OnupdateParkingRightsOperationCompleted(object arg) {
            if ((this.updateParkingRightsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateParkingRightsCompleted(this, new updateParkingRightsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void heartBeatCompletedEventHandler(object sender, heartBeatCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class heartBeatCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal heartBeatCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void updateSpaceStatusCompletedEventHandler(object sender, updateSpaceStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateSpaceStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateSpaceStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void updateParkingRightsCompletedEventHandler(object sender, updateParkingRightsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateParkingRightsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateParkingRightsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591