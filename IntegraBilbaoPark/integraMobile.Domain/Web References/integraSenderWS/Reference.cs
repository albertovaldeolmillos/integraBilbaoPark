//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18051.
// 
#pragma warning disable 1591

namespace integraMobile.Domain.integraSenderWS {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="integraSenderSoap", Namespace="http://tempuri.org/")]
    public partial class integraSender : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback AddSMSToSendOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddEmailToSendOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddEmailToSendWithPriorityOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddEmailToSendMultiRecipientsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddEmailWithAttachementsToSendOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddEmailWithAttachementsToSendWithPriorityOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddEmailWithAttachementsToSendMultiRecipientsOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public integraSender() {
            this.Url = global::integraMobile.Domain.Properties.Settings.Default.integraMobile_Domain_integraSenderWS_integraSender;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event AddSMSToSendCompletedEventHandler AddSMSToSendCompleted;
        
        /// <remarks/>
        public event AddEmailToSendCompletedEventHandler AddEmailToSendCompleted;
        
        /// <remarks/>
        public event AddEmailToSendWithPriorityCompletedEventHandler AddEmailToSendWithPriorityCompleted;
        
        /// <remarks/>
        public event AddEmailToSendMultiRecipientsCompletedEventHandler AddEmailToSendMultiRecipientsCompleted;
        
        /// <remarks/>
        public event AddEmailWithAttachementsToSendCompletedEventHandler AddEmailWithAttachementsToSendCompleted;
        
        /// <remarks/>
        public event AddEmailWithAttachementsToSendWithPriorityCompletedEventHandler AddEmailWithAttachementsToSendWithPriorityCompleted;
        
        /// <remarks/>
        public event AddEmailWithAttachementsToSendMultiRecipientsCompletedEventHandler AddEmailWithAttachementsToSendMultiRecipientsCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddSMSToSend", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long AddSMSToSend(string strSMS, string strSMSRecipient, string strConfirmationURL, string strConfirmationURLUsername, string strConfirmationPassword) {
            object[] results = this.Invoke("AddSMSToSend", new object[] {
                        strSMS,
                        strSMSRecipient,
                        strConfirmationURL,
                        strConfirmationURLUsername,
                        strConfirmationPassword});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void AddSMSToSendAsync(string strSMS, string strSMSRecipient, string strConfirmationURL, string strConfirmationURLUsername, string strConfirmationPassword) {
            this.AddSMSToSendAsync(strSMS, strSMSRecipient, strConfirmationURL, strConfirmationURLUsername, strConfirmationPassword, null);
        }
        
        /// <remarks/>
        public void AddSMSToSendAsync(string strSMS, string strSMSRecipient, string strConfirmationURL, string strConfirmationURLUsername, string strConfirmationPassword, object userState) {
            if ((this.AddSMSToSendOperationCompleted == null)) {
                this.AddSMSToSendOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddSMSToSendOperationCompleted);
            }
            this.InvokeAsync("AddSMSToSend", new object[] {
                        strSMS,
                        strSMSRecipient,
                        strConfirmationURL,
                        strConfirmationURLUsername,
                        strConfirmationPassword}, this.AddSMSToSendOperationCompleted, userState);
        }
        
        private void OnAddSMSToSendOperationCompleted(object arg) {
            if ((this.AddSMSToSendCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddSMSToSendCompleted(this, new AddSMSToSendCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddEmailToSend", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long AddEmailToSend(string strEmailSubject, string strEmailBody, string strEmailRecipient, string strConfirmationURL, string strConfirmationURLUsername, string strConfirmationPassword) {
            object[] results = this.Invoke("AddEmailToSend", new object[] {
                        strEmailSubject,
                        strEmailBody,
                        strEmailRecipient,
                        strConfirmationURL,
                        strConfirmationURLUsername,
                        strConfirmationPassword});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void AddEmailToSendAsync(string strEmailSubject, string strEmailBody, string strEmailRecipient, string strConfirmationURL, string strConfirmationURLUsername, string strConfirmationPassword) {
            this.AddEmailToSendAsync(strEmailSubject, strEmailBody, strEmailRecipient, strConfirmationURL, strConfirmationURLUsername, strConfirmationPassword, null);
        }
        
        /// <remarks/>
        public void AddEmailToSendAsync(string strEmailSubject, string strEmailBody, string strEmailRecipient, string strConfirmationURL, string strConfirmationURLUsername, string strConfirmationPassword, object userState) {
            if ((this.AddEmailToSendOperationCompleted == null)) {
                this.AddEmailToSendOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddEmailToSendOperationCompleted);
            }
            this.InvokeAsync("AddEmailToSend", new object[] {
                        strEmailSubject,
                        strEmailBody,
                        strEmailRecipient,
                        strConfirmationURL,
                        strConfirmationURLUsername,
                        strConfirmationPassword}, this.AddEmailToSendOperationCompleted, userState);
        }
        
        private void OnAddEmailToSendOperationCompleted(object arg) {
            if ((this.AddEmailToSendCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddEmailToSendCompleted(this, new AddEmailToSendCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddEmailToSendWithPriority", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long AddEmailToSendWithPriority(string strEmailSubject, string strEmailBody, string strEmailRecipient, string strConfirmationURL, string strConfirmationURLUsername, string strConfirmationPassword, EmailPriority priority) {
            object[] results = this.Invoke("AddEmailToSendWithPriority", new object[] {
                        strEmailSubject,
                        strEmailBody,
                        strEmailRecipient,
                        strConfirmationURL,
                        strConfirmationURLUsername,
                        strConfirmationPassword,
                        priority});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void AddEmailToSendWithPriorityAsync(string strEmailSubject, string strEmailBody, string strEmailRecipient, string strConfirmationURL, string strConfirmationURLUsername, string strConfirmationPassword, EmailPriority priority) {
            this.AddEmailToSendWithPriorityAsync(strEmailSubject, strEmailBody, strEmailRecipient, strConfirmationURL, strConfirmationURLUsername, strConfirmationPassword, priority, null);
        }
        
        /// <remarks/>
        public void AddEmailToSendWithPriorityAsync(string strEmailSubject, string strEmailBody, string strEmailRecipient, string strConfirmationURL, string strConfirmationURLUsername, string strConfirmationPassword, EmailPriority priority, object userState) {
            if ((this.AddEmailToSendWithPriorityOperationCompleted == null)) {
                this.AddEmailToSendWithPriorityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddEmailToSendWithPriorityOperationCompleted);
            }
            this.InvokeAsync("AddEmailToSendWithPriority", new object[] {
                        strEmailSubject,
                        strEmailBody,
                        strEmailRecipient,
                        strConfirmationURL,
                        strConfirmationURLUsername,
                        strConfirmationPassword,
                        priority}, this.AddEmailToSendWithPriorityOperationCompleted, userState);
        }
        
        private void OnAddEmailToSendWithPriorityOperationCompleted(object arg) {
            if ((this.AddEmailToSendWithPriorityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddEmailToSendWithPriorityCompleted(this, new AddEmailToSendWithPriorityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddEmailToSendMultiRecipients", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long[] AddEmailToSendMultiRecipients(string strEmailSubject, string strEmailBody, string[] arrEmailRecipients, string strConfirmationURL, string strConfirmationURLUsername, string strConfirmationPassword, EmailPriority priority) {
            object[] results = this.Invoke("AddEmailToSendMultiRecipients", new object[] {
                        strEmailSubject,
                        strEmailBody,
                        arrEmailRecipients,
                        strConfirmationURL,
                        strConfirmationURLUsername,
                        strConfirmationPassword,
                        priority});
            return ((long[])(results[0]));
        }
        
        /// <remarks/>
        public void AddEmailToSendMultiRecipientsAsync(string strEmailSubject, string strEmailBody, string[] arrEmailRecipients, string strConfirmationURL, string strConfirmationURLUsername, string strConfirmationPassword, EmailPriority priority) {
            this.AddEmailToSendMultiRecipientsAsync(strEmailSubject, strEmailBody, arrEmailRecipients, strConfirmationURL, strConfirmationURLUsername, strConfirmationPassword, priority, null);
        }
        
        /// <remarks/>
        public void AddEmailToSendMultiRecipientsAsync(string strEmailSubject, string strEmailBody, string[] arrEmailRecipients, string strConfirmationURL, string strConfirmationURLUsername, string strConfirmationPassword, EmailPriority priority, object userState) {
            if ((this.AddEmailToSendMultiRecipientsOperationCompleted == null)) {
                this.AddEmailToSendMultiRecipientsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddEmailToSendMultiRecipientsOperationCompleted);
            }
            this.InvokeAsync("AddEmailToSendMultiRecipients", new object[] {
                        strEmailSubject,
                        strEmailBody,
                        arrEmailRecipients,
                        strConfirmationURL,
                        strConfirmationURLUsername,
                        strConfirmationPassword,
                        priority}, this.AddEmailToSendMultiRecipientsOperationCompleted, userState);
        }
        
        private void OnAddEmailToSendMultiRecipientsOperationCompleted(object arg) {
            if ((this.AddEmailToSendMultiRecipientsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddEmailToSendMultiRecipientsCompleted(this, new AddEmailToSendMultiRecipientsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddEmailWithAttachementsToSend", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long AddEmailWithAttachementsToSend(string strEmailSubject, string strEmailBody, string strEmailRecipient, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] FileAttachmentInfo[] arrFiles, string strConfirmationURL, string strConfirmationURLUsername, string strConfirmationPassword) {
            object[] results = this.Invoke("AddEmailWithAttachementsToSend", new object[] {
                        strEmailSubject,
                        strEmailBody,
                        strEmailRecipient,
                        arrFiles,
                        strConfirmationURL,
                        strConfirmationURLUsername,
                        strConfirmationPassword});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void AddEmailWithAttachementsToSendAsync(string strEmailSubject, string strEmailBody, string strEmailRecipient, FileAttachmentInfo[] arrFiles, string strConfirmationURL, string strConfirmationURLUsername, string strConfirmationPassword) {
            this.AddEmailWithAttachementsToSendAsync(strEmailSubject, strEmailBody, strEmailRecipient, arrFiles, strConfirmationURL, strConfirmationURLUsername, strConfirmationPassword, null);
        }
        
        /// <remarks/>
        public void AddEmailWithAttachementsToSendAsync(string strEmailSubject, string strEmailBody, string strEmailRecipient, FileAttachmentInfo[] arrFiles, string strConfirmationURL, string strConfirmationURLUsername, string strConfirmationPassword, object userState) {
            if ((this.AddEmailWithAttachementsToSendOperationCompleted == null)) {
                this.AddEmailWithAttachementsToSendOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddEmailWithAttachementsToSendOperationCompleted);
            }
            this.InvokeAsync("AddEmailWithAttachementsToSend", new object[] {
                        strEmailSubject,
                        strEmailBody,
                        strEmailRecipient,
                        arrFiles,
                        strConfirmationURL,
                        strConfirmationURLUsername,
                        strConfirmationPassword}, this.AddEmailWithAttachementsToSendOperationCompleted, userState);
        }
        
        private void OnAddEmailWithAttachementsToSendOperationCompleted(object arg) {
            if ((this.AddEmailWithAttachementsToSendCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddEmailWithAttachementsToSendCompleted(this, new AddEmailWithAttachementsToSendCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddEmailWithAttachementsToSendWithPriority", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long AddEmailWithAttachementsToSendWithPriority(string strEmailSubject, string strEmailBody, string strEmailRecipient, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] FileAttachmentInfo[] arrFiles, string strConfirmationURL, string strConfirmationURLUsername, string strConfirmationPassword, EmailPriority priority) {
            object[] results = this.Invoke("AddEmailWithAttachementsToSendWithPriority", new object[] {
                        strEmailSubject,
                        strEmailBody,
                        strEmailRecipient,
                        arrFiles,
                        strConfirmationURL,
                        strConfirmationURLUsername,
                        strConfirmationPassword,
                        priority});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void AddEmailWithAttachementsToSendWithPriorityAsync(string strEmailSubject, string strEmailBody, string strEmailRecipient, FileAttachmentInfo[] arrFiles, string strConfirmationURL, string strConfirmationURLUsername, string strConfirmationPassword, EmailPriority priority) {
            this.AddEmailWithAttachementsToSendWithPriorityAsync(strEmailSubject, strEmailBody, strEmailRecipient, arrFiles, strConfirmationURL, strConfirmationURLUsername, strConfirmationPassword, priority, null);
        }
        
        /// <remarks/>
        public void AddEmailWithAttachementsToSendWithPriorityAsync(string strEmailSubject, string strEmailBody, string strEmailRecipient, FileAttachmentInfo[] arrFiles, string strConfirmationURL, string strConfirmationURLUsername, string strConfirmationPassword, EmailPriority priority, object userState) {
            if ((this.AddEmailWithAttachementsToSendWithPriorityOperationCompleted == null)) {
                this.AddEmailWithAttachementsToSendWithPriorityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddEmailWithAttachementsToSendWithPriorityOperationCompleted);
            }
            this.InvokeAsync("AddEmailWithAttachementsToSendWithPriority", new object[] {
                        strEmailSubject,
                        strEmailBody,
                        strEmailRecipient,
                        arrFiles,
                        strConfirmationURL,
                        strConfirmationURLUsername,
                        strConfirmationPassword,
                        priority}, this.AddEmailWithAttachementsToSendWithPriorityOperationCompleted, userState);
        }
        
        private void OnAddEmailWithAttachementsToSendWithPriorityOperationCompleted(object arg) {
            if ((this.AddEmailWithAttachementsToSendWithPriorityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddEmailWithAttachementsToSendWithPriorityCompleted(this, new AddEmailWithAttachementsToSendWithPriorityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddEmailWithAttachementsToSendMultiRecipients", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long[] AddEmailWithAttachementsToSendMultiRecipients(string strEmailSubject, string strEmailBody, string[] arrEmailRecipients, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] FileAttachmentInfo[] arrFiles, string strConfirmationURL, string strConfirmationURLUsername, string strConfirmationPassword, EmailPriority priority) {
            object[] results = this.Invoke("AddEmailWithAttachementsToSendMultiRecipients", new object[] {
                        strEmailSubject,
                        strEmailBody,
                        arrEmailRecipients,
                        arrFiles,
                        strConfirmationURL,
                        strConfirmationURLUsername,
                        strConfirmationPassword,
                        priority});
            return ((long[])(results[0]));
        }
        
        /// <remarks/>
        public void AddEmailWithAttachementsToSendMultiRecipientsAsync(string strEmailSubject, string strEmailBody, string[] arrEmailRecipients, FileAttachmentInfo[] arrFiles, string strConfirmationURL, string strConfirmationURLUsername, string strConfirmationPassword, EmailPriority priority) {
            this.AddEmailWithAttachementsToSendMultiRecipientsAsync(strEmailSubject, strEmailBody, arrEmailRecipients, arrFiles, strConfirmationURL, strConfirmationURLUsername, strConfirmationPassword, priority, null);
        }
        
        /// <remarks/>
        public void AddEmailWithAttachementsToSendMultiRecipientsAsync(string strEmailSubject, string strEmailBody, string[] arrEmailRecipients, FileAttachmentInfo[] arrFiles, string strConfirmationURL, string strConfirmationURLUsername, string strConfirmationPassword, EmailPriority priority, object userState) {
            if ((this.AddEmailWithAttachementsToSendMultiRecipientsOperationCompleted == null)) {
                this.AddEmailWithAttachementsToSendMultiRecipientsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddEmailWithAttachementsToSendMultiRecipientsOperationCompleted);
            }
            this.InvokeAsync("AddEmailWithAttachementsToSendMultiRecipients", new object[] {
                        strEmailSubject,
                        strEmailBody,
                        arrEmailRecipients,
                        arrFiles,
                        strConfirmationURL,
                        strConfirmationURLUsername,
                        strConfirmationPassword,
                        priority}, this.AddEmailWithAttachementsToSendMultiRecipientsOperationCompleted, userState);
        }
        
        private void OnAddEmailWithAttachementsToSendMultiRecipientsOperationCompleted(object arg) {
            if ((this.AddEmailWithAttachementsToSendMultiRecipientsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddEmailWithAttachementsToSendMultiRecipientsCompleted(this, new AddEmailWithAttachementsToSendMultiRecipientsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18058")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum EmailPriority {
        
        /// <remarks/>
        VeryHigh,
        
        /// <remarks/>
        High,
        
        /// <remarks/>
        Normal,
        
        /// <remarks/>
        Low,
        
        /// <remarks/>
        VeryLow,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18058")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class FileAttachmentInfo {
        
        private string strNameField;
        
        private string strMediaTypeField;
        
        private byte[] fileContentField;
        
        /// <remarks/>
        public string strName {
            get {
                return this.strNameField;
            }
            set {
                this.strNameField = value;
            }
        }
        
        /// <remarks/>
        public string strMediaType {
            get {
                return this.strMediaTypeField;
            }
            set {
                this.strMediaTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] fileContent {
            get {
                return this.fileContentField;
            }
            set {
                this.fileContentField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AddSMSToSendCompletedEventHandler(object sender, AddSMSToSendCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddSMSToSendCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddSMSToSendCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AddEmailToSendCompletedEventHandler(object sender, AddEmailToSendCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddEmailToSendCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddEmailToSendCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AddEmailToSendWithPriorityCompletedEventHandler(object sender, AddEmailToSendWithPriorityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddEmailToSendWithPriorityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddEmailToSendWithPriorityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AddEmailToSendMultiRecipientsCompletedEventHandler(object sender, AddEmailToSendMultiRecipientsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddEmailToSendMultiRecipientsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddEmailToSendMultiRecipientsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AddEmailWithAttachementsToSendCompletedEventHandler(object sender, AddEmailWithAttachementsToSendCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddEmailWithAttachementsToSendCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddEmailWithAttachementsToSendCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AddEmailWithAttachementsToSendWithPriorityCompletedEventHandler(object sender, AddEmailWithAttachementsToSendWithPriorityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddEmailWithAttachementsToSendWithPriorityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddEmailWithAttachementsToSendWithPriorityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AddEmailWithAttachementsToSendMultiRecipientsCompletedEventHandler(object sender, AddEmailWithAttachementsToSendMultiRecipientsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddEmailWithAttachementsToSendMultiRecipientsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddEmailWithAttachementsToSendMultiRecipientsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591